#ifdef _MSC_VER
#include <stdint.h>
#endif

#line 2 "lib/SPARQLalgebraScanner.cpp"

#line 4 "lib/SPARQLalgebraScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SPARQLalgebraFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file; 
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SPARQLalgebraalloc (yy_size_t  );
void *SPARQLalgebrarealloc (void *,yy_size_t  );
void SPARQLalgebrafree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 160
#define YY_END_OF_BUFFER 161
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1226] =
    {   0,
        0,    0,  161,  160,    1,   73,  160,    1,  160,  160,
      160,    2,    3,   71,   69,   50,   70,  160,   72,  145,
      139,   64,   62,   65,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,   17,   58,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,    1,   63,    0,
      155,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    1,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  143,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   61,    0,  154,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  158,    0,
      148,    0,  151,  146,  146,  145,    0,  140,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   66,  138,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       67,  142,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  144,    0,    0,  139,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  159,  135,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  114,   68,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  104,    0,    0,    0,    0,    0,

       60,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  155,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  143,  143,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  143,  143,  143,  143,  143,  143,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  154,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  149,  149,    0,  152,  152,    0,

        0,  146,    0,    0,  147,  140,    0,  140,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  140,
      140,  140,  140,  140,  140,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  142,  142,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      142,  142,  142,  142,  142,  142,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      131,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  130,  129,    0,  128,  141,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   83,   23,
       34,   51,   14,    4,    0,   36,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   99,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   79,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  108,  129,   54,    0,    0,    0,    0,

      105,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   52,    0,    0,    0,    0,
       74,    0,    0,    0,    0,    0,    0,    0,   80,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    1,    0,    0,    0,  143,
      143,  143,  143,  143,  143,  143,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  143,
      143,  143,  143,  143,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  149,    0,    0,  150,    0,  152,
        0,    0,  153,    0,  147,    0,  147,  140,  140,  140,
      140,  140,  140,  140,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  140,  140,  140,
      140,  140,    0,    0,    0,    0,    0,    0,  142,  142,
      142,  142,  142,  142,  142,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  142,  142,
      142,  142,  142,    0,    0,  144,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  141,    0,  141,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  141,  141,  141,  141,  141,  141,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        5,    0,    0,   84,    0,    0,    0,    0,   25,    0,
        0,    0,    0,   15,    0,   21,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   40,   75,    0,    0,   18,    0,    0,    0,
       24,    0,    0,    0,    0,   39,    0,    0,    0,   82,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  109,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  136,    0,    0,   38,
      106,   97,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  143,  143,  143,  143,  143,    0,    0,
      143,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  150,    0,  150,    0,  153,    0,  153,  140,
      140,  140,  140,  140,    0,    0,  140,  142,  142,  142,
      142,  142,    0,    0,  142,    0,  126,    0,    0,    0,
      141,  141,  141,  141,  141,  141,  141,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      141,  141,  141,  141,  141,    0,    0,   81,   78,   19,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  137,    0,   85,   46,   11,  100,    0,    0,
      118,    0,    0,  119,    0,   90,    0,   48,    0,    0,
       98,   33,    0,    0,   13,   56,   57,   55,    0,    0,
       35,    0,  123,    0,   86,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   16,    0,    0,  116,    0,    0,
        0,    0,    0,    0,   37,    0,    0,   89,   49,  157,
        0,    0,    0,    0,  143,  156,    0,    0,    0,    0,
      140,  142,    0,    0,  132,  141,  141,  141,  141,  141,
        0,    0,  141,    0,   87,    0,   22,    0,    0,   30,

        0,    0,  125,    0,    8,   12,   31,    0,    0,    0,
        0,    0,    0,   29,    0,    0,    6,    0,    0,    0,
        0,    0,    0,    0,    0,  110,  111,  112,   20,    0,
        0,    0,    0,   88,    0,    0,  124,    0,   43,    0,
        0,  141,    0,    0,    0,   32,    0,    0,    0,    0,
        0,    0,  120,    0,    0,    0,    0,  101,    0,    0,
        7,   10,   53,    0,  102,    0,    0,   47,    0,    0,
       94,  115,    0,  107,    0,  127,    0,  113,   92,   77,
        0,    0,    9,    0,   42,    0,    0,    0,    0,   44,
       59,   45,  117,    0,   41,   96,    0,    0,  103,    0,

        0,    0,    0,    0,  121,  122,    0,  134,   95,   93,
        0,   27,    0,    0,   26,    0,    0,   28,    0,   76,
      133,    0,    0,   91,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   21,   28,   21,   29,   10,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   36,
       40,   36,   41,   36,   36,   42,   43,   44,   45,   46,
       36,   47,   48,   49,   50,   51,   36,   52,   36,   36,
       53,   54,   55,   56,   57,    1,   58,   59,   60,   61,

       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
       82,   83,    1,   84,    1,   10,   10,   85,   86,   87,
       87,   87,   87,   88,   89,   89,   89,   89,   89,   90,
       90,   89,   91,   92,   92,   92,   92,   92,   92,   92,
       93,   94,   94,   94,   94,   94,   94,   94,   94,   95,
       95,   95,   95,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   97,   97,   97,   97,   97,
       97,   97,   98,   99,   99,   99,   99,   99,   99,  100,
      101,  102,  102,  103,  104,  105,  105,  105,  105,  105,

      105,  105,  105,  106,  107,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  109,  110,  111,  112,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  114,  115,  116,  117,
      118,  118,  118,  119,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102
    } ;

static yyconst YY_CHAR yy_meta[120] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,    4,    4,    4,    4,    4,    4,    4,    3,    1,
        3,    3,    3,    3,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    3,    1,    3,    1,    6,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    1,    7,    8,    8,    8,    8,    8,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        6,    7,    3,    6,    6,    3,    6,    6,    6,    6,
        6,    6,    6,    6,    3,    6,    6,    6,    3
    } ;

static yyconst flex_uint16_t yy_base[1242] =
    {   0,
        0,    0,  463,10667,  118,  413,  117,  146,  180,  432,
      287,  123,10667,10667,  117,10667,  127,  135,10667,  151,
      321,  409,10667,  396,  443,    0,  544,  113,  135,  140,
      118,  260,  265,  127,  321,  347,  124,  138,  258,  263,
      231,  266,  136,  116,  277,  133,  300,  401,  296,  165,
      306,  271,  308,  410,  399,  426,  257,  289,  578,  595,
      612,  629,  646,  663,  680,  697,  144,  714,  395,  731,
      748,  765,  782,  799,   37,  802,  819,  444,10667,  914,
      364,  915,  843,  859,  949,  864,  966,  908,  983,  993,
     1010,  894, 1021, 1056, 1072, 1087,  911, 1104, 1121, 1131,

     1141, 1158, 1028, 1239, 1273, 1290, 1307, 1324, 1341, 1358,
     1375, 1392,  285, 1409, 1416, 1433, 1450, 1467, 1484, 1501,
      209, 1504, 1521,10667, 1611,  357, 1617, 1545, 1561, 1646,
     1586, 1663, 1680, 1690, 1700, 1717, 1183, 1659,10667, 1682,
     1800, 1808, 1819, 1827, 1846, 1871, 1891, 1916, 1950, 1967,
     1984, 2001, 2018, 2035, 2052, 2069,  357, 2086, 1600, 2103,
     2120, 2137, 2154, 1835,  373, 2164, 2181, 2251,    0,10667,
     2199, 2215, 2230, 1805, 2286, 2247, 2303, 2313, 2330, 1790,
    10667, 2411, 2445, 2462, 2479, 2496, 2513, 2530, 2547, 2564,
      410, 2581, 2248, 2598, 2615, 2632, 2649, 2666,  387, 2669,

     2686,  349,  115,  549, 2702,  295, 2777, 2772, 2789, 2806,
     2823, 2840, 2857, 2874,  267, 2748, 2891, 2908, 2925, 2726,
     2942, 2959, 2976, 2993, 3010,  478, 3013, 3030,  925,  937,
      310,  372, 1812, 3089, 3090, 1290,10667,10667, 3084, 1808,
     3083, 3084, 3086, 2753, 1809, 3085, 1786,  498, 3087, 3153,
     3088, 3135, 3158, 3139, 3156, 3159, 3174, 3154, 3179, 3157,
     3188, 3165, 1921, 3190, 3191, 3205, 3199, 3201, 3203, 3212,
     3228, 2416, 3237, 3226, 3222, 3234, 3217, 3238, 3242, 3253,
     3244, 3239, 3269, 3249, 3283, 3271, 3278, 3273, 3288, 3284,
     3313, 3290, 3296, 3292, 3258, 3310, 3314, 3322, 3325, 3323,

    10667, 3261, 3300, 3326, 3327, 3331, 3333, 3334, 3329, 3346,
     3363, 3380, 3397, 3414, 3431, 3448, 3465, 3482, 1569, 3499,
     3516,10667, 3611, 3534,  308, 3551, 3581, 3598, 3646, 3663,
     3680, 3697, 3714,  279, 3731, 3748, 3765, 3782, 3799, 3816,
     3833,    0,    0, 3850, 3867, 3884, 3901, 3918, 3935, 3952,
      233, 3969, 3986, 4003, 4020, 3299, 4037, 4054, 4071, 4088,
     3568,  501, 4098, 4115,    0,    0,    0,    0,    0,    0,
     4132, 4149, 4166, 4183, 4200, 4217, 4234, 4251, 4268, 4285,
     1848, 4302, 4319,10667, 4409, 4337,  258, 4354, 4379, 4396,
     4444, 4461, 4478, 4495, 4576, 4584, 4603, 4626, 4634, 4653,

     4676, 4684, 4703, 3682, 4480,    0,    0,    0, 4662, 4679,
     4696, 4713, 4730, 4747, 4764,  188, 4781, 4798, 4815, 4832,
     4361, 4849, 4866, 4883, 4900, 4647,  827, 4910, 4927,    0,
        0,    0,    0,    0,    0, 4944, 4961, 4978, 4995, 5012,
     5029, 5046, 5063, 5080, 5097, 2753, 5114, 5131, 5148,  228,
     5165, 5182, 5199, 5216, 5233, 5250, 5267,    0,    0, 5284,
     5301, 5318, 5335, 5352, 5369, 5386,  150, 5403, 5420, 5437,
     5454, 4544, 5471, 5488, 5505, 5522, 5539,  874, 5542, 5559,
        0,    0,    0,    0,    0,    0, 5576, 5593, 5610, 5627,
     5644, 5661, 5678, 5695, 5712, 5729, 4535, 5746, 5763,    0,

     4612, 4616, 4634, 4635, 4636, 4638, 4639, 4665, 5780, 5797,
     5814, 5831, 5848, 5865, 5882, 5899, 5916, 5933, 5938, 5955,
     5972, 6030, 6026, 6028, 6025, 6029, 6037, 6033, 6099, 6133,
     6150, 6167, 6184, 6201, 6218, 6235, 6252, 1022, 6269, 5994,
     6286, 6303, 6320, 6337, 6354, 1529, 6357, 6374, 6034, 6035,
     6036, 6049, 6051, 6104, 6425, 6426, 6427, 6428, 6429, 6431,
     6432, 6435, 6434, 6439, 6442, 6430, 6445, 6440, 6466, 6443,
     6464, 6472, 6474, 6477, 6476, 6478, 6481, 6489, 6490, 6488,
     6495, 6480, 6483, 6496, 6497, 6498, 6520, 6522, 6529, 6527,
     6528, 6532, 6531, 6533, 6535, 6536, 6539, 6543, 6566, 6552,

     6542, 6568, 6574, 6572, 6569, 6575, 6578, 6579, 6582, 6576,
     6584, 6593, 6616, 6598, 6592, 6590, 6601, 6659, 6614, 6615,
     6639, 6608, 6623, 6637, 6640, 6645, 6635, 6653, 6652, 6661,
     6654, 6655, 6658, 6669, 6670, 6672, 6667, 6684, 6779,  239,
     6734, 6727, 6749, 6764, 6703, 6814, 6831, 6841, 6851, 6868,
     6786, 6963, 6886, 6903, 6933, 6992, 6950, 7027, 7044,    0,
        0,    0,    0,    0,    0,    0, 7061, 7078, 7095, 7112,
     7129, 7146, 7163, 7180, 7197, 7214, 6731, 7231, 7248,    0,
        0,    0,    0,    0, 7265, 7282, 7372,  227, 7378, 7306,
     7322, 7407, 6910, 7424, 7441, 7451, 7461, 7478, 6970, 7568,

     7496, 7513, 7538, 7443, 7626, 7673, 7063, 7681, 7694, 7702,
     7721, 7729, 7744, 7752, 7760, 7768, 7776,    0,    0,    0,
        0,    0,    0,    0, 7720, 7737, 7754, 7771, 7788, 7805,
     7822, 7839, 7856, 7873, 6915, 7890, 7907,    0,    0,    0,
        0,    0, 7924, 7941, 8011, 7959, 7976, 7993,    0,    0,
        0,    0,    0,    0,    0, 8046, 8063, 8080, 8097, 8114,
     8131, 8148, 8165, 8182, 8199, 7330, 8216, 8233,    0,    0,
        0,    0,    0, 8250, 8267,  186, 7371, 7372, 7373, 7383,
     7393, 8284, 8301, 7566, 8362, 7611, 8363,    0,    0,    0,
     8358, 8375, 8392, 8409, 8426, 8443, 8460,  105, 8330, 8477,

     8494, 8511, 8000, 8528, 8545, 8562, 8579, 8596, 1581, 8599,
     8616,    0,    0,    0,    0,    0,    0, 8633, 8650, 8667,
     8684, 8701, 8718, 8735, 8752, 8769, 8786, 7634, 8803, 8820,
     7395, 8361, 8871, 7565, 7567, 8872, 8873, 8875, 7589, 8356,
     8357, 8359, 8876, 7613, 8894, 8360, 8877, 8885, 8878, 8888,
     8879, 8886, 8891, 8898, 8895, 8893, 8910, 8920, 8924, 8925,
     8928, 8929, 8930, 8931, 8932, 8933, 8935, 8940, 8942, 8941,
     8936, 8962, 8967, 8971, 8973, 9011, 8974, 8977, 8978, 8979,
     8982, 8984, 8980, 9009, 8994, 8996, 9017, 9015, 8985, 9018,
     9023, 9044, 9054, 9027, 9029, 9030, 9038, 9033, 9028, 9053,

     9050, 9035, 9065, 9068, 9052, 9067, 9069, 9075, 9070, 9071,
     9073, 9074, 9077,  194, 9072,  144, 9089, 9106, 9123, 9140,
     9157, 9174, 9191,    0,    0,    0,    0,    0, 9208, 9225,
        0,  186, 9242,  113, 9259, 9276, 9293, 9310, 9327, 9344,
     9361, 8082, 9442, 9450, 9458, 9466, 9474, 9482, 9490,    0,
        0,    0,    0,    0, 9434, 9451,    0,    0,    0,    0,
        0,    0, 9468, 9485,    0, 9536, 9537, 9546, 9541, 9550,
        0,    0,    0,    0,    0,    0,    0, 9545, 9562, 9579,
     9596, 9613, 9630, 9647, 9664, 9681, 9698, 7661, 9715, 9732,
        0,    0,    0,    0,    0, 9749, 9766, 9540, 9542, 9543,

     9548, 9549, 9544, 9817, 9818, 9819, 9820, 9830, 9824, 9826,
     9825, 9829, 9827, 9832, 9833, 9834, 9836, 9838, 9841, 9843,
     9842, 9865, 9868, 9844, 9873, 9859, 9874, 9875, 9877, 9878,
     9882, 9883, 9886, 9884, 9885,10667,10667,10667, 9889, 9890,
     9892, 9915, 9894, 9900, 9907, 9916, 9921, 9923, 9932, 9929,
     9948, 9934, 9961, 9937, 9936, 9940, 9941, 9939, 9945, 9950,
     9954, 9972, 9956, 9959, 9947, 9977, 9980, 9958, 9981,10667,
        0, 9976, 9993,10010,    0,10667,    0,10027,10044,10061,
        0,    0,10126,10127,10114,    0,    0,    0,    0,    0,
    10122,10139,    0,10115,10116,10117,10118,10119,10122,10123,

    10204,10125,10121,10191,10192,10193,10195,10194,10200,10201,
    10207,10199,10206,10198,10209,10208,10210,10217,10239,10240,
    10218,10241,10244,10247,10248,10250,10252,10253,10254,10260,
    10258,10262,10261,10255,10273,10284,10257,10291,10264,10295,
    10302,    0,10298,10299,10303,10277,10300,10304,10308,10310,
    10313,10333,10315,10335,10329,10337,10325,10320,10347,10349,
    10350,10351,10352,10354,10355,10360,10358,10356,10366,10368,
    10370,10371,10374,10376,10395,10385,10408,10387,10389,10391,
    10403,10405,10393,10397,10407,10411,10410,10432,10412,10414,
    10420,10422,10424,10427,10430,10434,10443,10444,10445,10461,

    10446,10456,10457,10459,10449,10463,10464,10465,10467,10468,
    10486,10476,10479,10482,10478,10483,10499,10494,10498,10500,
    10501,10509,10502,10503,10667,10588,10594,10597,10605,10608,
    10614,10617,  142,10622,10630,10636,10639,10644,10650,10656,
    10660
    } ;

static yyconst flex_int16_t yy_def[1242] =
    {   0,
     1225,    1, 1225, 1225, 1225, 1225, 1226, 1227, 1228, 1225,
     1229, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1230, 1231, 1225, 1225, 1232, 1233, 1225,   27,   27,   27,
       27,   27,   27, 1225, 1225, 1225,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1226,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1227, 1225, 1225, 1225, 1225, 1225, 1225, 1225,

     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1229, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1231,  168, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,

     1225, 1233,   27,   27, 1230,   27,   27, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,   27,   27,
       27,   27,   27,   27,   27, 1225, 1225, 1225, 1234,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

     1225,   27,   27,   27,   27,   27,   27,   27, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1235, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225,  104,  104, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225,  104,  104,  104,  104,  104,  104,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1236, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,

     1225, 1225, 1225, 1225, 1225,  148,  148,  148, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,  148,
      148,  148,  148,  148,  148, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225,  182,  182, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
      182,  182,  182,  182,  182,  182, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1237,

       27,   27,   27,   27,   27,   27,   27,   27, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225,   27,   27,   27,   27,   27,   27,   27, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27, 1225, 1225, 1235,  639,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1238, 1225, 1225, 1225, 1239, 1225, 1225, 1225,  104,
      104,  104,  104,  104,  104,  104, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,  104,
      104,  104,  104,  104, 1225, 1225, 1236,  687, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1240,

     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225,  148,  148,  148,
      148,  148,  148,  148, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225,  148,  148,  148,
      148,  148, 1225, 1225, 1241, 1225, 1225, 1225,  182,  182,
      182,  182,  182,  182,  182, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,  182,  182,
      182,  182,  182, 1225, 1225, 1237,   27,   27,   27,   27,
       27, 1225, 1225,   27,   27,   27,   27,  529,  529,  529,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,

     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225,  529,  529,  529,  529,  529,  529, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,  639, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225,  104,  104,  104,  104,  104, 1225, 1225,
      104,  687, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,  148,
      148,  148,  148,  148, 1225, 1225,  148,  182,  182,  182,
      182,  182, 1225, 1225,  182,   27,   27,   27,   27,   27,
      529,  529,  529,  529,  529,  529,  529, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
      529,  529,  529,  529,  529, 1225, 1225,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1225, 1225, 1225,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27, 1225,
      639, 1225, 1225, 1225,  104, 1225,  687, 1225, 1225, 1225,
      148,  182,   27,   27,   27,  529,  529,  529,  529,  529,
     1225, 1225,  529,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,  529,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,    0, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225
    } ;

static yyconst flex_uint16_t yy_nxt[10787] =
    {   0,
        4,    5,    5,    5,    5,    6,    7,    8,    9,    4,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   20,   20,   20,   20,   20,   20,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   28,   31,
       28,   28,   32,   28,   28,   28,   28,   33,   28,   28,
       28,   28,   34,    4,    4,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   28,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   28,   28,
       28,   57,   28,   58,    4,   59,   60,   61,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   62,   63,   63,

       64,    4,    4,   65,   66,    4,   67,   68,   69,   70,
       71,   72,   73,   74,    4,   75,   76,   77,    4,   78,
       78,   78,   78,   81,  138,  138,  138,  138,  236,  236,
      236,  236,  318,  318,  319,  140,  139,  141,  141,  141,
      141,  141,  141,  141,  141,  142,  202,  143,  143,  143,
      143,  143,  143,  143,  143,  144,  144,  144,  144,  144,
      144,  144,  144,  206,  231,  206,  206,  687,  206,  145,
       82,  146,  146,  146,  146,  146,  146,  146,  146,  229,
      230,  237,  240,  206,  241,  206,  206,  262,  206,  147,
      206,  206,  242,  206,  206,  244,  206, 1076,  639,  243,

     1070,  245,  788,  500,  267,  230,  229,   83,  246,  247,
      261,  206,  147,  206,  206,  206,  206,   84,  206,   85,
       85,   85,   85,   85,   85,   86,   87,   87,   87,   87,
       88,   89,   89,   90,   91,   92,   94,  277,  932,  278,
      308,  308,  308,  206,  308,  914,   95,  458,   96,   96,
       96,   96,   96,   96,   97,   98,   98,   98,   98,   99,
      100,  100,  101,  102,  103,  105,  106,  107,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  108,  109,  109,
      110,  206,  168,  111,  112,  406,  113,  114,  115,  116,
      117,  118,  119,  120,  232,  121,  122,  123,  126,  234,

      233,  256,  229,  230,  380,  380,  381,  206,  206,  206,
      206,  257,  125,  206,  235,  206,  206,  232,  300,  248,
      252,  206,  234,  258,  253,  233,  249,  206,  254,  250,
      342,  259,  251,   93,  260,  206,  206,  255,  206,  263,
      127,  206,  235,  206,  206,  206,  206,  264,  281,  206,
      206,  265,  266,  275,  524,  206,  206,  268,  206,  269,
      206,  270,   80,  279,  203,  282,  500,  276,  385,  283,
      323,  271,  301,  206,  206,  239,  238,  128,  206,  284,
      280,  370,  370,  370,  206,  370,  206,  129,  206,  130,
      130,  130,  130,  130,  130,  131,  132,  132,  132,  132,

      133,  134,  134,  135,  136,  137,  149,  150,  151,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  152,  153,
      153,  154,  206,  525,  155,  156,  181,  157,  158,  159,
      160,  161,  162,  163,  164,  232,  165,  166,  167,  169,
      170,  233,  124,   79,  234,   78,   78,   78,   78,  206,
      206,  206,  525,  435,  435,  435,  292,  435,  232,  235,
      206,  272, 1225, 1225,  293, 1225,  273,  285,  445,  445,
      446,  286,  274,  294,  287,  288,  206,  206,  289,  206,
     1225,  295,  496,  496,  497,  296,  290,  291,  206,  309,
      309,  309,  309,  309,  309,  309,  297, 1225, 1225,  171,

      298, 1225, 1225,  299,  206, 1225,  486,  486,  486,  172,
      486,  173,  173,  173,  173,  173,  173,  174,  175,  175,
      175,  175,  176,  177,  177,  178,  179,  180,  183,  184,
      185,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      186,  187,  187,  188, 1225, 1225,  189,  190,  206,  191,
      192,  193,  194,  195,  196,  197,  198, 1225,  199,  200,
      201,  203,  204,  559,  203,  203,  203,  203,  203,  203,
      203,  203,  205,  518,  518,  519,  206, 1225,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  207,  206,  676,  676,  677,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  207,  206,  206,  206,  206,  206, 1225,  208,
      209,  210,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  212,  213,  213,  214, 1225,  215,  216,  217, 1225,
      218,  219,  220,  221,  222,  223,  224,  225, 1225,  226,
      227,  228,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,

      303,  303,  303,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  304,  304,  304,  304,  304,  304,  304,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  305,
      305,  305,  302,  302,  307,  307,  307,  307,  307,  307,
      307,  307, 1225,  307,  307,  307,  307, 1225,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  308,  308,

      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  311,  312,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  314,  314,  314,  314,  313,  315,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  320,  320,  320,  320,  320,  320,  320,

      320,  320,  320,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      322,   80,  734,  734,  735, 1225,   80,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  326,  326,
      326,  326,  326,  326,  326, 1225, 1225,   82,   80,  765,
      765,  766, 1225,   80,  522,  206, 1225,   80,  332,  332,
      332,  332,  332,  332,  523,   80, 1225,  206, 1225,   80,
     1225,   80,  328,  328,  328,  328,  328,  328,  328,  328,

      328,  328,  522,  206,   83,  335,  335,  335,  335,  335,
      335,  335,  523, 1225,   84,  206,   85,   85,   85,   85,
       85,   85,   86,   87,   87,   87,   87,   88,   89,   89,
       90,   91,   92,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  331,  331,  331,  331,  331,  331,

      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,   94,  341,  341,  341,  341,  341,  341,  817,  817,
      817,   95,  817,   96,   96,   96,   96,   96,   96,   97,
       98,   98,   98,   98,   99,  100,  100,  101,  102,  103,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,

      336,  336,  336,  336,  336,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  342,
      342,  342,  342,  342,  342,  342,  342,  394,  394,  394,
      394,  394,  394,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  236,  236,  236,  236,  343,  343,  343,  343,  343,

      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343, 1225, 1225,  344,  345,  346,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  348,  349,  349,  350,
     1225,  351,  352,  353,  237,  354,  355,  356,  357,  358,
      359,  360,  361, 1225,  362,  363,  364,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  367,  367,
      367,  367,  367,  367,  367,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  368,  368,  368,  365,  365,  104,
      104,  104,  104,  104,  104,  104,  104, 1225,  104,  104,
      104,  104, 1225,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      371,  371,  371,  371,  371,  371,  371,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  373,  374,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  376,  376,  376,  376,
      375,  377,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  382,  382,  382,  382,  382,

      382,  382,  382,  382,  382,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  384,  125,  827,  827,  828, 1225,  125,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      138,  138,  138,  138,  127,  636,  636,  636,  636,  636,
      125, 1225,  139, 1225, 1225,  125,  987,  987,  988,  125,
      388,  388,  388,  388,  388,  388,  388,  125, 1225, 1225,
     1225,  125, 1225,  125,  436,  436,  436,  436,  436,  436,

      436,  128,  395,  395,  395,  395,  395,  395,  395,  395,
     1225,  129, 1225,  130,  130,  130,  130,  130,  130,  131,
      132,  132,  132,  132,  133,  134,  134,  135,  136,  137,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  396, 1225,
      141,  141,  141,  141,  141,  141,  141,  141,  398,  398,
      398,  398,  398,  398,  398,  398,  206,  399,  397,  143,
      143,  143,  143,  143,  143,  143,  143,  144,  144,  144,
      144,  144,  144,  144,  144,  526, 1225,  400,  206,  206,
     1225,  397,  206,  558,  206,  401,  402,  402,  402,  402,
      402,  402,  402,  402,  457,  457,  457,  457,  457,  457,
      400,  556,  526,  549,  403, 1225,  206,  206,  401,  145,
      206,  146,  146,  146,  146,  146,  146,  146,  146,  451,

      451,  451,  451,  451,  451,  451,  404,  403,  404,  147,
     1225,  405,  405,  405,  405,  405,  405,  405,  405,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444, 1225,
     1225, 1225,  147,  406,  407, 1225,  406,  406,  406,  406,
      406,  406,  406,  406,  684,  684,  684,  684,  684, 1225,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408, 1225, 1225,
     1225,  206,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  206,

     1225,  409,  410,  411,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  413,  414,  414,  415, 1225,  416,  417,
      418, 1225,  419,  420,  421,  422,  423,  424,  425,  426,
     1225,  427,  428,  429,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  432,  432,  432,  432,  432,
      432,  432,  430,  430,  430,  430,  430,  430,  430,  430,

      430,  430,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  433,  433,  433,  430,  430,  148,  148,  148,  148,
      148,  148,  148,  148, 1225,  148,  148,  148,  148, 1225,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,

      437,  437,  437,  437,  438,  439,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  441,  441,  441,  441,
      440,  442,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  170,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  450,

      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  171,  487,  487,  487,  487,  487,  487,  487, 1225,
     1225,  172, 1225,  173,  173,  173,  173,  173,  173,  174,
      175,  175,  175,  175,  176,  177,  177,  178,  179,  180,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,

      454,  454,  454,  454,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  458,  458,  458,  458,  458,  458,  458,  458, 1225,
     1225,  594, 1225, 1225, 1225,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459, 1225, 1225, 1225,  206,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  206, 1225,  460,  461,  462,  463,

      463,  463,  463,  463,  463,  463,  463,  463,  464,  465,
      465,  466, 1225,  467,  468,  469, 1225,  470,  471,  472,
      473,  474,  475,  476,  477, 1225,  478,  479,  480,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      483,  483,  483,  483,  483,  483,  483,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  484,  484,  484,

      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  484,  484,  484,  481,
      481,  182,  182,  182,  182,  182,  182,  182,  182, 1225,
      182,  182,  182,  182, 1225,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  489,

      490,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  492,  492,  492,  492,  491,  493,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  149,  150,  151,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  152,

      153,  153,  154,  206, 1225,  155,  156, 1225,  157,  158,
      159,  160,  161,  162,  163,  164,  501,  165,  166,  167,
      509,  509,  509,  509,  509,  509,  509,  206,  555, 1225,
     1225,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      501,  206,  206,  206,  206, 1225,  206,  206,  206,  742,
      742,  742,  742,  742, 1225,  206,  502,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  503,  503,  503,

      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  505,  505,  505,  505,  505,  505,
      505,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      506,  506,  506,  503,  503,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  203,  203,  203,  203,  203,  203,  203,  203,

      203,  203,  203,  203,  508,  508,  508, 1225,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  511,  512,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  514,  514,  514,  514,  513,
      515,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  517,  517,  517,  517,  517,  517,

      517,  517,  517,  517,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  527,  528,  206,  206,  206,  206,  206,  206,  206,
      206, 1225, 1225,  550, 1225,  553, 1225, 1225,  560,  564,
     1225, 1225,  551,  554, 1225, 1225,  557, 1225,  527,  528,
      552,  206,  206,  206,  206,  206,  206,  206,  206,  530,
      531,  532,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  533,  534,  534,  535,  206,  523,  536,  537,  206,
      538,  539,  540,  541,  542,  543,  544,  545, 1225,  546,

      547,  548,  522,  206,  206, 1225,  206,  206,  206,  206,
      561,  565, 1225,  206,  570,  206,  566,  206,  572, 1225,
      567, 1225,  576,  562,  206,  563,  568,  571,  578,  206,
      522,  206,  206,  569,  206,  206,  206,  206,  206,  573,
      206,  206,  581,  206, 1225,  579,  574,  577, 1225,  206,
      575,  206,  206,  206, 1225,  206,  583,  206, 1225,  580,
      591, 1225,  206,  584,  589,  582,  206,  206,  206,  206,
      585,  590,  206,  586,  592,  587,  206,  206,  206,  206,
      526,  206,  588,  206,  206,  593,  596,  206,  206,  206,
      206,  599,  206,  602,  206,  206,  597, 1225,  603,  206,

      206,  607, 1225,  206,  598, 1225,  206,  595,  206,  608,
      600,  206,  206,  601,  605,  206,  206,  206,  604,  206,
      206,  206,  206,  206,  606,  527,  612,  206,  206,  609,
      614,  206,  610,  206,  206,  618,  206, 1225,  206,  206,
      206,  619,  206,  615,  616,  617,  206,  611,  623,  206,
      206,  206,  613,  620, 1225,  528,  206,  625,  621, 1225,
      206,  206,  206,  206,  206,  624,  206,  627,  206,  626,
      206,  622,  206,  206,  206,  206,  206,  206,  206,  628,
      631,  206,  528,  206,  206, 1225, 1225,  629,  206, 1225,
      630,  206,  206,  667,  667,  667,  667,  667,  667,  667,

      206,  206, 1225,  206,  206,  206, 1225, 1225, 1225,  206,
     1225,  206,  206,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  302,  302,  302,
      302,  302,  303,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  303,  303,  303,  303,
      303,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  633,  633,

      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  302,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,

      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  640,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675, 1225, 1225,  641,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80, 1225,

     1225,  642,  405,  405,  405,  405,  405,  405,  405,  405,
     1225,  643, 1225,  644,  644,  644,  644,  644,  644,  645,
      646,  646,  646,  646,  647,  648,  648,  649,  650,  651,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  334,  334,

      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,

      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  660,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,

      661,  661,  663,  663,  663,  663,  663,  663,  663,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  664,  664,
      664,  661,  661,  343,  343,  343,  343,  343,  343,  343,
      343, 1225,  343,  343,  343,  343, 1225,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  666,

      666,  666, 1225,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  669,  670,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      672,  672,  672,  672,  671,  673,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      365,  365,  365,  365,  365,  366,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  366,
      366,  366,  366,  366,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  365,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,

      685,  685,  685,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      688,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  725,  725,  725,  725,  725,
      725,  725,  689,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125, 1225, 1225,  690,

      405,  405,  405,  405,  405,  405,  405,  405, 1225,  691,
     1225,  692,  692,  692,  692,  692,  692,  693,  694,  694,
      694,  694,  695,  696,  696,  697,  698,  699,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  395,  395,  395,  395,

      395,  395,  395,  395,  705,  705,  705,  705,  705,  705,
      705,  705, 1225, 1225,  704, 1225, 1225, 1225,  707, 1225,
      707, 1225,  706,  708,  708,  708,  708,  708,  708,  708,
      708,  773,  773,  773,  773,  773, 1225,  704,  756,  756,
      756,  756,  756,  756,  756,  706,  398,  398,  398,  398,
      398,  398,  398,  398,  710,  710,  710,  710,  710,  710,
      710,  710,  206, 1225,  709, 1225,  206, 1225,  712, 1225,
      712, 1225,  711,  713,  713,  713,  713,  713,  713,  713,
      713, 1225, 1225, 1225,  206,  206,  206,  709,  206,  206,
      206,  714, 1225,  714,  206,  711,  715,  715,  715,  715,

      715,  715,  715,  715,  402,  402,  402,  402,  402,  402,
      402,  402,  206,  206,  206,  206,  206,  206,  716, 1225,
      716, 1225,  403,  717,  717,  717,  717,  717,  717,  717,
      717,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733, 1225, 1225,  206, 1225,  403,  718,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,

      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  721,  721,  721,  721,  721,  721,
      721,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      722,  722,  722,  719,  719,  408,  408,  408,  408,  408,
      408,  408,  408, 1225,  408,  408,  408,  408, 1225,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  406,

      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  724,  724,  724, 1225,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      727,  728,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  730,  730,  730,  730,  729,  731,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,

      732,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  430,  430,  430,  430,  430,  431,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  431,  431,  431,  431,  431,  430,  430,  430,  430,

      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      430,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  743,  743,

      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,

      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  749,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  752,  752,  752,  752,
      752,  752,  752,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  753,  753,  753,  750,  750,  459,  459,  459,
      459,  459,  459,  459,  459, 1225,  459,  459,  459,  459,

     1225,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  755,  755,  755, 1225,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  758,  759,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  761,  761,  761,  761,  760,  762,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,

      760,  760,  760,  760,  760,  760,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  481,  481,  481,  481,  481,  482,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  482,  482,  482,  482,  482,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  481,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  503,  503,

      503,  503,  503,  504,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  502,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  504,  504,  504,
      504,  504,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  503,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,

      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  781,  781,  781,  781,  781,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  784,  785,  206,  206,  786,  206,  206,
      206, 1225,  787,  206,  206,  206,  206,  206,  818,  818,
      818,  818,  818,  818,  818, 1225, 1225, 1225, 1225,  206,

      784,  206,  785,  206,  206, 1225,  206,  206,  206,  787,
     1225,  206,  206,  206,  206,  206,  788,  789, 1225,  788,
      788,  788,  788,  788,  788,  788,  788,  206, 1225,  206,
     1225, 1225, 1225,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790, 1225, 1225, 1225,  206,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  206, 1225,  791,  792,  793,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  795,  796,  796,  797,

     1225,  798,  799,  800, 1225,  801,  802,  803,  804,  805,
      806,  807,  808, 1225,  809,  810,  811,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  814,  814,
      814,  814,  814,  814,  814,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,

      815,  815,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  815,  815,  815,  812,  812,  529,
      529,  529,  529,  529,  529,  529,  529, 1225,  529,  529,
      529,  529, 1225,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  820,  821,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  823,

      823,  823,  823,  822,  824,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  206,  206,  206,  206,  206,
      206,  206,  206, 1225,  206,  206,  831,  832,  835,  206,
      206,  785,  206,  206,  837,  206,  840,  834,  833,  841,

      836,  843,  842,  206,  206,  206,  206,  206,  206,  206,
      206,  838,  206,  206,  206,  839,  206,  206,  206,  845,
      206,  206,  206,  206,  206,  844,  206,  206,  206, 1225,
      206,  206, 1225,  206, 1225, 1225,  846,  850,  206,  206,
      206,  857,  206,  847,  206,  206,  206,  206,  206,  848,
      206,  849,  206,  851,  206,  206,  206,  852,  206,  206,
      853,  206,  854,  860,  858,  855,  206,  206,  206,  856,
      206,  859,  206,  206,  206,  206,  206,  206,  206,  206,
     1225,  206,  206,  206, 1225,  206,  206, 1225, 1225,  206,
      864,  867,  206,  206, 1225, 1225,  862,  861,  206,  863,

      206,  869,  206,  865,  871,  206,  206,  206,  866,  206,
      206,  206,  868,  206,  206,  870,  206,  206,  206,  206,
      206,  206,  206,  873,  206,  206,  206,  872,  206,  206,
      206,  877,  206,  874,  206,  875,  876,  882,  879,  880,
      206,  878,  206,  206,  206,  883,  206,  206,  206,  887,
      206,  206,  206,  206,  206, 1225,  206,  206,  206,  881,
      206,  787,  206,  884,  206,  206,  206,  888,  206,  886,
      206,  206, 1225,  206,  895,  894,  206,  885, 1225,  889,
      890,  891,  892,  903,  893,  206,  206,  206,  787,  206,
      206,  904,  206,  206,  206,  206,  896,  897,  905,  898,

      899,  206,  206,  206,  206,  206,  907,  900,  206,  206,
      908,  206,  906,  206,  901,  206,  902,  206,  206,  206,
      206,  911,  206,  206,  909, 1225, 1225, 1225,  912,  910,
      206,  206,  206,  206, 1225, 1225,  206,  206, 1225,  206,
      639, 1225, 1225, 1225, 1225,  639, 1225,  206,  206, 1225,
      206,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  640, 1225,  639, 1225, 1225,
     1225, 1225,  639, 1225, 1225, 1225,  639,  917,  917,  917,

      917,  917,  917,  917,  639, 1225, 1225, 1225,  639, 1225,
      639,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  928,  928,  928,
      928,  928,  641,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639, 1225, 1225, 1225, 1225,  642,
      923,  923,  923,  923,  923,  923, 1225, 1225, 1225,  643,
     1225,  644,  644,  644,  644,  644,  644,  645,  646,  646,
      646,  646,  647,  648,  648,  649,  650,  651,  918,  918,

      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  322,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   80,   80,   80,  935,  935,  935,  935,  935,  935,
      935,  954,  954,  954,  954,  954,   82,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93, 1225, 1225,   83,  941,  941,  941,  941,  941,  941,
     1225, 1225, 1225,   84, 1225,   85,   85,   85,   85,   85,
       85,   86,   87,   87,   87,   87,   88,   89,   89,   90,
       91,   92,   94,  708,  708,  708,  708,  708,  708,  708,
      708, 1225,   95, 1225,   96,   96,   96,   96,   96,   96,

       97,   98,   98,   98,   98,   99,  100,  100,  101,  102,
      103,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  661,
      661,  661,  661,  661,  662,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  660,  661,  661,  661,  661,

      661,  661,  661,  661,  661,  661,  661,  661,  662,  662,
      662,  662,  662,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  661,  926,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  926,
      926,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  927,  927,

      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  688,  687, 1225, 1225, 1225, 1225,  687,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,

      933,  933,  933,  933,  933,  933,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  206,  206,  206, 1225,  689,  962,  962,  962,  962,
      962,  687, 1225,  206, 1225, 1225,  687, 1225, 1225, 1225,
      687, 1225, 1225,  206, 1225,  206, 1225, 1225,  687,  206,
      206,  206,  687, 1225,  687, 1225, 1225, 1225,  942, 1225,
      942,  206,  690,  943,  943,  943,  943,  943,  943,  943,
      943,  206,  691,  206,  692,  692,  692,  692,  692,  692,
      693,  694,  694,  694,  694,  695,  696,  696,  697,  698,
      699,  687,  687,  687,  687,  687,  687,  687,  687,  687,

      687,  687,  687,  687,  687,  687,  687,  687,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  384,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  967,  206,  206,  206, 1225, 1225,
     1225,  127,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  206,
     1225, 1000,  967,  206,  206,  206,  705,  705,  705,  705,
      705,  705,  705,  705, 1225, 1225,  969, 1225,  128, 1225,
     1225,  206, 1225,  206,  706, 1225, 1225,  206,  129, 1225,
      130,  130,  130,  130,  130,  130,  131,  132,  132,  132,
      132,  133,  134,  134,  135,  136,  137,  706,  944,  206,
      944,  206, 1225,  945,  945,  945,  945,  945,  945,  945,

      945,  708,  708,  708,  708,  708,  708,  708,  708,  946,
     1225,  946, 1225, 1225,  947,  947,  947,  947,  947,  947,
      947,  947,  710,  710,  710,  710,  710,  710,  710,  710,
      995,  995,  995,  995,  995, 1225,  948, 1225,  948, 1225,
      711,  949,  949,  949,  949,  949,  949,  949,  949,  713,
      713,  713,  713,  713,  713,  713,  713, 1090, 1090, 1090,
     1090, 1090, 1225,  711,  713,  713,  713,  713,  713,  713,
      713,  713,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,

      717,  717,  717,  717,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  719,  719,
      719,  719,  719,  720,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  718,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  720,  720,  720,
      720,  720,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,

      951,  951,  951,  951,  951,  951,  719,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  956,  956,  956,  956,  956,  956,  956,  956,  956,

      956,  956,  956,  956,  956,  956,  956,  956,  957,  957,
      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,
      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,
      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,
      957,  957,  170,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  978,  978,  978,  978,  978,  978,

      978,  171,  943,  943,  943,  943,  943,  943,  943,  943,
     1225,  172, 1225,  173,  173,  173,  173,  173,  173,  174,
      175,  175,  175,  175,  176,  177,  177,  178,  179,  180,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  750,  750,  750,  750,  750,  751,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      749,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  751,  751,  751,  751,  751,  750,  750,

      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  750,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  961,  961,  961,  961,  961,  961,  961,
      961,  961,  961,  961,  961,  961,  961,  961,  961,  961,

      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,

      966,  966,  968, 1225,  970, 1225,  206,  206, 1225,  206,
      206,  206,  206,  206,  790,  790,  790,  790,  790,  790,
      790,  790,  998,  790,  790,  790,  790,  968,  790,  790,
      790,  970, 1004, 1005,  206,  206, 1006,  206,  206,  206,
      206,  206,  971,  972,  972,  972,  972,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  972,  972,  972,  972,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  972,

      972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
      974,  974,  974,  974,  974,  974,  974,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  976,  975,  975,  975,  972,
      972,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      977,  977,  977, 1225,  977,  977,  977,  977,  977,  977,

      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  980,
      981,  982,  982,  982,  982,  982,  982,  982,  982,  982,
      982,  983,  983,  983,  983,  982,  984,  982,  982,  982,
      982,  982,  982,  982,  982,  982,  982,  982,  982,  982,
      982,  982,  982,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  812,  812,  812,  812,  812,  813,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      813,  813,  813,  813,  813,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,

      812,  812,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  812,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,

      996,  996,  996,  996,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  206,  206,  206, 1225,  206,  206,  206,  206,  206,
     1002,  999, 1003, 1001,  968,  206,  206, 1009,  206, 1225,
     1013,  206, 1225,  206,  206,  206, 1011, 1014,  206,  206,
      206,  206, 1007,  206,  206,  206,  206,  206, 1012, 1008,
      206, 1010, 1016,  206,  206, 1015,  206, 1017, 1018,  206,
      206,  206,  206,  206,  206,  206,  206, 1020,  206,  206,
      206,  206,  206,  206, 1019,  206,  206, 1225,  206, 1021,
      206,  206,  206, 1026, 1024, 1225, 1225, 1023,  206, 1027,

     1025, 1022,  206,  206, 1030, 1031,  206,  206,  206,  206,
      206,  206,  206,  206,  206, 1028, 1029,  206,  206,  206,
      206,  206, 1032,  206,  206, 1036, 1037,  206,  206,  206,
      206, 1225,  206, 1225,  206,  206, 1225, 1033, 1040, 1039,
      206, 1042, 1034, 1038,  206,  206,  206, 1035, 1051,  206,
     1050,  206,  206, 1041, 1044,  206,  206,  206,  206,  206,
      206,  206,  206,  206, 1043,  206, 1047,  206,  206, 1045,
     1046, 1052,  206,  206,  206, 1053, 1049,  206,  206,  206,
      206, 1225, 1225,  206, 1225,  206, 1225,  206,  206,  206,
     1055, 1048, 1056,  206,  206,  206,  206, 1054, 1059, 1057,

      206,  206,  206,  206,  206,  206,  206,  206,  206, 1058,
     1060,  206, 1063,  206, 1061,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206, 1062,  206,  206, 1065,
      206,  206,  206, 1225, 1066, 1067, 1068, 1225, 1225, 1225,
     1069, 1064, 1225,  206, 1225,  206,  206,  206,  206,  206,
     1225,  206,  206,  206, 1225,  206,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,

     1071, 1071, 1071, 1071, 1071, 1071, 1071,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,

     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,

      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080,  943,  943,  943,  943,  943,  943,  943,  943,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,

      947,  947,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082,  206,  206, 1085, 1083,
      206,  206,  206,  206,  206, 1225,  206, 1084,  206,  206,

      206, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1096,
     1225, 1085, 1225, 1225,  206,  206, 1083, 1225,  206,  206,
      206,  206,  206, 1094,  206, 1095,  206,  206,  206,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086,  972,  972,  972,  972,  972,  973,  972,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  971,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
      972,  972,  973,  973,  973,  973,  973,  972,  972,  972,

      972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
      972,  972,  972,  972, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1087,  972, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088,  972,  972,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
      972,  972, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1091,

     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093,  206,  206,  206,
      206, 1225, 1225, 1083,  206,  206,  206,  206, 1097,  206,
      206, 1100,  206,  206,  206, 1102,  206, 1099,  206, 1105,
     1104,  206,  206,  206,  206,  206,  206,  206,  206, 1098,

     1101, 1103,  206,  206,  206,  206, 1106,  206,  206,  206,
      206,  206,  206, 1108,  206,  206,  206, 1107,  206,  206,
      206,  206,  206,  206,  206,  206, 1109,  206,  206, 1110,
     1111, 1225,  206,  206,  206,  206,  206,  206, 1113,  206,
      206, 1225,  206,  206,  206, 1112,  206, 1115, 1225, 1118,
      206,  206,  206,  206, 1116,  206,  206,  206, 1127, 1114,
      206,  206,  206,  206,  206,  206,  206,  206,  206, 1117,
      206,  206,  206,  206, 1126, 1120, 1119, 1121,  206,  206,
     1123, 1122,  206, 1128,  206,  206,  206,  206, 1125,  206,
      206,  206, 1225,  206,  206,  206, 1225,  206,  206,  206,

      206,  206, 1124, 1131,  206, 1132,  206,  206,  206,  206,
      206,  206,  206, 1129,  206,  206, 1130,  206,  206,  206,
     1133, 1136,  206,  206, 1134,  206,  206,  206,  206, 1135,
      206,  206,  206, 1137,  206, 1225,  206,  206, 1225,  206,
     1225, 1139, 1225, 1225, 1225, 1225, 1225, 1225, 1138, 1225,
      206, 1225, 1225, 1225, 1225,  206, 1225, 1225,  206,  206,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  916,  916,  916,  916,  916,  916,

      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934, 1140, 1141,  206,  206,  206,  206,  206,  206,
     1225,  206,  206,  206, 1143,  206,  206,  206, 1225, 1225,
     1225, 1150, 1225, 1147, 1225, 1140, 1225, 1144, 1225, 1225,
     1225, 1145,  206,  206,  206,  206,  206,  206, 1146,  206,

      206,  206, 1148,  206,  206,  206, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1140,  206,  206,  206,  206,  206, 1225, 1225,  206,  206,
      206,  206, 1225, 1225,  206, 1152,  206,  206,  206,  206,
      206, 1153, 1225, 1149, 1157, 1160, 1151,  206,  206,  206,
      206,  206,  206,  206, 1154, 1155,  206,  206,  206,  206,
     1159, 1158,  206, 1156,  206,  206,  206,  206,  206,  206,
      206,  206, 1164, 1161,  206,  206,  206,  206,  206, 1162,

      206, 1163,  206,  206,  206,  206, 1167,  206,  206, 1168,
      206,  206,  206, 1225,  206, 1225, 1165,  206,  206,  206,
     1166, 1169,  206,  206, 1172,  206,  206,  206,  206, 1170,
      206,  206,  206,  206,  206,  206,  206, 1171,  206,  206,
      206,  206,  206, 1176, 1174,  206, 1177, 1173,  206,  206,
      206,  206,  206,  206,  206,  206, 1176, 1181,  206, 1178,
      206, 1175,  206,  206, 1180,  206, 1225, 1225, 1182,  206,
      206, 1176, 1184,  206, 1179,  206,  206,  206,  206,  206,
      206,  206,  206,  206, 1183,  206,  206,  206,  206, 1185,
     1186,  206, 1187,  206, 1188, 1190, 1189,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206, 1191,
      206,  206, 1225,  206, 1225,  206,  206, 1192,  206, 1195,
      206,  206, 1225, 1193,  206,  206,  206,  206,  206,  206,
      206, 1194,  206,  206,  206,  206,  206,  206,  206,  206,
     1196,  206, 1197,  206,  206,  206,  206,  206,  206,  206,
     1198, 1200,  206,  206,  206,  206, 1199,  206,  206, 1225,
      206,  206,  206,  206,  206,  206, 1202,  206, 1203,  206,
      206,  206,  206,  206,  206,  206, 1207,  206, 1205, 1201,
      206,  206,  206,  206,  206,  206,  206, 1204,  206,  206,
      206, 1206,  206,  206,  206,  206,  206, 1211,  206,  206,

      206, 1208,  206, 1212, 1209,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206, 1215,  206,  206, 1210,
     1217,  206,  206,  206,  206, 1216,  206,  206,  206,  206,
     1213, 1214,  206,  206,  206,  206,  206,  206, 1219,  206,
     1218,  206,  206,  206,  206,  206,  206, 1221,  206,  206,
      206,  206,  206,  206,  206, 1225,  206,  206, 1220,  206,
      206,  206, 1225, 1225,  206, 1225, 1225, 1224, 1225, 1225,
     1225, 1225,  206, 1225, 1225, 1222,  206,  206,  206,  206,
      206,  206, 1225, 1223, 1225, 1225, 1225,  206,   80, 1225,
       80,   80,   80,   80,   93, 1225,   93,   93,   93,   93,

      104,  104,  104, 1225,  104,  125, 1225,  125,  125,  125,
      125,  148,  148,  148, 1225,  148,  168,  168,  168,  168,
      182,  182,  182, 1225,  182,  529,  529,  529, 1225,  529,
      639,  639,  639,  639,  639,  639,  687,  687,  687,  687,
      687,  687,  776,  776,   80, 1225,   80,   80,   80,   80,
       93, 1225,   93,   93,   93,   93,  125, 1225,  125,  125,
      125,  125,  168,  168,  168,  168,    3, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,

     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225
    } ;

static yyconst flex_int16_t yy_chk[10787] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    7,   12,   12,   12,   12,   34,   34,
       34,   34,   75,   75,   75,   15,   12,   15,   15,   15,
       15,   15,   15,   15,   15,   17, 1233,   17,   17,   17,
       17,   17,   17,   17,   17,   18,   18,   18,   18,   18,
       18,   18,   18,   28,   31,  203,   44,  934,   31,   20,
        7,   20,   20,   20,   20,   20,   20,   20,   20,   29,
       30,   34,   37,   46,   37,   29,   43,   44,   38,   20,
       30,   28,   37,  203,   44,   38,   31,  932,  916,   37,

      914,   38,  798,  776,   46,   30,   29,    7,   38,   38,
       43,   46,   20,   29,   43,   50,   38,    7,   30,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    8,   50,  688,   50,
       67,   67,   67,   50,   67,  640,    8,  467,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   41,  450,    9,    9,  416,    9,    9,    9,    9,
        9,    9,    9,    9,   32,    9,    9,    9,   11,   33,

       32,   41,   39,   40,  121,  121,  121,   57,   39,   41,
       32,   41,  387,   40,   33,   33,   42,   32,   57,   39,
       40,   52,   33,   42,   40,   32,   39,   45,   40,   39,
      351,   42,   39,  334,   42,   57,   39,   40,   32,   45,
       11,   40,   33,   33,   42,  206,   49,   45,   52,   52,
       47,   45,   45,   49,  231,   45,   51,   47,   53,   47,
      231,   47,  325,   51,  215,   53,  202,   49,  126,   53,
       81,   47,   58,  206,   49,   36,   35,   11,   47,   53,
       51,  113,  113,  113,   51,  113,   53,   11,  231,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,  232,  232,   21,   21,   24,   21,   21,   21,
       21,   21,   21,   21,   21,   48,   21,   21,   21,   22,
       22,   48,   10,    6,   54,   78,   78,   78,   78,   55,
      232,   48,  232,  157,  157,  157,   55,  157,   48,   54,
       54,   48,    3,    0,   55,    0,   48,   54,  165,  165,
      165,   54,   48,   55,   54,   54,   56,   55,   54,   48,
        0,   55,  199,  199,  199,   56,   54,   54,   54,   69,
       69,   69,   69,   69,   69,   69,   56,    0,    0,   22,

       56,    0,    0,   56,   56,    0,  191,  191,  191,   22,
      191,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,    0,    0,   25,   25,  248,   25,
       25,   25,   25,   25,   25,   25,   25,    0,   25,   25,
       25,   27,   27,  248,   27,   27,   27,   27,   27,   27,
       27,   27,   27,  226,  226,  226,  248,  204,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,  362,  362,  362,  204,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,  204,    0,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,    0,   27,   27,   27,    0,
       27,   27,   27,   27,   27,   27,   27,   27,    0,   27,
       27,   27,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   65,   65,   65,   65,   65,   65,
       65,   65,    0,   65,   65,   65,   65,    0,   65,   65,
       65,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       80,   82,  427,  427,  427,    0,   82,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   86,   86,
       86,   86,   86,   86,   86,    0,    0,   80,   82,  478,
      478,  478,    0,   82,  229,  229,    0,   82,   92,   92,
       92,   92,   92,   92,  230,   82,    0,  230,    0,   82,
        0,   82,   88,   88,   88,   88,   88,   88,   88,   88,

       88,   88,  229,  229,   80,   97,   97,   97,   97,   97,
       97,   97,  230,    0,   80,  230,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   91,   91,   91,   91,   91,   91,

       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   93,  103,  103,  103,  103,  103,  103,  538,  538,
      538,   93,  538,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  104,
      104,  104,  104,  104,  104,  104,  104,  137,  137,  137,
      137,  137,  137,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  236,  236,  236,  236,  104,  104,  104,  104,  104,

      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,    0,    0,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
        0,  104,  104,  104,  236,  104,  104,  104,  104,  104,
      104,  104,  104,    0,  104,  104,  104,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      107,  107,  107,  107,  107,  107,  107,  107,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  111,
      111,  111,  111,  111,  111,  111,  111,    0,  111,  111,
      111,  111,    0,  111,  111,  111,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  114,  114,  114,  114,  114,  114,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      115,  115,  115,  115,  115,  115,  115,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  122,  122,  122,  122,  122,

      122,  122,  122,  122,  122,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  125,  127,  546,  546,  546,    0,  127,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      138,  138,  138,  138,  125,  319,  319,  319,  319,  319,
      127,    0,  138,    0,    0,  127,  809,  809,  809,  127,
      131,  131,  131,  131,  131,  131,  131,  127,    0,    0,
        0,  127,    0,  127,  159,  159,  159,  159,  159,  159,

      159,  125,  140,  140,  140,  140,  140,  140,  140,  140,
        0,  125,    0,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  135,  135,  135,  135,  135,  135,  135,  135,  135,

      135,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  141,    0,
      141,  141,  141,  141,  141,  141,  141,  141,  142,  142,
      142,  142,  142,  142,  142,  142,  247,  143,  141,  143,
      143,  143,  143,  143,  143,  143,  143,  144,  144,  144,
      144,  144,  144,  144,  144,  233,    0,  143,  240,  245,
        0,  141,  233,  247,  247,  144,  145,  145,  145,  145,
      145,  145,  145,  145,  180,  180,  180,  180,  180,  180,
      143,  245,  233,  240,  145,    0,  240,  245,  144,  146,
      233,  146,  146,  146,  146,  146,  146,  146,  146,  174,

      174,  174,  174,  174,  174,  174,  147,  145,  147,  146,
        0,  147,  147,  147,  147,  147,  147,  147,  147,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,    0,
        0,    0,  146,  148,  148,    0,  148,  148,  148,  148,
      148,  148,  148,  148,  381,  381,  381,  381,  381,    0,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,    0,    0,
        0,  263,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  263,

        0,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,    0,  148,  148,
      148,    0,  148,  148,  148,  148,  148,  148,  148,  148,
        0,  148,  148,  148,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,

      152,  152,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  155,  155,  155,  155,
      155,  155,  155,  155,    0,  155,  155,  155,  155,    0,
      155,  155,  155,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,

      160,  160,  160,  160,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  168,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  168,  193,  193,  193,  193,  193,  193,  193,    0,
        0,  168,    0,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,

      177,  177,  177,  177,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  182,  182,  182,  182,  182,  182,  182,  182,    0,
        0,  272,    0,    0,    0,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,    0,    0,    0,  272,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  272,    0,  182,  182,  182,  182,

      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,    0,  182,  182,  182,    0,  182,  182,  182,
      182,  182,  182,  182,  182,    0,  182,  182,  182,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  187,  187,  187,

      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  189,  189,  189,  189,  189,  189,  189,  189,    0,
      189,  189,  189,  189,    0,  189,  189,  189,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  244,    0,  205,  205,    0,  205,  205,
      205,  205,  205,  205,  205,  205,  207,  205,  205,  205,
      220,  220,  220,  220,  220,  220,  220,  207,  244,    0,
        0,  244,  216,  216,  216,  216,  216,  216,  216,  216,
      207,  216,  216,  216,  216,    0,  216,  216,  216,  446,
      446,  446,  446,  446,    0,  207,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,

      210,  210,  210,  210,  210,  210,  210,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  218,  218,  218,  218,  218,  218,  218,  218,

      218,  218,  218,  218,  218,  218,  218,    0,  218,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  225,  225,  225,  225,  225,  225,

      225,  225,  225,  225,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  234,  235,  241,  242,  246,  243,  249,  251,  234,
      235,    0,    0,  241,    0,  243,    0,    0,  249,  251,
        0,    0,  242,  243,    0,    0,  246,    0,  234,  235,
      242,  241,  242,  246,  243,  249,  251,  234,  235,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  252,  254,  239,  239,  254,
      239,  239,  239,  239,  239,  239,  239,  239,    0,  239,

      239,  239,  250,  250,  258,    0,  255,  260,  253,  256,
      250,  252,    0,  252,  254,  262,  252,  254,  256,    0,
      253,    0,  258,  250,  257,  250,  253,  255,  260,  259,
      250,  250,  258,  253,  255,  260,  253,  256,  261,  257,
      264,  265,  262,  262,    0,  261,  257,  259,    0,  267,
      257,  268,  257,  269,    0,  266,  265,  259,    0,  261,
      269,    0,  270,  266,  267,  264,  261,  277,  264,  265,
      266,  268,  275,  266,  270,  266,  274,  267,  271,  268,
      273,  269,  266,  266,  276,  271,  274,  273,  278,  282,
      270,  275,  279,  277,  281,  277,  274,    0,  278,  284,

      275,  281,    0,  280,  274,    0,  271,  273,  295,  282,
      276,  302,  276,  276,  280,  273,  278,  282,  279,  283,
      279,  286,  281,  288,  280,  285,  284,  284,  287,  283,
      286,  280,  283,  285,  290,  287,  295,    0,  289,  302,
      292,  288,  294,  286,  286,  286,  293,  283,  292,  286,
      303,  288,  285,  289,    0,  291,  287,  294,  290,    0,
      296,  285,  290,  291,  297,  293,  289,  296,  292,  294,
      294,  291,  298,  300,  293,  299,  304,  305,  303,  297,
      300,  306,  291,  307,  308,    0,    0,  298,  296,    0,
      299,  291,  297,  356,  356,  356,  356,  356,  356,  356,

      298,  300,    0,  299,  304,  305,    0,    0,    0,  306,
        0,  307,  308,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,

      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  323,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,    0,    0,  323,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,    0,

        0,  323,  404,  404,  404,  404,  404,  404,  404,  404,
        0,  323,    0,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,

      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,

      347,  347,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  352,  352,  352,  352,  352,  352,  352,
      352,    0,  352,  352,  352,  352,    0,  352,  352,  352,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,

      354,  354,    0,  354,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  364,

      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,

      375,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,

      382,  382,  382,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      385,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  421,  421,  421,  421,  421,
      421,  421,  385,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,    0,    0,  385,

      405,  405,  405,  405,  405,  405,  405,  405,    0,  385,
        0,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  395,  395,  395,  395,

      395,  395,  395,  395,  396,  396,  396,  396,  396,  396,
      396,  396,    0,    0,  395,    0,    0,    0,  397,    0,
      397,    0,  396,  397,  397,  397,  397,  397,  397,  397,
      397,  497,  497,  497,  497,  497,    0,  395,  472,  472,
      472,  472,  472,  472,  472,  396,  398,  398,  398,  398,
      398,  398,  398,  398,  399,  399,  399,  399,  399,  399,
      399,  399,  501,    0,  398,    0,  502,    0,  400,    0,
      400,    0,  399,  400,  400,  400,  400,  400,  400,  400,
      400,    0,    0,    0,  503,  504,  505,  398,  506,  507,
      501,  401,    0,  401,  502,  399,  401,  401,  401,  401,

      401,  401,  401,  401,  402,  402,  402,  402,  402,  402,
      402,  402,  503,  504,  505,  508,  506,  507,  403,    0,
      403,    0,  402,  403,  403,  403,  403,  403,  403,  403,
      403,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,    0,    0,  508,    0,  402,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  412,  412,  412,

      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  417,  417,  417,  417,  417,
      417,  417,  417,    0,  417,  417,  417,  417,    0,  417,
      417,  417,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  419,

      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,    0,  419,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,

      425,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  440,  440,  440,  440,

      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,

      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,

      461,  461,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  468,  468,  468,
      468,  468,  468,  468,  468,    0,  468,  468,  468,  468,

        0,  468,  468,  468,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,    0,  470,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,

      475,  475,  475,  475,  475,  475,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  489,  489,  489,  489,  489,  489,

      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  495,  495,  495,  495,

      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  519,  519,  519,  519,  519,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  522,  523,  525,  523,  524,  524,  526,
      522,    0,  527,  528,  549,  550,  551,  527,  540,  540,
      540,  540,  540,  540,  540,    0,    0,    0,    0,  552,

      522,  553,  523,  525,  523,    0,  524,  526,  522,  527,
        0,  528,  549,  550,  551,  527,  529,  529,    0,  529,
      529,  529,  529,  529,  529,  529,  529,  552,    0,  553,
        0,    0,    0,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,    0,    0,    0,  554,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  554,    0,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

        0,  529,  529,  529,    0,  529,  529,  529,  529,  529,
      529,  529,  529,    0,  529,  529,  529,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,

      534,  534,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  536,
      536,  536,  536,  536,  536,  536,  536,    0,  536,  536,
      536,  536,    0,  536,  536,  536,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  555,  556,  557,  558,  559,
      566,  560,  561,    0,  563,  562,  555,  557,  560,  564,
      568,  570,  565,  570,  562,  567,  564,  559,  558,  565,

      561,  568,  567,  555,  556,  557,  558,  559,  566,  560,
      561,  562,  563,  562,  571,  563,  569,  564,  568,  570,
      565,  570,  572,  567,  573,  569,  575,  574,  576,    0,
      582,  577,    0,  583,    0,    0,  571,  575,  580,  578,
      579,  582,  571,  572,  569,  581,  584,  585,  586,  573,
      572,  574,  573,  576,  575,  574,  576,  577,  582,  577,
      578,  583,  579,  586,  584,  580,  580,  578,  579,  581,
      587,  585,  588,  581,  584,  585,  586,  590,  591,  589,
        0,  593,  592,  594,    0,  595,  596,    0,    0,  597,
      590,  593,  601,  598,    0,    0,  588,  587,  587,  589,

      588,  596,  600,  591,  598,  590,  591,  589,  592,  593,
      592,  594,  595,  595,  596,  597,  599,  597,  602,  605,
      601,  598,  604,  600,  603,  606,  610,  599,  607,  608,
      600,  605,  609,  602,  611,  603,  604,  610,  607,  608,
      616,  606,  615,  612,  599,  611,  602,  605,  614,  615,
      604,  617,  603,  606,  610,    0,  607,  608,  622,  609,
      609,  613,  611,  612,  619,  620,  613,  616,  616,  614,
      615,  612,    0,  623,  620,  619,  614,  613,    0,  617,
      618,  618,  618,  622,  618,  627,  622,  624,  613,  621,
      625,  623,  619,  620,  613,  626,  621,  621,  624,  621,

      621,  623,  629,  628,  631,  632,  626,  621,  633,  618,
      627,  630,  625,  627,  621,  624,  621,  621,  625,  634,
      635,  630,  636,  626,  628,    0,    0,    0,  631,  628,
      629,  628,  631,  632,    0,    0,  633,  618,    0,  630,
      641,    0,    0,    0,    0,  641,    0,  634,  635,    0,
      636,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  639,    0,  641,    0,    0,
        0,    0,  641,    0,    0,    0,  641,  645,  645,  645,

      645,  645,  645,  645,  641,    0,    0,    0,  641,    0,
      641,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  677,  677,  677,
      677,  677,  639,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,    0,    0,    0,    0,  639,
      651,  651,  651,  651,  651,  651,    0,    0,    0,  639,
        0,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  646,  646,

      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  652,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,

      654,  654,  654,  654,  693,  693,  693,  693,  693,  693,
      693,  735,  735,  735,  735,  735,  652,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,    0,    0,  652,  699,  699,  699,  699,  699,  699,
        0,    0,    0,  652,    0,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  656,  707,  707,  707,  707,  707,  707,  707,
      707,    0,  656,    0,  656,  656,  656,  656,  656,  656,

      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  670,  670,  670,  670,

      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  687,  689,    0,    0,    0,    0,  689,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  690,  690,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  777,  778,  779,    0,  687,  766,  766,  766,  766,
      766,  689,    0,  780,    0,    0,  689,    0,    0,    0,
      689,    0,    0,  781,    0,  831,    0,    0,  689,  777,
      778,  779,  689,    0,  689,    0,    0,    0,  704,    0,
      704,  780,  687,  704,  704,  704,  704,  704,  704,  704,
      704,  781,  687,  831,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  692,  692,  692,  692,  692,  692,  692,  692,  692,

      692,  692,  692,  692,  692,  692,  692,  692,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  700,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  702,  702,  702,

      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  784,  834,  784,  835,    0,    0,
        0,  700,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  839,
        0,  835,  784,  834,  784,  835,  705,  705,  705,  705,
      705,  705,  705,  705,    0,    0,  786,    0,  700,    0,
        0,  786,    0,  844,  705,    0,    0,  839,  700,    0,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  705,  706,  786,
      706,  844,    0,  706,  706,  706,  706,  706,  706,  706,

      706,  708,  708,  708,  708,  708,  708,  708,  708,  709,
        0,  709,    0,    0,  709,  709,  709,  709,  709,  709,
      709,  709,  710,  710,  710,  710,  710,  710,  710,  710,
      828,  828,  828,  828,  828,    0,  711,    0,  711,    0,
      710,  711,  711,  711,  711,  711,  711,  711,  711,  712,
      712,  712,  712,  712,  712,  712,  712,  988,  988,  988,
      988,  988,    0,  710,  713,  713,  713,  713,  713,  713,
      713,  713,  714,  714,  714,  714,  714,  714,  714,  714,
      715,  715,  715,  715,  715,  715,  715,  715,  716,  716,
      716,  716,  716,  716,  716,  716,  717,  717,  717,  717,

      717,  717,  717,  717,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,

      730,  730,  730,  730,  730,  730,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  737,  737,  737,  737,  737,  737,  737,  737,  737,

      737,  737,  737,  737,  737,  737,  737,  737,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  745,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  803,  803,  803,  803,  803,  803,

      803,  745,  942,  942,  942,  942,  942,  942,  942,  942,
        0,  745,    0,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  760,  760,

      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,

      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,

      783,  783,  785,    0,  787,    0,  840,  841,    0,  842,
      846,  832,  785,  787,  799,  799,  799,  799,  799,  799,
      799,  799,  832,  799,  799,  799,  799,  785,  799,  799,
      799,  787,  840,  841,  840,  841,  842,  842,  846,  832,
      785,  787,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  794,  794,  794,  794,  794,  794,  794,

      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,    0,  801,  802,  802,  802,  802,  802,

      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,

      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,

      822,  822,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,

      829,  829,  829,  829,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  833,  836,  837,    0,  838,  843,  847,  849,  851,
      837,  833,  838,  836,  845,  848,  852,  847,  850,    0,
      851,  853,    0,  856,  845,  855,  849,  852,  854,  833,
      836,  837,  843,  838,  843,  847,  849,  851,  850,  845,
      857,  848,  854,  848,  852,  853,  850,  855,  856,  853,
      858,  856,  845,  855,  859,  860,  854,  858,  861,  862,
      863,  864,  865,  866,  857,  867,  871,    0,  857,  859,
      868,  870,  869,  865,  862,    0,    0,  861,  858,  866,

      864,  860,  859,  860,  869,  870,  861,  862,  863,  864,
      865,  866,  872,  867,  871,  868,  868,  873,  868,  870,
      869,  874,  872,  875,  877,  876,  876,  878,  879,  880,
      883,    0,  881,    0,  882,  889,    0,  873,  878,  877,
      872,  881,  874,  876,  885,  873,  886,  875,  891,  874,
      889,  875,  877,  879,  883,  878,  879,  880,  883,  884,
      881,  876,  882,  889,  882,  888,  886,  887,  890,  884,
      885,  892,  885,  891,  886,  893,  888,  894,  899,  895,
      896,    0,    0,  898,    0,  902,    0,  884,  897,  876,
      895,  887,  896,  888,  892,  887,  890,  894,  899,  897,

      901,  891,  905,  900,  893,  894,  899,  895,  896,  898,
      900,  898,  902,  902,  900,  903,  897,  906,  904,  907,
      909,  910,  892,  911,  912,  908,  901,  913,  901,  904,
      905,  900,  893,    0,  905,  906,  908,    0,    0,    0,
      909,  903,    0,  903,    0,  906,  904,  907,  909,  910,
        0,  911,  912,  908,    0,  913,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,

      918,  918,  918,  918,  918,  918,  918,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  929,  929,  929,  929,  929,  929,  929,  929,

      929,  929,  929,  929,  929,  929,  929,  929,  929,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  938,  938,  938,  938,  938,  938,

      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  943,  943,  943,  943,  943,  943,  943,  943,
      944,  944,  944,  944,  944,  944,  944,  944,  945,  945,
      945,  945,  945,  945,  945,  945,  946,  946,  946,  946,
      946,  946,  946,  946,  947,  947,  947,  947,  947,  947,

      947,  947,  948,  948,  948,  948,  948,  948,  948,  948,
      949,  949,  949,  949,  949,  949,  949,  949,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  956,  956,  956,  956,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  956,  956,
      956,  956,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  966,  967,  970,  968,
      998,  969,  999, 1000, 1003,    0,  968,  969, 1001, 1002,

      970,    0,    0,    0,    0,    0,    0,    0,    0, 1003,
        0,  970,    0,    0,  966,  967,  968,    0,  998,  969,
      999, 1000, 1003, 1001,  968, 1002, 1001, 1002,  970,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  982,  982,  982,

      982,  982,  982,  982,  982,  982,  982,  982,  982,  982,
      982,  982,  982,  982,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  989,

      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997, 1004, 1005, 1006,
     1007,    0,    0, 1008, 1009, 1011, 1010, 1013, 1004, 1012,
     1008, 1007, 1014, 1015, 1016, 1009, 1017, 1006, 1018, 1012,
     1011, 1019, 1021, 1020, 1024, 1004, 1005, 1006, 1007, 1005,

     1008, 1010, 1009, 1011, 1010, 1013, 1014, 1012, 1008, 1026,
     1014, 1015, 1016, 1020, 1017, 1022, 1018, 1019, 1023, 1019,
     1021, 1020, 1024, 1025, 1027, 1028, 1022, 1029, 1030, 1023,
     1025,    0, 1031, 1032, 1034, 1035, 1033, 1026, 1029, 1039,
     1040,    0, 1041, 1022, 1043, 1027, 1023, 1033,    0, 1040,
     1044, 1025, 1027, 1028, 1034, 1029, 1030, 1045, 1052, 1030,
     1031, 1032, 1034, 1035, 1033, 1042, 1046, 1039, 1040, 1039,
     1041, 1047, 1043, 1048, 1051, 1044, 1042, 1046, 1044, 1050,
     1048, 1047, 1049, 1053, 1052, 1045, 1055, 1054, 1050, 1058,
     1056, 1057,    0, 1042, 1046, 1059,    0, 1065, 1051, 1047,

     1060, 1048, 1049, 1057, 1061, 1059, 1063, 1050, 1068, 1064,
     1049, 1053, 1052, 1054, 1055, 1054, 1056, 1058, 1056, 1057,
     1060, 1063, 1062, 1059, 1061, 1065, 1051, 1066, 1060, 1062,
     1067, 1069, 1061, 1064, 1063,    0, 1068, 1064,    0, 1053,
        0, 1067,    0,    0,    0,    0,    0,    0, 1066,    0,
     1062,    0,    0,    0,    0, 1066,    0,    0, 1067, 1069,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1074, 1074, 1074, 1074, 1074, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1083, 1084, 1085, 1094, 1095, 1096, 1097, 1098,
        0, 1103, 1099, 1100, 1094, 1102, 1083, 1084,    0,    0,
        0, 1102,    0, 1100,    0, 1083,    0, 1096,    0,    0,
        0, 1098, 1085, 1094, 1095, 1096, 1097, 1098, 1099, 1103,

     1099, 1100, 1100, 1102, 1083, 1084, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1101, 1104, 1105, 1106, 1108, 1107,    0,    0, 1114, 1112,
     1109, 1110,    0,    0, 1101, 1107, 1113, 1111, 1116, 1115,
     1117, 1108,    0, 1101, 1112, 1116, 1104, 1118, 1121, 1104,
     1105, 1106, 1108, 1107, 1109, 1110, 1114, 1112, 1109, 1110,
     1115, 1113, 1101, 1111, 1113, 1111, 1116, 1115, 1117, 1119,
     1120, 1122, 1121, 1118, 1123, 1118, 1121, 1124, 1125, 1119,

     1126, 1120, 1127, 1128, 1129, 1134, 1124, 1137, 1131, 1125,
     1130, 1133, 1132,    0, 1139,    0, 1122, 1119, 1120, 1122,
     1123, 1130, 1123, 1135, 1133, 1124, 1125, 1146, 1126, 1131,
     1127, 1128, 1129, 1134, 1136, 1137, 1131, 1132, 1130, 1133,
     1132, 1138, 1139, 1140, 1136, 1140, 1141, 1135, 1143, 1144,
     1147, 1135, 1141, 1145, 1148, 1146, 1149, 1147, 1149, 1143,
     1150, 1138, 1136, 1151, 1145, 1153,    0,    0, 1148, 1138,
     1158, 1140, 1150, 1140, 1144, 1157, 1143, 1144, 1147, 1155,
     1141, 1145, 1148, 1152, 1149, 1154, 1149, 1156, 1150, 1151,
     1152, 1151, 1154, 1153, 1155, 1157, 1156, 1159, 1158, 1160,

     1161, 1162, 1163, 1157, 1164, 1165, 1168, 1155, 1167, 1159,
     1166, 1152,    0, 1154,    0, 1156, 1169, 1160, 1170, 1167,
     1171, 1172,    0, 1164, 1173, 1159, 1174, 1160, 1161, 1162,
     1163, 1166, 1164, 1165, 1168, 1176, 1167, 1178, 1166, 1179,
     1169, 1180, 1170, 1183, 1169, 1175, 1170, 1184, 1171, 1172,
     1173, 1177, 1173, 1181, 1174, 1182, 1175, 1185, 1177,    0,
     1187, 1186, 1189, 1176, 1190, 1178, 1182, 1179, 1184, 1180,
     1191, 1183, 1192, 1175, 1193, 1184, 1189, 1194, 1187, 1181,
     1195, 1181, 1188, 1182, 1196, 1185, 1177, 1186, 1187, 1186,
     1189, 1188, 1190, 1197, 1198, 1199, 1201, 1200, 1191, 1205,

     1192, 1194, 1193, 1201, 1197, 1194, 1202, 1203, 1195, 1204,
     1188, 1200, 1196, 1206, 1207, 1208, 1204, 1209, 1210, 1198,
     1211, 1197, 1198, 1199, 1201, 1207, 1212, 1205, 1215, 1213,
     1202, 1203, 1214, 1216, 1202, 1203, 1211, 1204, 1214, 1200,
     1213, 1206, 1207, 1208, 1218, 1209, 1210, 1217, 1219, 1217,
     1220, 1221, 1223, 1224, 1212,    0, 1215, 1213, 1216, 1222,
     1214, 1216,    0,    0, 1211,    0,    0, 1223,    0,    0,
        0,    0, 1218,    0,    0, 1219, 1219, 1217, 1220, 1221,
     1223, 1224,    0, 1222,    0,    0,    0, 1222, 1226,    0,
     1226, 1226, 1226, 1226, 1227,    0, 1227, 1227, 1227, 1227,

     1228, 1228, 1228,    0, 1228, 1229,    0, 1229, 1229, 1229,
     1229, 1230, 1230, 1230,    0, 1230, 1231, 1231, 1231, 1231,
     1232, 1232, 1232,    0, 1232, 1234, 1234, 1234,    0, 1234,
     1235, 1235, 1235, 1235, 1235, 1235, 1236, 1236, 1236, 1236,
     1236, 1236, 1237, 1237, 1238,    0, 1238, 1238, 1238, 1238,
     1239,    0, 1239, 1239, 1239, 1239, 1240,    0, 1240, 1240,
     1240, 1240, 1241, 1241, 1241, 1241, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,

     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225
    } ;

static yyconst flex_int16_t yy_rule_linenum[160] =
    {   0,
      242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
      252,  253,  254,  255,  256,  257,  258,  259,  260,  261,
      262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
      272,  273,  274,  275,  276,  277,  278,  279,  280,  281,
      282,  283,  284,  285,  286,  287,  288,  289,  290,  291,
      292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
      302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
      312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
      322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
      332,  333,  334,  335,  336,  337,  338,  339,  340,  341,

      342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
      352,  353,  354,  355,  356,  357,  358,  359,  360,  361,
      362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
      372,  373,  374,  375,  376,  377,  378,  379,  380,  381,
      382,  383,  384,  385,  386,  387,  388,  389,  390,  391,
      392,  393,  394,  395,  396,  397,  398,  399,  400
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/SPARQLalgebraScanner.lpp"
/* $Id: SPARQLalgebraScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/* from yacker grammar http://www.w3.org/2005/01/yacker/uploads/SPARUL_EGP/SPARUL_EGPScanner.ll */
/** Flex scanner for SPARQL algebra */
#line 6 "lib/SPARQLalgebraScanner.lpp"

#include "SPARQLalgebraParser.hpp"
#include "SPARQLalgebraScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SPARQLalgebraParser::token token;
typedef w3c_sw::SPARQLalgebraParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SPARQLalgebraFlexLexer" */
/* consider using class instead
 * %option yyclass="SPARQLalgebraScanner"
 * void SPARQLalgebraFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 61 "lib/SPARQLalgebraScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARQLalgebra terminals */
/* END patterns for SPARQLalgebra terminals */
/* START semantic actions for SPARQLalgebra terminals */
#line 3352 "lib/SPARQLalgebraScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 241 "lib/SPARQLalgebraScanner.lpp"

#line 3551 "lib/SPARQLalgebraScanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1226 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1225 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 160 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 160 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 161 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 242 "lib/SPARQLalgebraScanner.lpp"
{ /* yylloc->step(); @@ needed? useful? */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 243 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 244 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 245 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_ask;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 246 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_base;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 247 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_prefix;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 248 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_project;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 249 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_extend;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 250 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_distinct;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 251 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_reduced;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 252 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_group;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 253 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_filter;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 254 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_order;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 255 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_asc;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 256 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_desc;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 257 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_slice;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 258 "lib/SPARQLalgebraScanner.lpp"
{return token::IT__;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 259 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_load;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 260 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_clear;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 261 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_silent;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 262 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_drop;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 263 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_create;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 264 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_add;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 265 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_move;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 266 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_copy;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 267 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_insertdata;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 268 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_deletedata;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 269 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_deletewhere;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 270 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_modify;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 271 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_delete;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 272 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_insert;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 273 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_default;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 274 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_named;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 275 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_all;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 276 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_quads;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 277 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_bgp;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 278 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_table;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 279 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_unit;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 280 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_path;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 281 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_join;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 282 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_sequence;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 283 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_exprlist;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 284 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_triple;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 285 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_leftjoin;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 286 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_optional;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 287 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_graph;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 288 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_service;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 289 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_minus;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 290 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_union;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 291 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 292 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_alt;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 293 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_seq;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 294 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_reverse;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 295 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_mod;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 296 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_path_OPT;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 297 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_path_TIMES;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 298 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_path_PLUS;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 299 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 300 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_notoneof;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 301 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 302 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 303 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 304 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 305 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 306 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 307 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 308 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 309 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_in;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 310 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 311 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 312 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 313 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 314 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 315 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_str;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 316 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_lang;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 317 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_langmatches;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 318 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_datatype;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 319 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_bound;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 320 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_iri;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 321 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_uri;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 322 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_bnode;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 323 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_rand;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 324 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_abs;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 325 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_ceil;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 326 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_floor;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 327 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_round;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 328 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_concat;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 329 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_strlen;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 330 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_ucase;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 331 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_lcase;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 332 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_encode_for_uri;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 333 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_contains;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 334 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_strstarts;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 335 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_strends;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 336 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_strbefore;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 337 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_strafter;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 338 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_year;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 339 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_month;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 340 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_day;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 341 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_hours;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 342 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_minutes;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 343 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_seconds;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 344 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_timezone;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 345 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_tz;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 346 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_now;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 347 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_uuid;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 348 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_struuid;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 349 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_md5;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 350 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_sha1;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 351 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_sha256;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 352 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_sha384;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 353 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_sha512;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 354 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_coalesce;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 355 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_if;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 356 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_strlang;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 357 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_strdt;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 358 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_sameterm;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 359 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_isiri;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 360 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_isuri;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 361 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_isblank;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 362 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_isliteral;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 363 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_isnumeric;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 364 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_regex;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 365 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_substr;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 366 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_exists;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 367 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_COUNT;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 368 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_DISTINCT;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 369 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_SUM;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 370 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_MIN;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 371 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_MAX;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 372 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_AVG;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 373 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_SAMPLE;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 374 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_GROUP_CONCAT;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 375 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_separator;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 376 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 377 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_true;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 378 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_false;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 379 "lib/SPARQLalgebraScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRI_REF;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 380 "lib/SPARQLalgebraScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 381 "lib/SPARQLalgebraScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 382 "lib/SPARQLalgebraScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 383 "lib/SPARQLalgebraScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 384 "lib/SPARQLalgebraScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 385 "lib/SPARQLalgebraScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 386 "lib/SPARQLalgebraScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 387 "lib/SPARQLalgebraScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 388 "lib/SPARQLalgebraScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 389 "lib/SPARQLalgebraScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 390 "lib/SPARQLalgebraScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 391 "lib/SPARQLalgebraScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 392 "lib/SPARQLalgebraScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 393 "lib/SPARQLalgebraScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 394 "lib/SPARQLalgebraScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 395 "lib/SPARQLalgebraScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 396 "lib/SPARQLalgebraScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 397 "lib/SPARQLalgebraScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 398 "lib/SPARQLalgebraScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 399 "lib/SPARQLalgebraScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 400 "lib/SPARQLalgebraScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 402 "lib/SPARQLalgebraScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 403 "lib/SPARQLalgebraScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4435 "lib/SPARQLalgebraScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( FLEX_STD istream* arg_yyin, FLEX_STD ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SPARQLalgebrafree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SPARQLalgebrafree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SPARQLalgebrarealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SPARQLalgebrarealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1226 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1226 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1225);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SPARQLalgebraalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SPARQLalgebraalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SPARQLalgebrafree((void *) b->yy_ch_buf  );

	SPARQLalgebrafree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLalgebraalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLalgebrarealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SPARQLalgebraalloc(new_size  );

		else
			(yy_start_stack) = (int *) SPARQLalgebrarealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SPARQLalgebraalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *SPARQLalgebrarealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SPARQLalgebrafree (void * ptr )
{
			free( (char *) ptr );	/* see SPARQLalgebrarealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 403 "lib/SPARQLalgebraScanner.lpp"


/* END semantic actions for SPARQLalgebra terminals */

/* START SPARQLalgebraScanner */
namespace w3c_sw {

SPARQLalgebraScanner::SPARQLalgebraScanner (SPARQLalgebraDriver* driver, std::istream* in, std::ostream* out) : SPARQLalgebraFlexLexer(in, out), driver(driver) {  }
SPARQLalgebraScanner::~SPARQLalgebraScanner () {  }

SPARQLalgebraParser::token_type SPARQLalgebraScanner::typedLiteral (SPARQLalgebraParser::semantic_type*& yylval, SPARQLalgebraParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

SPARQLalgebraParser::token_type SPARQLalgebraScanner::unescape (SPARQLalgebraParser::semantic_type*& yylval, size_t skip, SPARQLalgebraParser::token_type tok){
    std::string* space = new std::string;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* SPARQLalgebraScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index), true);
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << "\"";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void SPARQLalgebraScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END SPARQLalgebraScanner */

const URI* SPARQLalgebraScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}
} // END namespace w3c_sw

/* This implementation of SPARQLalgebraFlexLexer::yylex() is required to fill the
 * vtable of the class SPARQLalgebraFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SPARQLalgebraScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SPARQLalgebraFlexLexer::yylex()
{
    std::cerr << "in SPARQLalgebraFlexLexer::yylex() !" << std::endl;
    return 0;
}


