#ifdef _MSC_VER
#include <stdint.h>
#endif

#line 2 "lib/SPARQLScanner.cpp"

#line 4 "lib/SPARQLScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SPARQLFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file; 
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SPARQLalloc (yy_size_t  );
void *SPARQLrealloc (void *,yy_size_t  );
void SPARQLfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 181
#define YY_END_OF_BUFFER 182
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1396] =
    {   0,
        0,    0,  182,  180,    2,    1,    1,   69,  180,    2,
      180,  180,  180,    9,   10,   20,   68,   11,   86,    4,
       65,  158,  152,   36,   80,    3,   81,   67,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,   70,   71,   66,  180,   64,  180,  180,    7,    5,
        8,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,    2,    1,   79,    0,  168,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
        0,    0,    0,    0,    0,    0,    0,    0,  156,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   78,    0,  167,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  171,  176,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  161,   60,    0,  164,   12,  159,
        0,  158,    0,    0,  153,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   82,  151,    0,    0,    0,    0,    0,    0,    0,
        0,   83,  155,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  157,    0,    0,

      152,    0,    0,    0,    0,   19,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   28,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  127,   84,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   44,  117,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  172,  148,    0,    0,    0,
       77,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  168,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  156,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  167,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  176,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  173,  162,    0,    0,  165,
        0,    0,    0,  159,    0,    0,  160,    0,    0,  153,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  153,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  155,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   96,   43,   53,   75,   31,
       24,  145,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  112,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   92,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  144,  121,    0,  143,    0,    0,    0,
       85,  118,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   87,    0,  142,    0,    0,    0,    0,    0,   93,
        0,    0,    0,    0,    0,    0,  154,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   13,    6,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    2,    0,    0,    0,    0,    0,  156,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      156,  156,  156,  156,  156,  156,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  176,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  176,  176,  176,
      176,  176,  176,    0,    0,    0,    0,  162,    0,    0,
      163,    0,  165,    0,    0,  166,    0,  160,    0,  160,
      153,    0,  153,  153,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  153,  153,  153,  153,  153,  153,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  155,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      155,  155,  155,  155,  155,  155,    0,    0,    0,  157,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       14,   58,    0,    0,   97,    0,    0,    0,    0,    0,
       46,    0,    0,    0,    0,    0,   32,    0,   41,    0,
       74,    0,    0,    0,   25,    0,    0,    0,    0,    0,
       39,    0,    0,    0,    0,    0,   88,    0,    0,   37,
        0,    0,    0,   45,    0,    0,    0,    0,    0,    0,

       95,    0,    0,    0,    0,   57,    0,    0,    0,    0,
        0,    0,  122,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  119,    0,    0,   47,  110,  154,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  149,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
      156,  156,  156,  156,  156,  156,  156,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      176,  176,  176,  176,  176,  176,  176,    0,    0,    0,
        0,  163,    0,  163,    0,  166,    0,  166,  153,  153,
      153,  153,  153,  153,  153,  153,    0,    0,    0,    0,
      155,  155,  155,  155,  155,  155,  155,    0,    0,    0,
       94,   91,   40,    0,    0,    0,    0,  140,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   98,   52,   27,
        0,  113,    0,    0,  131,    0,    0,  132,    0,  103,
       33,    0,   61,    0,  111,   26,    0,    0,   30,    0,
       54,    0,  136,    0,   99,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  129,    0,
        0,    0,    0,    0,    0,    0,  102,   59,   62,    0,
       50,    0,   22,  154,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  154,  154,  154,  154,  154,  154,
        0,    0,    0,  150,    0,    0,  170,    0,    0,    0,
        0,    0,    0,  169,    0,    0,    0,    0,    0,    0,
        0,  100,    0,    0,   42,    0,    0,   48,    0,    0,
        0,  139,   63,    0,   29,   49,    0,    0,    0,    0,
        0,    0,   34,    0,   15,    0,    0,    0,  146,    0,

       16,    0,    0,  123,  124,  125,   38,   73,    0,    0,
        0,    0,  101,    0,    0,  137,    0,    0,   35,  154,
      154,  154,  154,  154,  154,  154,    0,    0,    0,    0,
      174,    0,    0,  175,    0,    0,    0,    0,    0,    0,
        0,   51,    0,    0,    0,    0,    0,    0,    0,    0,
      133,    0,    0,    0,   72,  114,    0,   18,  138,    0,
      115,    0,   56,    0,    0,  107,  128,    0,  120,    0,
        0,    0,    0,  126,    0,  105,   90,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   23,   17,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   55,  130,    0,  109,    0,
        0,  116,    0,    0,    0,   21,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  134,  135,    0,  147,  108,  106,
       76,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  178,    0,    0,    0,    0,    0,
        0,  177,    0,    0,   89,  179,  178,    0,    0,  141,
      177,  179,    0,  104,    0

    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   21,   28,   21,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       45,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,    1,   66,   67,   68,   69,

       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   75,   82,   83,   84,   85,   86,   87,   88,
       89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
       99,   99,   99,  100,  101,  101,  101,  101,  101,  102,
      103,  101,  104,  105,  106,  107,  106,  108,  106,  106,
      109,  110,  111,  111,  111,  111,  111,  111,  111,  112,
      112,  112,  112,  113,  113,  113,  113,  113,  113,  113,
      113,  114,  113,  113,  113,  115,  115,  115,  115,  116,
      117,  117,  118,  119,  119,  119,  119,  119,  119,  120,
      121,  122,  122,  123,  124,  125,  125,  125,  125,  125,

      125,  125,  125,  126,  127,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  129,  130,  131,  132,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  134,  135,  136,  137,
      138,  138,  139,  140,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122
    } ;

static yyconst YY_CHAR yy_meta[141] =
    {   0,
        1,    1,    2,    2,    1,    3,    1,    3,    3,    4,
        3,    3,    3,    3,    3,    3,    3,    5,    6,    3,
        7,    7,    7,    7,    7,    7,    7,    7,    8,    3,
        1,    3,    3,    3,    3,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        3,   10,    3,    1,   11,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        1,    1,    1,    3,    3,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   13,   12,
       12,   12,   12,   12,   12,   12,   12,   13,   12,   12,
       12,   14,   15,   16,   16,   15,   16,   16,   16,   16,
       16,   16,   16,   16,   17,   16,   16,   16,   16,   17
    } ;

static yyconst flex_uint16_t yy_base[1757] =
    {   0,
        0,    0, 2802, 7959,  139, 7959, 2780, 2573,  135,   22,
       39, 2431,  153,  177, 7959,   71,  195, 7959,  206,  162,
     7959,  275,  233, 7959,  203, 7959, 2375,  117,    0,  355,
      459,  507,  524,  553,  568,  420,  574,  612,  464,  619,
      631,  668,  674,  515,  683,  726,  727,  774,  796,  820,
      834,  305, 7959, 2335, 2308,    0,  835,  878, 7959, 2241,
     7959,    0,  195,  201,  196,  234,    0,  873, 2230,    0,
      899,  333,  906,    0,  932,  235, 7959, 7959, 1040, 2317,
     1041,    0,  942,    0,  968,    0,  975,    0,  843, 1003,
        0, 1032,    0, 1085,    0, 1092,    0, 1058, 1091,    0,

      203,  340,  353, 1119,    0, 1145, 2225,    0, 1171, 1170,
     1187,    0, 1213, 7959, 1316, 2262, 1322,    0, 1223,    0,
     1249,    0, 1256,    0, 1311,  461, 7959, 1293,    0,  359,
      622,  392, 1345,    0, 1371, 2169,    0, 1397, 1396, 1413,
        0, 1439,  176, 1533, 1543, 7959, 1551, 1563, 7959, 1571,
     1594, 1604, 1624, 1632, 1656, 1674,    0,  404,  667,  411,
     1607,    0, 1700, 2162,    0, 1644, 1616, 1717,    0, 1743,
     1736, 1758, 7959,    0, 1644,    0, 1803,    0, 1810,    0,
     1674, 7959, 1809,    0,  412,  816,  414, 1837,    0, 1863,
     2143,    0, 1889, 1888, 1905,    0, 1931, 2213, 2027, 2044,

     2060,  478,  511,  506,  327,  590,  346, 2061,    0,  440,
        0,  846,  454, 1962,    0, 2104, 2066,    0, 1988, 1934,
     1995,    0, 2027,  546,  598,  559,  588, 2040,  315,  721,
     2197,  735,  761,  836,  593,  678, 2198,  508,  602,  739,
      789,  870,  673,  631, 2036, 1552,  784, 2206,  723,  802,
      793, 1362,  549,  361,  832,  874, 2200,  879,  867, 1636,
     1351,  667, 2201, 1354, 2218, 2199, 2203, 2259, 1571, 1634,
     2241, 2265, 2211, 1915, 1829, 1572, 2275, 2271, 2272, 2274,
     2215, 2269, 2266, 1573, 1047, 7959, 7959, 2229,  440,  388,
     7959, 1709,    0,    0,  109,  998,    0, 2273,    0,  732,

        0, 2027, 1614,    0,    0,    0,    0, 2285,    0,  203,
        0,    0,    0, 7959, 2289,    0,    0,    0,    0,    0,
        0,    0, 1584,    0,    0,    0,    0,    0,    0,    0,
     1555, 2307, 1525,    0,  461,    0, 2275,  507, 2335,    0,
     2361, 1528,    0, 2387, 2386, 2403,    0, 2429,    0,    0,
      629, 2429,    0, 2455,    0,    0, 2445, 1518,    0,    0,
        0,    0, 2471,    0,  673,    0,    0,    0, 7959, 2564,
        0,    0,    0,    0,    0,    0,    0, 1491, 2470, 1486,
        0,  604,    0, 2462,  707, 2498,    0, 2609, 1467,    0,
     2531, 2530, 2547,    0, 2635,    0,    0,  789, 2554,    0,

     2580,    0,    0, 2635, 1342,    0,    0,    0,    0, 2661,
        0,  977,    0,    0,    0, 1416, 2745, 2765, 2785, 2796,
     2804, 2824, 2837, 2854, 2874, 2882, 2890, 2904, 2925, 2874,
     2957, 3012, 1284,    0,  991,    0, 2679, 1270, 2865,    0,
     3011, 1301,    0, 2952, 2920, 3028,    0, 3054,    0,    0,
        0, 1002, 2752,    0, 2968,    0,    0, 2839, 1296,    0,
        0,    0,    0, 3073,    0,  986,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1261, 3072, 1108,    0,
     1272,    0, 2982, 1276, 3066,    0, 3116, 1028,    0, 3142,
     3141, 3158,    0, 3184,    0,    0, 1019, 3184,    0, 3210,

        0,    0, 3200, 1015,    0,    0,    0,    0, 3226,    0,
     1210,    0,    0,    0,    0, 3319, 3336,    0,    0,    0,
        0,    0,    0,    0,    0, 3233, 3241,    0, 3270,    0,
        0, 3260, 1005,    0,    0,    0,    0, 3286,    0, 1212,
        0,    0,    0, 3401, 3467,  887, 2273, 3352, 2269, 3438,
     3355, 2745, 3439, 3356, 3443,  890, 3444, 2339, 2818, 3502,
     3359, 3442, 3504, 3505, 3563, 3503, 3445, 3508, 3568, 3477,
     3569, 2899, 3570, 1541, 3571, 3572, 3506, 3573, 3574, 3448,
     3576, 3510, 1628, 2080, 2195, 2852, 3575, 3577, 3035, 3294,
     2199, 2278, 3580, 3583, 3357, 3595, 3586, 2295, 3623, 3628,

     3630, 3631, 3632, 3633, 3635, 3642, 3516, 3640, 3694, 3654,
     3680, 3691, 3652, 2948, 3697, 3686, 3701, 3695, 3690, 2976,
     3704, 3004, 3726, 3738, 3709, 3740, 3703,    0, 1277, 1943,
     1278, 3448,    0, 3747, 1003,    0, 3773, 3298, 3780,    0,
     3806, 3711, 3715, 3450, 3509, 3644, 3717, 3882, 3883, 3748,
     3749, 3750, 3752,    0,    0,    0, 3916, 3934, 3918,    0,
     3684,    0, 3857,    0, 3910,    0, 3401, 3970,    0,    0,
        0,    0, 1279, 3952,    0,    0,    0,    0, 1316, 3988,
        0,    0, 3826, 3854,    0, 3835,    0,    0, 3316,  853,
        0,    0,    0,    0, 4032,    0, 1541,    0,    0,    0,

     4031, 4048,    0,    0,    0,    0,    0,    0,    0, 4126,
     4154, 4130,    0, 3891,    0, 4121,    0, 4190,    0, 4137,
     4255,    0,    0,    0,    0, 1558, 4195,    0,    0, 4087,
     4220,    0, 4172,    0,    0, 4127,  802,    0,    0,    0,
        0, 4246,    0, 1575,    0,    0,    0, 4273, 4290,    0,
        0,    0,    0,    0,    0,    0, 4414, 4422, 4442, 4330,
     4347, 4455, 4463, 4483, 4491, 4499, 4513, 4521, 4529, 4537,
     4556, 4546, 4578,    0,    0,    0, 4474, 4483,    0, 4523,
        0,    0, 4336,  799,    0,    0,    0,    0, 4532,    0,
     1592,    0,    0,    0, 4635, 4656,    0,    0,    0,    0,

        0,    0,    0, 4604,    0,    0,    0,    0, 1594, 4673,
        0,    0, 4539, 4604,    0, 4649,    0,    0, 4490,  792,
        0,    0,    0,    0, 4717,    0, 1596,    0,    0,    0,
     4716, 4733,    0,    0,    0,    0,    0,    0,    0,  834,
     4849, 4866,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3753, 3769,    0, 3897, 4143, 4294, 4377, 4436,
        0, 4444, 4446, 4584, 4584, 4589, 4592, 4602,    0, 4622,
        0, 4642, 4738, 4799,    0, 4830, 4823, 4826, 4823, 4825,
        0, 4843, 4836, 4828, 4835, 4840, 4838, 4847, 4834,    0,
     4849, 4837, 4849,    0, 4854, 4854, 4846, 4845, 4854, 4845,

        0, 4862, 4843, 4866, 4869,    0, 4857, 4868, 4876, 4895,
     4882, 4891,    0,  821,  809,  811, 4887, 4883, 4898, 4900,
     4900, 4922, 4970, 4953, 4953, 4955, 4951, 4972, 4972, 4965,
     4976, 4974,    0, 4977, 4978,    0,    0, 4927, 4949,  680,
        0, 1948,    0, 4707, 2077, 4907,    0, 4993,  699,    0,
     5019, 5018, 5035,    0, 5061,    0,    0, 1664, 4832,    0,
     5080,    0,    0, 4841,  650,    0,    0,    0,    0, 5089,
        0, 1757,    0,    0,    0, 5182, 5199, 5243,  601,  696,
        0,    0,    0,    0,    0,    0,    0,  553, 5242, 5106,
     5130, 5147,    0,    0,    0,    0,    0,    0,    0,    0,

      660,    0,    0,    0,    0,    0,    0,    0,  513, 5322,
     5164, 5262,    0,    0,    0,    0,    0,    0,    0,    0,
     5198, 5381, 5389, 5397, 5405, 5413, 5442, 5450, 5469, 5486,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 5447,
     5383, 5413,    0,    0,    0,    0,    0,    0,    0,    0,
     5504, 5534,    0, 4979, 5143, 5165, 5450,    0, 5455, 5438,
     5451, 5459, 5456, 5453, 5464, 5473, 5483,    0,    0,  548,
     5516,    0, 5505, 5511,    0, 5521, 5581,    0, 5590,    0,
        0, 5587,    0, 5604,    0,    0, 5591, 5597,    0, 5589,
        0, 5608,    0, 5611,    0, 5610, 5612, 5614, 5600, 5619,

     5643,  564,  544,  504, 5632, 5634, 5634, 5648,    0, 5651,
     5642, 5643, 5657, 5650, 5643, 5646,    0,    0,    0, 5657,
        0, 5645,    0, 5680,    0,    0, 5627, 5616,    0, 5604,
        0,    0, 5366,  428,    0,    0,    0,    0, 5653,    0,
     1759,    0,    0,    0, 5719, 5739,    0,    0,    0,    0,
        0,    0,    0, 5756, 3710,  739, 7959, 5773,    0,    0,
        0,    0, 1947, 7959, 5812,    0,    0,    0,    0, 1951,
     5895, 5671, 5915, 5752, 5672, 5916, 5917, 5757, 5726, 5728,
     5761, 5729, 5753, 5754, 5760, 5918, 5919, 5920, 5921, 5922,
     5924, 5926, 5762, 5930, 5764, 5936, 5940, 5978, 5823, 5997,

     5893, 5998, 5973, 5931, 5944, 5976, 5977, 5979, 5999, 6004,
     6000, 6013, 6002, 6010, 6018, 6011, 6025, 6021, 6020,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 6023,
     6026, 6033, 6037, 6038, 6039, 6083, 6101, 6057, 6058, 6061,
     6060, 6064, 6114, 6119, 6070, 6082, 6071, 6093, 6258, 6144,
     6073, 6099, 6108, 6083, 6109, 6110, 6111, 6117, 6118, 6121,
     6119, 6122, 6124, 6247, 6248, 6136, 6137, 6249, 6226, 6250,
     6251, 6238,  411, 6227, 6322, 6254, 6255, 6260, 6255, 6405,
        0, 6192,    0, 6318,    0, 6340,    0, 6265, 6263, 6264,
     6332, 6426, 6335, 6544,    0, 6318,    0, 6380,    0, 6401,

        0, 6295, 6334, 6335, 6425, 6336, 6337, 6512, 6402, 6403,
     6513, 6404, 6427, 3885, 3579, 6429, 6415, 6483,    0,    0,
     6488, 6482,    0,    0,    0,    0,    0,    0,    0,  384,
     6518, 6489, 6504, 6683,    0, 6523,    0,    0,    0,    0,
        0,    0,    0,  378, 6522, 6523, 6525, 6524, 6529, 6530,
     6531, 6533, 6534, 6537, 6522, 6822, 6961, 6535,    0,    0,
        0,    0, 1997, 6541, 6546, 6541, 6524,    0,    0,    0,
        0,    0, 2000, 6572, 7959, 6545, 6580, 6571, 6547, 6581,
     6651, 7959, 6582,    0, 6583, 7959, 6582, 6584, 6652, 6588,
        0, 6587, 6655, 6590, 7959, 7101, 7118, 7129, 7145, 7156,

     7169, 7183, 7194,  410,  373, 2316, 2318, 2385, 2398, 7210,
     2572, 2608, 2610, 2612, 7227, 2673, 2762, 2825, 2910, 7238,
      313, 2921, 2976, 3066, 3319, 7254, 3327, 3482, 3674, 3800,
     7265,  299, 3914, 3970, 3974, 3979, 7278,  294, 3981, 4021,
     4023, 4025, 7292, 4127, 4131, 4133, 4181, 7303,  245, 4183,
     4186, 4198, 4300,  679, 7315, 7328,  240, 4302, 4364, 4421,
     4462, 4481, 7338, 4483, 4519, 4568, 4650, 4652, 4658, 4665,
     4686, 4742, 4744, 7354, 4763, 4817, 4930, 5017, 5021, 5055,
     5057, 5182, 5186, 5190, 5200, 5202, 7365,  226, 5238, 5430,
     5477, 5479, 5542, 5554, 5556, 5701, 5729, 5764, 5766, 5769,

     5771, 5774, 5776, 7381, 5821, 5824, 5826, 5828, 5847, 5903,
     7392,  214, 5905, 5915, 5917, 6111, 6121, 6168, 6181, 6183,
     6185, 6312, 6365, 6367, 6371, 6373, 6375, 7405,  194, 6488,
     6490, 6617, 6619, 6621, 6625, 6630, 6632, 6647, 6649, 6682,
     6684, 6688, 6690, 6694, 6696, 6698, 6700, 6702, 6704, 6712,
     7415,  181, 6714, 6718, 6720, 6724, 6726, 6728, 6730, 6732,
     6734, 6736, 6738, 6741, 6743, 6745, 6747,  467, 7427, 6749,
     6751, 6753, 6755, 6757, 6759, 6761, 6763, 6765, 6767, 7439,
     7451,  162, 6769, 6771, 6773, 6775, 6777, 7467, 6779, 6781,
     6783, 6785, 7484, 6787, 6789, 7501, 6791, 6816, 7512, 6819,

     6821, 6823, 6825, 6827, 6829, 6831, 6833, 6835, 6837, 7522,
     6839, 7538, 6841, 6843, 6845, 6847, 7555, 6850, 6852, 7566,
     6854, 6856, 6858, 6860, 6862, 6865, 6868, 6870, 6872, 6874,
     7576, 6876, 7589, 6880, 6882, 6884, 6886, 6888, 6890, 6892,
     6895, 6898, 6900, 7602, 6902, 7616, 6904, 6906, 7627, 6908,
     6910, 6912, 6914, 6916, 6918, 6920, 6922, 6924, 6926, 7637,
     6928, 7649, 7654, 6930, 7666,  131, 6955, 6958, 6960, 6962,
     6964, 6966, 6968, 6970, 6972, 6974, 6976, 6978, 6980, 6982,
     6984, 7678, 7694, 6986, 6990, 6992, 6994, 6996, 6998, 7705,
     7722, 7733, 7000, 7749, 7002, 7004, 7007, 7009, 7011, 7013,

     7760, 7771, 7015, 7784, 7020, 7798, 7809, 7022, 7821, 7833,
     7024, 7026, 7028, 7030, 7032, 7034, 7037, 7039, 7041, 7043,
     7845, 7045, 7857, 7047, 7873, 7049, 7051, 7890, 7053, 7055,
     7057, 7907, 7924, 7059, 7061, 7063, 7065, 7067, 7069, 7101,
     7118, 7129, 7131, 7145, 7156, 7158, 7162, 7169, 7171, 7183,
     7194, 7196, 7941, 7210, 7227, 7238
    } ;

static yyconst flex_int16_t yy_def[1757] =
    {   0,
     1395,    1, 1395, 1395, 1395, 1395, 1395, 1395, 1396, 1397,
     1398, 1395, 1399, 1395, 1395, 1400, 1395, 1395, 1395, 1395,
     1395, 1395, 1401, 1395, 1402, 1395, 1395, 1403, 1404, 1395,
       30,   31,   32,   32,   32,   32,   32,   32,   32,   31,
       31,   31,   32,   32,   32,   32,   32,   32,   32,   32,
       32, 1395, 1395, 1395, 1395,   30,   32,   32, 1395, 1395,
     1395, 1405, 1405, 1395, 1405, 1395, 1406, 1395, 1407, 1408,
     1395, 1395, 1395, 1409, 1395, 1395, 1395, 1395, 1410, 1395,
     1395, 1411, 1395, 1412, 1395, 1413, 1395, 1414, 1395, 1415,
     1416, 1395, 1417, 1395, 1418, 1395, 1419, 1395, 1420, 1421,

     1421, 1395, 1421, 1395, 1422, 1395, 1423, 1424, 1395, 1395,
     1395, 1425, 1395, 1395, 1426, 1395, 1395, 1427, 1395, 1428,
     1395, 1429, 1395, 1430, 1395, 1395, 1395, 1431, 1432, 1432,
     1395, 1432, 1395, 1433, 1395, 1434, 1435, 1395, 1395, 1395,
     1436, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1437, 1395, 1438, 1438, 1395, 1438,
     1395, 1439, 1395, 1440, 1441, 1395, 1395, 1395, 1442, 1395,
     1443, 1443, 1395, 1444, 1395, 1445, 1395, 1446, 1395, 1447,
     1395, 1395, 1448, 1449, 1449, 1395, 1449, 1395, 1450, 1395,
     1451, 1452, 1395, 1395, 1395, 1453, 1395, 1454, 1455, 1455,

     1456,  200,  200,  200,  200,  200,  200, 1395, 1457, 1457,
     1458, 1458, 1457, 1395, 1459, 1395, 1460, 1461, 1395, 1395,
     1395, 1462, 1395,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200, 1395, 1395, 1395, 1463,  200,  200,
     1395,  200, 1464, 1465, 1464, 1464, 1466, 1464, 1464, 1464,

     1467, 1467, 1468, 1468, 1465, 1464, 1469, 1395, 1470, 1470,
     1471, 1472, 1473, 1395, 1474, 1475, 1476, 1475, 1475, 1477,
     1478, 1479, 1480, 1481, 1482, 1481, 1481, 1483, 1484, 1485,
     1486, 1487, 1395, 1488, 1488, 1489, 1489, 1488, 1395, 1490,
     1395, 1491, 1492, 1395, 1395, 1395, 1493, 1395, 1494, 1495,
     1494, 1494, 1496, 1494, 1494, 1497, 1497, 1498, 1498, 1495,
     1494, 1499, 1395, 1500, 1500, 1501, 1502, 1503, 1395, 1504,
     1505, 1506, 1505, 1505, 1507, 1508, 1509, 1510, 1511, 1395,
     1512, 1512, 1513, 1513, 1512, 1395, 1514, 1395, 1515, 1516,
     1395, 1395, 1395, 1517, 1395, 1518, 1519, 1518, 1518, 1520,

     1518, 1518, 1521, 1521, 1522, 1522, 1519, 1518, 1523, 1395,
     1524, 1524, 1525, 1526, 1527, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1528,
     1528, 1395, 1395, 1529, 1529, 1530, 1530, 1529, 1395, 1531,
     1395, 1532, 1533, 1395, 1395, 1395, 1534, 1395,  431, 1535,
     1536, 1535, 1535, 1537, 1535, 1535, 1538, 1538, 1539, 1539,
     1536, 1535, 1540, 1395, 1541, 1541, 1542, 1543, 1544, 1545,
     1546, 1545, 1545, 1547, 1548, 1549, 1550, 1551, 1395, 1552,
     1552, 1553, 1553, 1552, 1395, 1554, 1395, 1555, 1556, 1395,
     1395, 1395, 1557, 1395, 1558, 1559, 1558, 1558, 1560, 1558,

     1558, 1561, 1561, 1562, 1562, 1559, 1558, 1563, 1395, 1564,
     1564, 1565, 1566, 1567, 1568, 1569, 1569,  517,  517,  517,
      517,  517,  517, 1570, 1571, 1570, 1570, 1572, 1570, 1570,
     1573, 1573, 1574, 1574, 1571, 1570, 1575, 1395, 1576, 1576,
     1577, 1578, 1579, 1580, 1580,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,

      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545, 1581, 1582, 1582, 1395,
     1582, 1395, 1583, 1395, 1584, 1585, 1395, 1395, 1395, 1586,
     1395,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545, 1587, 1587, 1587, 1588, 1588, 1395, 1589,
     1395, 1590, 1395, 1591, 1395, 1592, 1395, 1593, 1594, 1594,
     1595, 1595, 1595, 1596, 1597, 1597, 1598, 1598, 1598, 1599,
     1600, 1601, 1600, 1600, 1602, 1600, 1600, 1603, 1603, 1604,
     1604, 1601, 1600, 1605, 1395, 1606, 1606, 1607, 1608, 1609,

     1610, 1610,  702,  702,  702,  702, 1611, 1611, 1611, 1612,
     1612, 1395, 1613, 1395, 1614, 1395, 1615, 1395, 1616, 1395,
     1617, 1618, 1618, 1619, 1619, 1619, 1620, 1621, 1622, 1621,
     1621, 1623, 1621, 1621, 1624, 1624, 1625, 1625, 1622, 1621,
     1626, 1395, 1627, 1627, 1628, 1629, 1630, 1631, 1631,  749,
      749,  749,  749, 1632, 1632, 1632, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1633, 1395, 1633,  773, 1634, 1635, 1634, 1634, 1636, 1634,
     1634, 1637, 1637, 1638, 1638, 1635, 1634, 1639, 1395, 1640,
     1640, 1641, 1642, 1643, 1644, 1644,  796,  796,  796,  796,

     1645, 1645, 1645, 1646, 1647, 1647, 1648, 1648, 1648, 1649,
     1650, 1651, 1650, 1650, 1652, 1650, 1650, 1653, 1653, 1654,
     1654, 1651, 1650, 1655, 1395, 1656, 1656, 1657, 1658, 1659,
     1660, 1660,  832,  832,  832,  832, 1661, 1661, 1661, 1662,
     1663, 1663,  842,  842,  842,  842,  842, 1664, 1664, 1664,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,

      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842, 1665, 1665, 1395,
     1666, 1666, 1667, 1667, 1666, 1395, 1668, 1395, 1669, 1670,
     1395, 1395, 1395, 1671, 1395, 1672, 1673, 1672, 1672, 1674,
     1672, 1672, 1675, 1675, 1676, 1676, 1673, 1672, 1677, 1395,
     1678, 1678, 1679, 1680, 1681, 1682, 1682, 1395,  978, 1683,
     1684, 1685, 1684, 1684, 1686, 1687, 1688, 1689, 1690, 1691,
     1692, 1692,  992,  992,  992,  992,  992, 1693, 1693, 1693,

     1694, 1695, 1696, 1695, 1695, 1697, 1698, 1699, 1700, 1701,
     1702, 1702, 1012, 1012, 1012, 1012, 1012, 1703, 1703, 1703,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1704, 1704,
     1030, 1030, 1030, 1030, 1030, 1030, 1705, 1705, 1705, 1706,
     1707, 1707, 1042, 1042, 1042, 1042, 1042, 1708, 1708, 1708,
     1709, 1709, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,

     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1710, 1711, 1712, 1711, 1711, 1713, 1711,
     1711, 1714, 1714, 1715, 1715, 1712, 1711, 1716, 1395, 1717,
     1717, 1718, 1719, 1720, 1721, 1721, 1146, 1146, 1146, 1146,
     1722, 1722, 1722, 1723, 1724, 1724, 1395, 1725, 1726, 1726,
     1727, 1727, 1727, 1395, 1728, 1729, 1729, 1730, 1730, 1730,
     1723, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,

     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1731, 1731, 1731, 1171,
     1171, 1171, 1171, 1171, 1171, 1725, 1728, 1171, 1171, 1171,
     1171, 1171, 1395, 1732, 1171, 1171, 1171, 1171, 1395, 1733,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1395, 1272, 1171, 1171, 1171, 1171, 1395, 1395, 1732,
     1734, 1395, 1735, 1395, 1736, 1395, 1737, 1395, 1171, 1171,
     1171, 1171, 1395, 1733, 1738, 1395, 1739, 1395, 1740, 1395,

     1741, 1395, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1742, 1742, 1171, 1395, 1395, 1280, 1280,
     1280, 1280, 1734, 1743, 1734, 1734, 1744, 1745, 1746, 1747,
     1171, 1171, 1395, 1733, 1334, 1334, 1738, 1748, 1738, 1738,
     1749, 1750, 1751, 1752, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1395, 1395, 1753, 1753, 1357, 1754, 1754,
     1755, 1755, 1755, 1171, 1171, 1395, 1334, 1334, 1738, 1738,
     1756, 1756, 1756, 1171, 1395, 1395, 1357, 1357, 1357, 1171,
     1171, 1395, 1334, 1334, 1171, 1395, 1357, 1357, 1171, 1171,
     1334, 1357, 1171, 1171,    0, 1395, 1395, 1395, 1395, 1395,

     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,

     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,

     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,

     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395
    } ;

static yyconst flex_uint16_t yy_nxt[8100] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,    4,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   22,   22,   22,   22,   22,   22,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   39,   51,   39,
       52,    4,   53,   54,   55,   56,   31,   32,   33,   34,
       57,   36,   37,   38,   39,   39,   40,   41,   42,   43,
       44,   45,   46,   58,   48,   49,   50,   39,   51,   39,
       59,   60,   61,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,   62,   63,    4,   64,   65,   66,   67,
       68,   69,   70,   71,    4,   72,   73,   74,   75,    4,
       76,   80,  938,   76,   91,   91,   91,   91,   91,   91,
       92,   93,   93,   93,   93,   94,   95,   95,   96,   97,
       97,   98,  100,  101,  116,  102,  103,  104,  105,  106,
      107,  108,  109,  627,  110,  111,  112,  113,  126,  126,
      126,  126,  150,  150,  150,  150,  150,  150,  150,  150,
      127,  416,  478,  143,  129,  130,   81,  131,  132,  133,

      134,  135,  136,  137,  138,  430,  139,  140,  141,  142,
      644,  644,  143,  144,  117,  145,  145,  145,  145,  145,
      145,  145,  145,  146,  147,  379,  148,  148,  148,  148,
      148,  148,  148,  148,  172,  173,   76,  332,  149,   76,
      184,  185,  154,  186,  187,  188,  189,  190,  191,  192,
      193,  199,  194,  195,  196,  197,  183,   82,   82,   82,
       82,   82,   82,   83,   84,   84,   84,   84,   85,   86,
       86,   87,   88,   88,   89,  118,  118,  118,  118,  118,
      118,  119,  120,  120,  120,  120,  121,  122,  122,  123,
      124,  124,  125,  151,  156,  152,  152,  152,  152,  152,

      152,  152,  152,  292,  292,  155,  285,  285,  285,  285,
      128,   99,  292,  292,  153,  292,  292,  292,  292,  292,
       99,  292, 1395, 1395,   99,  174,  174,  174,  174,  174,
      174,  175,  176,  176,  176,  176,  177,  178,  178,  179,
      180,  180,  181,  201,  153,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  201,  157,  158,  548,  159,
      160,  161,  162,  163,  164,  165,  166,  286,  167,  168,
      169,  170,  199,  200,  201,  199,  199,  199,  199,  199,
      199,  199,  199,  201,  292,  519,  585,  522,  548,  201,
      199,  202,  199,  203,  199,  199,  199,  199,  199,  199,

      199,  204,  199,  205,  199,  199,  199,  206,  199,  199,
      207,  199,  199,  199,  199,  519,  201,  522,  198,  199,
      199,  202,  199,  203,  199,  199,  199,  199,  199,  199,
      199,  204,  199,  205,  199,  199,  199,  206,  199,  199,
      207,  199,  199,  199,  199,  307,  307,  307,  307,  307,
      308,  309,  309,  310,   99,   99,   99,   99,   99,  199,
       99,   99,  126,  126,  126,  126,  199,  128,  201,  199,
       99,  242,  643,  840,  127,  840,  128,  208,  209,  210,
      211,  212,  213,  214,  215,  216,  217,  218,  219,  199,
      220,  221,  222,  223,  224,  199,  199,  199, 1373,  199,

      128,  242,  225,  199, 1363,  199,  201,  226,  227,  128,
      199,  199,  155,  199,  199,  199,  642,  228, 1315,  155,
      183,  155,  183,  938,  224,  199, 1206,  199,  155,  183,
      516,  183,  225,  199,  201,  199,  201,  226,  227,  201,
      199,  199,  199,  199,  199,  199,  229,  228,  199,  517,
      199,  564,  518,  230,  199,  199,  231,  199,  232,  233,
      516,  199,  199,  234,  199,  199,  263,  235, 1205,  332,
      199,  199,  199,  199,  201,  236,  229,  201,  332,  517,
      199,  564,  518,  230,  199,  199,  231,  201,  232,  233,
     1204,  199,  199,  234,  199,  199,  263,  235,  544,  199,

      199,  237,  199,  199,  199,  236,  584,  199,  546,  243,
      238,  239, 1184,  199,  240,  332,  201,  199,  201,  241,
      199,  201,  199,  244,  332,  199,  201,  520,  544,  199,
      201,  237,  199, 1170,  199,  521,  584,  199,  546,  243,
      238,  239,  547,  199,  240,  560,  545,  199,  565,  241,
      199,  199,  245,  244,  249,  199,  250,  520,  199,  201,
      246,  199,  251,  247,  248,  521,  253,  199,  252,  254,
      255, 1164,  547, 1163,  256,  560,  545,  199,  565,  199,
      257,  199,  245,  198,  249,  571,  250,  198,  199,  199,
      246,  199,  251,  247,  248,  201,  253,  199,  252,  254,

      255,  201, 1157,  258,  256,  595,  201,  199, 1156,  199,
      257,  199,  379,  199,  260,  571,  199,  259,  264,  199,
      199,  379,  265,  199,  261,  262,  199,  561,  570,  199,
      701,  701,  266,  258,  199,  595,  128,  128,  128,  128,
      128,  199,  128,  199,  260,  627,  199,  259,  264,  201,
      199,  201,  265,  199,  261,  262,  199,  561,  570,  199,
      549,  267,  266,  201,  199,  268,  199,  201,  269,  270,
      273,  580,  199,  199,  554,  199,  274,  199,  199,  271,
      272,  155,  155,  155,  155,  155,  275,  155,  566,  201,
      549,  267, 1395, 1395, 1134,  268,  199, 1124,  269,  270,

      273,  580,  199,  199,  554,  199,  274,  199,  199,  271,
      272,  276,  201,  199,  555,  379,  275,  201,  566,  556,
      199,  201,  277,  199,  379,  278,  279,  574,  280,  647,
      201,  281, 1104,  648, 1233,  199, 1103,  581,  567,  649,
      582,  276,  199,  199,  555,  199, 1102,  199, 1234,  556,
      199,  515,  277,  199, 1235,  278,  279,  574,  280,  199,
      201,  281,  282,  283,  201,  199,  199,  581,  567,  199,
      582,  199,  199,  284,  199,  199,  557,  199,  239,  586,
      199,  240,  558,  199,  199,  199,  241,  478,  559,  199,
      748,  748,  282,  283,  430,  201,  199,  379,  201,  199,

      289,  199,  201,  284,  199,  568,  557,  201,  239,  586,
      199,  240,  558,  199,  199,  199,  241,  199,  559,  569,
      591,  273,  587,  592,  199,  853,  590,  274,  199,  199,
      183,  183,  183,  183,  183,  568,  183,  275,  322,  322,
      322,  322,  322,  322,  322,  322,  323,  199,  332,  569,
      591,  273,  587,  592,  199,  853,  590,  274,  199,  290,
      199,  199,  199,  199,  199, 1395,  199,  275,  295,  296,
      297,  297,  298,  299,  299,  299,  299,  299,  299,  299,
      300,  299,  299,  299,  299,  299,  299,  301,  301,  301,
      301,  301,  301,  302,  306,  306,  306,  306,  306,  306,

      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  314,   79,  285,  285,
      285,  285,   79,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320, 1395, 1395,  965,  430,

      199,   81,   79,  795,  795, 1395, 1395,   79,  430,  286,
      183,   79,  645,  645,  645,  645,  645,  645,  645,   79,
      831,  831,   79,  820,   79,   91,   91,   91,   91,   91,
       91,   92,   93,   93,   93,   93,   94,   95,   95,   96,
       97,   97,   98,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  330,  330,  330,  330,  330,  330,  330,
      330,  331,   82,   82,   82,   82,   82,   82,   83,   84,
       84,   84,   84,   85,   86,   86,   87,   88,   88,   89,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  328,  328,  328,  328,

      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  333,  334,  335,  336,  337,  338,  339,
      340,  341,  342,  343,  344,  810,  345,  346,  347,  348,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      351,  352,  353,  353,  354,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  356,
      356,  356,  356,  356,  356,  357,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  362,  362,  362,  362,  362,  363,  364,  364,
      365,  366,  366,  366,  366,  366,  366,  366,  366,  366,

      366,  366,  366,  366,  366,  366,  366,  366,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  369,  115, 1395,
     1395, 1395, 1395,  115,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  117,  430,  201,
      478,  809,  201,  115,  478,  627,  627,  430,  115,  478,
      201,  155,  115,  478,  627,  627,  784,  583, 1395, 1395,

      115,  774,  598,  115,  594,  115,  377,  377,  377,  377,
      377,  377,  377,  377,  378,  380,  381,  382,  383,  384,
      385,  386,  387,  388,  389,  390,  391,  583,  392,  393,
      394,  395,  598,  143,  594, 1395, 1395,  128,  118,  118,
      118,  118,  118,  118,  119,  120,  120,  120,  120,  121,
      122,  122,  123,  124,  124,  125,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  398,  399,  400,  400,
      401,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  403,  403,  403,  403,  403,
      403,  404,  408,  408,  408,  408,  408,  408,  408,  408,

      408,  408,  408,  408,  408,  408,  408,  408,  409,  409,
      409,  409,  409,  410,  411,  411,  412,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  417,  417,  417,  417,  417,  417,  417,
      417,  418,  737,  145,  145,  145,  145,  145,  145,  145,
      145,  420,  420,  420,  420,  420,  420,  420,  420,  199,
      201,  421,  419,  148,  148,  148,  148,  148,  148,  148,
      148,  150,  150,  150,  150,  150,  150,  150,  150,  201,

      201,  201,  422,  727,  572,  573,  609,  616,  626,  199,
      423,  726,  419,   99,  424,  424,  424,  424,  424,  424,
      424,  424,  151,  690,  152,  152,  152,  152,  152,  152,
      152,  152,  422,  425,  572,  573,  609,  616,  626,  426,
      423,  426,  680,  153,  427,  427,  427,  427,  427,  427,
      427,  427,  428,  428,  428,  428,  428,  428,  428,  428,
     1395, 1395,  201,  425,  201,  429,  890,  428,  428,  428,
      428,  428,  428,  153,  431,  679,  593, 1395, 1395,  449,
      610,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449, 1395, 1395,  890,  428,  428,  428,

      428,  428,  428,  449,  673,  449,  593,  449,  449,  292,
      610, 1395, 1395, 1395, 1395, 1395, 1395,  432,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  463,  463,
      463,  463,  463,  464,  465,  465,  466,  201,  449,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470, 1145, 1145,  449,  173,  476,
      476,  476,  476,  476,  476,  476,  476,  477,  433,  434,
      435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
      173,  445,  446,  447,  448,  452,  453,  454,  454,  455,

      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  457,  457,  457,  457,  457,  457,
      458,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  201,  174,  174,
      174,  174,  174,  174,  175,  176,  176,  176,  176,  177,
      178,  178,  179,  180,  180,  181, 1395, 1395, 1395, 1395,
      174,  174,  174,  174,  174,  174,  175,  176,  176,  176,
      176,  177,  178,  178,  179,  180,  180,  181,  472,  472,

      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  479,  480,  481,  482,  483,  484,  485,  486,  487,
      488,  489,  490,  201,  491,  492,  493,  494,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  497,  498,
      499,  499,  500,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  502,  502,  502,
      502,  502,  502,  503,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,

      508,  508,  508,  508,  508,  509,  510,  510,  511,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  200,  537,  537,  537,  537,
      537,  538,  539,  539,  540,  201,  938,  627,  627,  627,
      627,  627,  200,  627,  201,  938, 1395, 1395,  201,  154,
     1395, 1395, 1395,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  541,

      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541, 1395, 1395,  199, 1395,
     1395,  156,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  292,  292,  292,  292,  292,  292,  292,  199,  208,
      209,  210,  211,  212,  213,  214,  215,  216,  217,  218,
      219,  533,  220,  221,  222,  223,  208,  209,  210,  211,
      212,  213,  214,  215,  216,  217,  218,  219,  523,  220,
      221,  222,  223,  157,  158,  938,  159,  160,  161,  162,
      163,  164,  165,  166,  938,  167,  168,  169,  170,  526,

      527,  528,  528,  529,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  531,  531,
      531,  531,  531,  531,  532,  201,  201,  201,  201,  201,
      515,  201,  550,  199,  201,  562,  563,  199,  504,  201,
      596,  603,  575,  201,  597,  551,  201,  552,  588,  576,
      604,  553,  577,  602,  578,  589,  599,  459,  615,  600,
      579,  623,  550,  199,  405,  562,  563,  199,  601,  201,
      596,  603,  575,  370,  597,  551,  611,  552,  588,  576,
      604,  553,  577,  602,  578,  589,  599,  201,  615,  600,
      579,  623,  612,  201,  201,  658,  605,  201,  601,  201,

      201,  613,  201,  201,  856,  606,  611,  199,  624,  607,
      608,  199,  614,  617,  620,  621,  199,  622,  618,  625,
      358,  854,  612,  315,  619,  303,  605,  294,  294,  304,
      304,  613,  291,  901,  856,  606,  288,  199,  624,  607,
      608,  199,  614,  617,  620,  621,  199,  622,  618,  625,
      659,  854,  628,  629,  619,  630,  631,  632,  633,  634,
      635,  636,  637,  901,  638,  639,  640,  641,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  199,  866,  646,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  332,
      332,  332,  332,  332, 1395,  332,  305,  305,  287,  653,

      653,  653,  653,  653,  653,  653,  182,  199,  866,  312,
      312,  660,  660,  660,  660,  660,  660,  661,  662,  662,
      662,  662,  663,  664,  664,  665,  666,  666,  667,  333,
      334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
      344,  114,  345,  346,  347,  348,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  683,  684,  685,  685,
      686,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  688,  688,  688,  688,  688,
      688,  689,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  694,  694,

      694,  694,  694,  695,  696,  696,  697,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,   99,
       99,   99,   99,   99,   99,   99,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  711,  379,  379,  379,  379,
      379, 1395,  379,   79,   79,  706,  706,  706,  706,  706,
      706,  706,  380,  381,  382,  383,  384,  385,  386,  387,

      388,  389,  390,  391,   78,  392,  393,  394,  395,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  317,
      317,  319,  319,  321,  321,  712,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  741,  741,  741,  741,  741,  742,  743,  743,
      744,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,   90,   90,  713,  713,  713,  713,
      713,  713,  714,  715,  715,  715,  715,  716,  717,  717,

      718,  719,  719,  720,  730,  731,  732,  732,  733,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  735,  735,  735,  735,  735,  735,  736,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  128,
      128,  128,  128,  128,  128,  128,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  417,  417,  417,  417,  417,
      417,  417,  417,  325,  325,  753,  753,  753,  753,  753,
      753,  753,   77,  199,  757,  758,  758,  758,  758,  758,
      758,  758,  758,  430,  430,  430,  430,  430, 1395,  430,

      760, 1395,  760,  861,  759,  761,  761,  761,  761,  761,
      761,  761,  761,  199,  757, 1395,  420,  420,  420,  420,
      420,  420,  420,  420,  763,  763,  763,  763,  763,  763,
      763,  763, 1395,  861,  759,  762,  327,  327, 1395,  765,
     1395,  765, 1395,  764,  766,  766,  766,  766,  766,  766,
      766,  766,  767, 1395,  767,  867,  199,  768,  768,  768,
      768,  768,  768,  768,  768,  762,  796,  796,  796,  796,
      796,  796,  796,  764,  424,  424,  424,  424,  424,  424,
      424,  424, 1395,  429, 1395,  867,  199, 1395,  891,  769,
      199,  769,  431,  425,  770,  770,  770,  770,  770,  770,

      770,  770,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  891, 1395,
      199,  329,  329,  425,  771,  771,  771,  771,  771,  771,
      771,  771,  350,  350, 1395,  432, 1395,  199,  880,  771,
      771,  771,  771,  771,  771,  772,  772,  772,  772,  772,
      772,  772,  772,  155,  155,  155,  155,  155,  155,  155,
      772,  772,  772,  772,  772,  772,  429,  199,  880,  771,
      771,  771,  771,  771,  771,  431,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  199,  359,  359, 1395,
      772,  772,  772,  772,  772,  772,  433,  434,  435,  436,

      437,  438,  439,  440,  441,  442,  443,  444, 1395,  445,
      446,  447,  448, 1395,  199, 1395,  199,  773,  432,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  788,  788,  788,  788,  788,  789,  790,  790,
      791,  773,  933,  773,  199,  773,  773,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  933,  199,  894, 1395,  773,  360,  360,  433,
      434,  435,  436,  437,  438,  439,  440,  441,  442,  443,
      444, 1395,  445,  446,  447,  448,  478,  478,  478,  478,

      478, 1395,  478,  199,  894,  773,  777,  778,  779,  779,
      780,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  781,  781,  782,  782,  782,  782,  782,
      782,  783,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  800,  800,  800,
      800,  800,  800,  800,  479,  480,  481,  482,  483,  484,

      485,  486,  487,  488,  489,  490, 1395,  491,  492,  493,
      494,  813,  814,  815,  815,  816,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      818,  818,  818,  818,  818,  818,  819,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  824,  824,  824,  824,  824,  825,  826,
      826,  827,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  183,  183,  183,  183,  183,  183,
      183,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      367,  367,  199,  895,  841,  841,  842,  200,  115,  115,
      836,  836,  836,  836,  836,  836,  836,  201,  842,  842,
      842,  842,  842,  842,  200,  843,  843,  843,  843,  843,
      843,  843,  199,  895,  201,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  199,  199,  199,  199,  199,  199,
      199,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      199,  863,  858,  199,  199,  199,  898,  199,  855, 1395,

      847,  847,  847,  847,  847,  847,  847,  859,  860,  869,
      969,  969,  969,  969,  969,  970,  971,  971,  972,  200,
      199,  863,  858,  199,  199,  199,  898,  199,  855,  201,
      332,  332,  332,  332,  332,  332,  332,  859,  860,  869,
      851,  208,  209,  210,  211,  212,  213,  214,  215,  216,
      217,  218,  219, 1395,  220,  221,  222,  223,  208,  209,
      210,  211,  212,  213,  214,  215,  216,  217,  218,  219,
      851,  220,  221,  222,  223, 1395,  199,  199,  864,  865,
      199,  199,  199,  199,  857,  200,  199,  862,  199,  887,
     1395,  870,  875,  372,  372,  201,  987,  987,  987,  987,

      987,  987,  987,  987,  988,  852,  199,  199,  864,  865,
      199,  199,  199,  199,  857,  199,  199,  862,  199,  887,
      878,  870,  875,  208,  209,  210,  211,  212,  213,  214,
      215,  216,  217,  218,  219,  852,  220,  221,  222,  223,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  884,
      878,  911,  874,  889,  199,  868,  871,  872,  876,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  956, 1395,
      199,  199,  199,  199,  199, 1395,  199,  199,  199,  884,
     1395,  911,  874,  889,  199,  868,  871,  872,  876,  208,
      209,  210,  211,  212,  213,  214,  215,  216,  217,  218,

      219,  199,  220,  221,  222,  223,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  873,  882,  199,  881,
      879,  199,  877,  883,  199,  886,  897,  885,  888,  892,
      893,  199,  896,  199,  900,  899,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  873,  882,  199,  881,
      879,  199,  877,  883,  199,  886,  897,  885,  888,  892,
      893,  199,  896,  199,  900,  899,  199,  903,  199,  199,
      199,  199,  907,  199, 1353,  906,  904,  902,  199,  905,
      199,  910,  199,  908,  909,  374,  374, 1395, 1234, 1395,
      199,  199,  199,  917, 1235,  912,  199,  903,  199,  199,

      199,  199,  907,  199,  926,  906,  904,  902,  199,  905,
      199,  910,  199,  908,  909,  913,  914,  915,  199,  916,
      199,  939,  199,  917,  199,  912,  919,  920,  199,  921,
      922,  918,  199,  199,  926,  199,  927,  923,  928,  199,
      929,  931,  199,  924,  930,  925, 1395,  199,  199,  199,
     1395,  936,  932,  199,  199,  199,  919,  920,  199,  921,
      922,  918,  199,  199,  199,  199,  927,  923,  928,  199,
      929,  931,  199,  924,  930,  925,  199,  199,  199,  199,
      934,  936,  932,  199,  977,  199,  199,  199,  199,  935,
      199,  937, 1051,  976,  199,  981,  981,  981,  981,  981,

      981,  981,  981,  981,  981, 1230,  199, 1052,  199, 1395,
      934,  376,  376, 1395, 1231, 1395,  199,  199,  199,  935,
      199,  937, 1051, 1232, 1395,  940,  941,  942,  943,  944,
      945,  946,  947,  948,  949,  950,  951, 1052,  952,  953,
      954,  955,  958,  959,  960,  960,  961,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  963,  963,  963,  963,  963,  963,  964,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,

      973,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      199,  199,  658, 1395,  657,  397,  397,  991,  991,  657,
      993,  993,  993,  993,  993,  993,  993,  993,  993, 1395,
      980,  992,  992,  992,  992,  992,  992, 1395, 1053,  992,
      199,  199,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  993,  993,
      993,  993,  993,  993,  993, 1395,  314,  659, 1053,  657,
     1352,  406,  406, 1395,  657,  407,  407, 1395,  657, 1231,
      414,  414,  451,  451, 1395, 1395,  657, 1395, 1232,  657,

     1395,  657, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002,  978,  979,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,   81,  460,  460,  461,  461,  468,  468,  660,  660,
      660,  660,  660,  660,  661,  662,  662,  662,  662,  663,
      664,  664,  665,  666,  666,  667, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395,   91,   91,   91,   91,   91,   91,
       92,   93,   93,   93,   93,   94,   95,   95,   96,   97,
       97,   98,   82,   82,   82,   82,   82,   82,   83,   84,

       84,   84,   84,   85,   86,   86,   87,   88,   88,   89,
      333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
      343,  344, 1395,  345,  346,  347,  348,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  710,  711,  171,  171,
     1395,  710,  471,  471,  473,  473,  997,  997,  997,  997,
      997,  997,  997,  333,  334,  335,  336,  337,  338,  339,
      340,  341,  342,  343,  344, 1001,  345,  346,  347,  348,
      333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
      343,  344, 1054,  345,  346,  347,  348,  712, 1011, 1011,
     1395,  710,  475,  475,  496,  496,  710,  505,  505, 1395,

      710, 1395, 1012, 1012, 1012, 1012, 1012, 1012,  710,  506,
      506,  710, 1054,  710, 1395, 1395, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1009,  379,  379,  379,  379,  379,  379,  379,  713,  713,
      713,  713,  713,  713,  714,  715,  715,  715,  715,  716,
      717,  717,  718,  719,  719,  720,  369, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1006, 1006, 1006, 1006, 1006, 1006,

     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006,  513,  513,  523,  523, 1012,  117,  380,  381,  382,
      383,  384,  385,  386,  387,  388,  389,  390,  391, 1055,
      392,  393,  394,  395, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
      761,  761,  761,  761,  761,  761,  761,  761, 1395, 1055,
     1017, 1017, 1017, 1017, 1017, 1017, 1017,  761,  761,  761,
      761,  761,  761,  761,  761,  525,  525,  118,  118,  118,
      118,  118,  118,  119,  120,  120,  120,  120,  121,  122,
      122,  123,  124,  124,  125,  380,  381,  382,  383,  384,

      385,  386,  387,  388,  389,  390,  391, 1395,  392,  393,
      394,  395,  380,  381,  382,  383,  384,  385,  386,  387,
      388,  389,  390,  391, 1395,  392,  393,  394,  395, 1021,
     1056, 1021,  534,  534, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022,  758,  758,  758,  758,  758,  758,  758,  758,
      430,  430,  430,  430,  430,  430,  430, 1023, 1395, 1023,
     1056,  759, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1025, 1057, 1025,  535,  535, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026,  763,  763,  763,  763,  763,  763,  763,
      763,  759,  542,  542,  292,  292, 1395, 1058, 1027, 1059,

     1027, 1057,  764, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766, 1058, 1395, 1059,
      644,  644,  764,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  429, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029,  431, 1030, 1030, 1395, 1031,  645,
      645, 1029, 1029, 1029, 1029, 1029, 1029,  429, 1395, 1031,
     1031, 1031, 1031, 1031, 1031, 1395,  431, 1032, 1032, 1032,

     1032, 1032, 1032, 1032,  478,  478,  478,  478,  478,  478,
      478, 1029, 1029, 1029, 1029, 1029, 1029,  432, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035,  173, 1060, 1061,  432,
     1041, 1041, 1062, 1063,  429, 1064, 1036, 1036, 1036, 1036,
     1036, 1036, 1036,  431, 1042, 1042, 1042, 1042, 1042, 1042,
     1065,  650,  650,  651,  651,  429, 1395, 1060, 1061,  652,
      652, 1395, 1062, 1063,  431, 1064,  653,  653,  433,  434,
      435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
     1065,  445,  446,  447,  448, 1066,  432,  654,  654, 1042,

      433,  434,  435,  436,  437,  438,  439,  440,  441,  442,
      443,  444, 1395,  445,  446,  447,  448,  432, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1066,  174,  174,  174,  174,
      174,  174,  175,  176,  176,  176,  176,  177,  178,  178,
      179,  180,  180,  181, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043,  655,  655,  656,  656,  433,  434,  435,
      436,  437,  438,  439,  440,  441,  442,  443,  444, 1395,
      445,  446,  447,  448,   79,   79, 1395, 1067,  433,  434,
      435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
     1395,  445,  446,  447,  448,  479,  480,  481,  482,  483,

      484,  485,  486,  487,  488,  489,  490, 1067,  491,  492,
      493,  494, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
     1046,  938,  938,  938,  938,  938, 1395,  938,  668,  668,
     1395, 1047, 1047, 1047, 1047, 1047, 1047, 1047,  479,  480,
      481,  482,  483,  484,  485,  486,  487,  488,  489,  490,
     1068,  491,  492,  493,  494,  479,  480,  481,  482,  483,
      484,  485,  486,  487,  488,  489,  490,  200,  491,  492,
      493,  494, 1069, 1070, 1071, 1072, 1073,  201, 1074, 1075,
     1068, 1076, 1077, 1078,  200, 1079, 1080, 1081, 1082, 1083,
     1084, 1085, 1086, 1087,  201, 1088, 1089, 1090, 1091, 1092,

     1093, 1094, 1069, 1070, 1071, 1072, 1073, 1095, 1074, 1075,
     1096, 1076, 1077, 1078, 1097, 1079, 1080, 1081, 1082, 1083,
     1084, 1085, 1086, 1087, 1098, 1088, 1089, 1090, 1091, 1092,
     1093, 1094, 1099, 1100, 1101, 1105, 1106, 1095, 1107, 1108,
     1096,  669,  669, 1395, 1097,  939, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1109, 1098,  627,  627,  627,  627,  627,
      627,  627, 1099, 1100, 1101, 1105, 1106,  939, 1107, 1108,
     1110,  208,  209,  210,  211,  212,  213,  214,  215,  216,
      217,  218,  219, 1109,  220,  221,  222,  223,  208,  209,
      210,  211,  212,  213,  214,  215,  216,  217,  218,  219,

     1110,  220,  221,  222,  223, 1111, 1113, 1114, 1115, 1112,
     1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1125,
     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,  670,  670,
     1395, 1171,  671,  671, 1395, 1111, 1113, 1114, 1115, 1112,
     1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1395,  940,
      941,  942,  943,  944,  945,  946,  947,  948,  949,  950,
      951, 1171,  952,  953,  954,  955,  672,  672,   90,   90,
     1395,  940,  941,  942,  943,  944,  945,  946,  947,  948,
      949,  950,  951, 1395,  952,  953,  954,  955, 1127, 1128,
     1129, 1129, 1130, 1131, 1131, 1131, 1131, 1131, 1131, 1131,

     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1132, 1132, 1132,
     1132, 1132, 1132, 1133, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1138, 1138, 1138, 1138, 1138, 1139, 1140, 1140, 1141, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149,  674,  674, 1395, 1172,  675,  675, 1395,

      200,  676,  676, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
      201,  677,  677,  678,  678, 1395, 1173,  200, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1172,  201,   91,   91,
       91,   91,   91,   91,   92,   93,   93,   93,   93,   94,
       95,   95,   96,   97,   97,   98, 1173, 1395,  314,  680,
      680, 1154,  333,  334,  335,  336,  337,  338,  339,  340,
      341,  342,  343,  344, 1395,  345,  346,  347,  348,  333,
      334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
      344, 1395,  345,  346,  347,  348,  380,  381,  382,  383,
      384,  385,  386,  387,  388,  389,  390,  391, 1395,  392,

      393,  394,  395,   81,  208,  209,  210,  211,  212,  213,
      214,  215,  216,  217,  218,  219, 1395,  220,  221,  222,
      223,  208,  209,  210,  211,  212,  213,  214,  215,  216,
      217,  218,  219,  369,  220,  221,  222,  223,  526,  527,
      528,  528,  529,  530,  530,  530,  530,  530,  530,  530,
     1155,  530,  530,  530,  530,  530,  530,  531,  531,  531,
      531,  531,  531,  532,   82,   82,   82,   82,   82,   82,
       83,   84,   84,   84,   84,   85,   86,   86,   87,   88,
       88,   89, 1395,  117,  380,  381,  382,  383,  384,  385,
      386,  387,  388,  389,  390,  391, 1395,  392,  393,  394,

      395, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026,  682,  682, 1395,  118,  118,  118,  118,  118,  118,
      119,  120,  120,  120,  120,  121,  122,  122,  123,  124,
      124,  125, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,  429,  173,
      938,  938,  938,  938,  938,  938,  938,  431,  691,  691,
      692,  692, 1395, 1174, 1175,  429, 1176, 1177, 1178, 1179,

     1395, 1180, 1395, 1181,  431,  479,  480,  481,  482,  483,
      484,  485,  486,  487,  488,  489,  490, 1395,  491,  492,
      493,  494,  200, 1174, 1175, 1182, 1176, 1177, 1178, 1179,
      432, 1180,  201, 1181, 1183,  479,  480,  481,  482,  483,
      484,  485,  486,  487,  488,  489,  490,  432,  491,  492,
      493,  494,  200,  699,  699, 1182, 1395, 1185, 1186, 1187,
     1188, 1395,  201, 1395, 1183,   99,   99,  701,  701,  174,
      174,  174,  174,  174,  174,  175,  176,  176,  176,  176,
      177,  178,  178,  179,  180,  180,  181, 1185, 1186, 1187,
     1188,  433,  434,  435,  436,  437,  438,  439,  440,  441,

      442,  443,  444, 1395,  445,  446,  447,  448,  433,  434,
      435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
     1189,  445,  446,  447,  448, 1190,  208,  209,  210,  211,
      212,  213,  214,  215,  216,  217,  218,  219, 1191,  220,
      221,  222,  223, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
     1189, 1199, 1200, 1201, 1202, 1190,  208,  209,  210,  211,
      212,  213,  214,  215,  216,  217,  218,  219, 1191,  220,
      221,  222,  223, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
     1203, 1199, 1200, 1201, 1202, 1207, 1208, 1209, 1210, 1211,
     1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219,  939, 1222,

     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,  199,  199,
     1203, 1221,  702,  702, 1395, 1207, 1208, 1209, 1210, 1211,
     1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1220,
     1222, 1222, 1222, 1222, 1222, 1222, 1222,  939,  199,  199,
      703,  703, 1221, 1221, 1221, 1221, 1221, 1221, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225,  939, 1243, 1243,
     1243, 1243, 1245,  199, 1244, 1246,  199, 1226, 1226, 1226,
     1226, 1226, 1226, 1226,  200,  704,  704,  705,  705,  658,
      706,  706,  707,  707,  201,  708,  708,  709,  709,  199,
      199, 1248, 1245,  199,  199, 1246,  199,  199,  199,  199,

     1240,  199,  940,  941,  942,  943,  944,  945,  946,  947,
      948,  949,  950,  951, 1395,  952,  953,  954,  955,  199,
      199, 1248, 1395,  711,  199, 1247, 1395,  199,  199,  199,
     1240,  199,  115,  115,  659,  721,  721,  722,  722,  723,
      723,  940,  941,  942,  943,  944,  945,  946,  947,  948,
      949,  950,  951, 1395,  952,  953,  954,  955,  724,  724,
      199,  940,  941,  942,  943,  944,  945,  946,  947,  948,
      949,  950,  951,  712,  952,  953,  954,  955,  208,  209,
      210,  211,  212,  213,  214,  215,  216,  217,  218,  219,
      199,  220,  221,  222,  223,  660,  660,  660,  660,  660,

      660,  661,  662,  662,  662,  662,  663,  664,  664,  665,
      666,  666,  667,  200,  725,  725,  727,  727, 1395, 1249,
     1249, 1249, 1249,  201, 1395, 1250,  729,  729,  738,  738,
      199, 1395, 1238, 1395,  713,  713,  713,  713,  713,  713,
      714,  715,  715,  715,  715,  716,  717,  717,  718,  719,
      719,  720,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199, 1238,  199, 1251, 1257, 1241,  199,  199, 1239,
     1242, 1252, 1253,  199, 1258, 1254, 1255,  199, 1256, 1259,
     1395,  199,  199,  199,  199,  199,  199,  199,  199,  199,
     1395,  199, 1395,  199, 1251, 1257, 1241,  199,  199, 1239,

     1242, 1252, 1253,  199, 1258, 1254, 1255,  199, 1256, 1259,
      199,  199, 1263,  199,  199,  199,  199,  208,  209,  210,
      211,  212,  213,  214,  215,  216,  217,  218,  219, 1260,
      220,  221,  222,  223,  199,  199,  199,  199, 1264,  199,
      199,  199, 1263,  199,  199,  199,  199,  199,  199, 1261,
      199, 1262, 1266, 1265, 1267,  199, 1269,  199,  199, 1260,
      199, 1268,  199,  199,  199,  199,  199,  199, 1264,  199,
      199,  199, 1271, 1270,  199,  199,  199,  199,  199, 1261,
      199, 1262, 1266, 1265, 1267,  199, 1269,  199,  199,  658,
      199, 1268,  199,  199,  199, 1275, 1274,  199,  199, 1277,

      199,  199, 1271, 1270,  199,  199,  199,  199,  199, 1289,
      199, 1291,  711, 1276, 1395, 1243, 1243, 1243, 1243,  199,
     1305, 1244,  739,  739,  199, 1275, 1274,  199,  199, 1277,
      199,  199,  746,  746, 1303, 1290,  199,  199,  199, 1289,
      199, 1291, 1292, 1276,  659,  199,  199,  199,  199,  199,
     1305, 1304, 1278,  978,  199,  199,  199, 1306,  199,  199,
      199,  199,  712, 1272, 1303, 1290,  199,  979, 1307, 1273,
     1279, 1308, 1292,  199,  199,  199,  199,  199,  199,  128,
      128, 1304, 1278, 1395,  199,  199,  199, 1306,  199,  199,
     1395,  199,  748,  748,  749,  749,  750,  750, 1307, 1395,

     1279, 1308, 1395,  199,  199,  660,  660,  660,  660,  660,
      660,  661,  662,  662,  662,  662,  663,  664,  664,  665,
      666,  666,  667,  713,  713,  713,  713,  713,  713,  714,
      715,  715,  715,  715,  716,  717,  717,  718,  719,  719,
      720, 1281, 1281, 1281, 1281, 1281, 1281, 1282, 1283, 1283,
     1283, 1283, 1284, 1285, 1285, 1286, 1287, 1287, 1288, 1249,
     1249, 1249, 1249,  199,  199, 1250, 1295, 1295, 1295, 1295,
     1295, 1295, 1296, 1297, 1297, 1297, 1297, 1298, 1299, 1299,
     1300, 1301, 1301, 1302,  199,  199,  199,  199,  199, 1312,
     1313,  199,  199,  199,  199, 1317, 1293, 1318, 1309, 1310,

      199,  199, 1311, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1395,  199,  199,  199,  199,  199, 1312,
     1313,  199,  199,  751,  751, 1317, 1293, 1318, 1309, 1310,
      199,  199, 1311,  526,  527,  528,  528,  529,  530,  530,
      530,  530,  530,  530,  530, 1314,  530,  530,  530,  530,
      530,  530,  531,  531,  531,  531,  531,  531,  532,  199,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1330,  199,
     1333,  199, 1346,  199,  199, 1316,  752,  752,  753,  753,
     1345, 1331,  754,  754,  755,  755,  756,  756, 1395,  199,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1344,  199,

     1333,  199, 1346,  199,  199, 1316, 1319, 1243, 1243, 1319,
     1345, 1331, 1320, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1337,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,  199,
      199,  199, 1349, 1321, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1322,  199,  199,  199, 1351,  199, 1347, 1354,  199,
      199,  199, 1349, 1321, 1332, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1322,  199,  199,  199, 1351,  199, 1347, 1354,  774,

      774,  776,  776, 1395, 1332, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1355, 1356, 1357, 1395, 1365, 1281, 1281, 1281,
     1281, 1281, 1281, 1282, 1283, 1283, 1283, 1283, 1284, 1285,
     1285, 1286, 1287, 1287, 1288, 1334, 1249, 1249, 1334,  199,
      199, 1335, 1355, 1356, 1357,  199, 1365, 1366, 1367,  199,
      199,  199,  199, 1348, 1374, 1350,  199,  199,  199, 1364,
      199,  199, 1375, 1376, 1280, 1395, 1382, 1383,  199,  199,
      199, 1381, 1336,  199, 1386,  199, 1280, 1366, 1367,  199,
      199,  199,  199, 1348, 1374, 1350,  199,  199,  199, 1364,

      199,  199, 1375, 1376, 1280, 1380, 1382, 1383,  199,  199,
     1280, 1381, 1336,  199, 1386, 1387, 1280, 1391,  199, 1280,
      199, 1280, 1388, 1392, 1385,  199, 1280,  199,  785,  785,
      786,  786,  793,  793, 1395, 1389,  155,  155, 1395,  199,
     1280,  795,  795,  796,  796, 1387, 1395, 1391,  199, 1280,
      199, 1280, 1388, 1392, 1385,  199, 1280,  199,  797,  797,
      798,  798, 1395, 1272, 1273, 1389, 1295, 1295, 1295, 1295,
     1295, 1295, 1296, 1297, 1297, 1297, 1297, 1298, 1299, 1299,
     1300, 1301, 1301, 1302, 1334, 1249, 1249, 1334,  199,  199,
     1335, 1395,  199,  799,  799,  800,  800, 1395, 1394,  801,

      801,  802,  802, 1393, 1390,  803,  803,  171,  171,  804,
      804,  805,  805,  806,  806,  807,  807, 1395,  199,  199,
     1395, 1336,  199,  808,  808,  810,  810, 1395, 1394,  812,
      812,  821,  821, 1393, 1390,  822,  822,  829,  829,  183,
      183,  831,  831,  832,  832,  833,  833,  834,  834,  835,
      835, 1336,  836,  836,  837,  837,  838,  838,  839,  839,
      199,  199,  841,  841,  843,  843,  844,  844,  845,  845,
      846,  846,  847,  847,  848,  848,  849,  849,  850,  850,
      957,  957,  966,  966,  967,  967,  974,  974,  292,  292,
      657,  657,  982,  982,  984,  984,  986,  986,   79,   79,

      989,  989,   90,   90, 1395, 1295, 1295, 1295, 1295, 1295,
     1295, 1296, 1297, 1297, 1297, 1297, 1298, 1299, 1299, 1300,
     1301, 1301, 1302, 1319, 1243, 1243, 1319,  990,  990, 1320,
      332,  332,  991,  991,  993,  993,  994,  994,  995,  995,
      996,  996,  997,  997,  998,  998,  999,  999, 1000, 1000,
       99,   99,  710,  710, 1003, 1003, 1005, 1005, 1007, 1007,
     1321,  115,  115, 1010, 1010,  379,  379, 1011, 1011, 1013,
     1013, 1014, 1014, 1015, 1015, 1377, 1016, 1016, 1322, 1017,
     1017, 1018, 1018, 1019, 1019, 1020, 1020,  128,  128, 1395,
     1321,  430,  430, 1030, 1030, 1032, 1032, 1033, 1033, 1034,

     1034, 1035, 1035, 1036, 1036, 1377, 1037, 1037, 1322, 1038,
     1038, 1039, 1039,  155,  155,  171,  171, 1040, 1040,  478,
      478, 1041, 1041, 1043, 1043, 1044, 1044, 1045, 1045, 1046,
     1046, 1047, 1047, 1048, 1048, 1049, 1049, 1050, 1050,  183,
      183,  199,  199, 1395, 1281, 1281, 1281, 1281, 1281, 1281,
     1282, 1283, 1283, 1283, 1283, 1284, 1285, 1285, 1286, 1287,
     1287, 1288, 1319, 1243, 1243, 1319, 1124, 1124, 1320, 1126,
     1126, 1135, 1135, 1136, 1136, 1143, 1143,  627,  627, 1145,
     1145, 1146, 1146, 1147, 1147, 1148, 1148, 1149, 1149, 1150,
     1150, 1151, 1151, 1152, 1152, 1153, 1153,  657,  657, 1321,

     1378, 1158, 1158, 1159, 1159, 1160, 1160, 1161, 1161, 1162,
     1162,  332,  332,  710,  710, 1165, 1165, 1322, 1166, 1166,
     1167, 1167, 1168, 1168, 1169, 1169,  379,  379, 1395, 1321,
     1378,  430,  430,  478,  478,  938,  938, 1220, 1220, 1222,
     1222, 1223, 1223, 1224, 1224, 1225, 1225, 1322, 1226, 1226,
     1227, 1227, 1228, 1228, 1229, 1229,  627,  627,  199,  199,
      657,  657, 1236, 1236,  710,  710, 1237, 1237,  938,  938,
     1280, 1280, 1324, 1324, 1326, 1326, 1328, 1328, 1294, 1294,
     1338, 1338, 1395, 1281, 1281, 1281, 1281, 1281, 1281, 1282,
     1283, 1283, 1283, 1283, 1284, 1285, 1285, 1286, 1287, 1287,

     1288,   79, 1395,   79,   79,   79,   79,   79,   79,   79,
       79,   79, 1340, 1340, 1395,   79,   79,   79,   90, 1395,
       90,   90,   90,   90,   90,   90,   90,   90,   90, 1342,
     1342, 1395,   90,   90,   90,   99, 1395,   99, 1395,   99,
      199,  199, 1358, 1358,   99,  115, 1395,  115,  115,  115,
      115,  115,  115,  115,  115,  115, 1359, 1359, 1395,  115,
      115,  115,  128, 1395,  128, 1395,  128, 1360, 1360, 1361,
     1361,  128,  155, 1362, 1362,  155,  155,  155,  155,  155,
     1368, 1368, 1369, 1369,  155,  171,  171,  171,  171,  171,
      171,  171, 1395,  171, 1370, 1370, 1395,  171,  171,  171,

      183, 1395,  183, 1395,  183, 1371, 1371, 1372, 1372,  183,
       79, 1395,   79,   79,   79,   79,   79,   79,   79,   79,
       79, 1280, 1280, 1395,   79,   79,   79,   90, 1395,   90,
       90,   90,   90,   90,   90,   90,   90,   90, 1379, 1379,
     1395,   90,   90,   90,  332, 1395,  332, 1395,  332, 1384,
     1384, 1395,  332,  332,  115, 1395,  115,  115,  115,  115,
      115,  115,  115,  115,  115, 1395, 1395, 1395,  115,  115,
      115,  379, 1395,  379, 1395,  379, 1395, 1395, 1395,  379,
      379,  430,  430,  430,  430,  430,  430,  430,  430, 1395,
     1395, 1395,  430,  430,  171,  171,  171,  171,  171,  171,

      171, 1395,  171, 1395, 1395, 1395,  171,  171,  171,  478,
     1395,  478, 1395,  478, 1395, 1395, 1395,  478,  478,  199,
      199,  199,  199,  199, 1395,  199, 1395, 1395, 1395,  199,
      199,  155, 1395, 1395,  155,  155,  155,  155,  155, 1395,
     1395, 1395, 1395,  155,  627, 1395,  627, 1395,  627, 1395,
     1395, 1395, 1395,  627,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657, 1395, 1395, 1395,  657,  657,
      657,  332, 1395,  332, 1395,  332, 1395, 1395, 1395,  332,
      332,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710, 1395, 1395, 1395,  710,  710,  710,  379, 1395,

      379, 1395,  379, 1395, 1395, 1395,  379,  379,  430,  430,
      430,  430,  430,  430,  430,  430, 1395, 1395, 1395,  430,
      430,  478, 1395,  478, 1395,  478, 1395, 1395, 1395,  478,
      478,  199,  199,  199,  199,  199, 1395,  199, 1395, 1395,
     1395,  199,  199,  199,  199,  199,  199,  199, 1395,  199,
     1395, 1395, 1395,  199,  199,  938,  938,  938, 1395,  938,
     1395,  938, 1395, 1395, 1395,  938,  938,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657, 1395, 1395,
     1395,  657,  657,  657,   79, 1395,   79,   79,   79,   79,
       79,   79,   79,   79,   79, 1395, 1395, 1395,   79,   79,

       79,   90, 1395,   90,   90,   90,   90,   90,   90,   90,
       90,   90, 1395, 1395, 1395,   90,   90,   90,  332, 1395,
      332, 1395,  332, 1395, 1395, 1395,  332,  332,  332, 1395,
      332, 1395,  332, 1395, 1395, 1395,  332,  332,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710, 1395,
     1395, 1395,  710,  710,  710,  115, 1395,  115,  115,  115,
      115,  115,  115,  115,  115,  115, 1395, 1395, 1395,  115,
      115,  115,  379, 1395,  379, 1395,  379, 1395, 1395, 1395,
      379,  379,  379, 1395,  379, 1395,  379, 1395, 1395, 1395,
      379,  379,  430,  430,  430,  430,  430,  430,  430,  430,

     1395, 1395, 1395,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430, 1395, 1395, 1395,  430,  430,  171,  171,
      171,  171,  171,  171,  171, 1395,  171, 1395, 1395, 1395,
      171,  171,  171,  478, 1395,  478, 1395,  478, 1395, 1395,
     1395,  478,  478,  478, 1395,  478, 1395,  478, 1395, 1395,
     1395,  478,  478,  840, 1395,  840, 1395,  840,  199,  199,
      199,  199,  199, 1395,  199, 1395, 1395, 1395,  199,  199,
      938,  938,  938, 1395,  938, 1395,  938, 1395, 1395, 1395,
      938,  938,  199,  199,  199,  199,  199, 1395,  199, 1395,
     1395, 1395,  199,  199,  657,  657,  657,  657,  657,  657,

      657,  657,  657, 1395,  657,   79, 1395,   79,   79,   79,
       79,   79,   79,   79,   79,   79, 1395, 1395, 1395,   79,
       79,   79,   90, 1395,   90,   90,   90,   90,   90,   90,
       90,   90,   90, 1395, 1395, 1395,   90,   90,   90,  332,
     1395,  332, 1395,  332, 1395, 1395, 1395,  332,  332,  710,
      710,  710,  710,  710,  710,  710,  710,  710, 1395,  710,
      115, 1395,  115,  115,  115,  115,  115,  115,  115,  115,
      115, 1395, 1395, 1395,  115,  115,  115,  379, 1395,  379,
     1395,  379, 1395, 1395, 1395,  379,  379,  430,  430,  430,
      430,  430,  430,  430,  430, 1395, 1395, 1395,  430,  430,

      171,  171,  171,  171,  171,  171,  171, 1395,  171, 1395,
     1395, 1395,  171,  171,  171,  478, 1395,  478, 1395,  478,
     1395, 1395, 1395,  478,  478,  199,  199,  199,  199,  199,
     1395,  199, 1395, 1395, 1395,  199,  199,  938,  938,  938,
     1395,  938, 1395,  938, 1395, 1395, 1395,  938,  938,  938,
      938,  938, 1395,  938, 1395,  938, 1395, 1395, 1395,  938,
      938,  199,  199,  199,  199,  199, 1395,  199, 1395, 1395,
     1395,  199,  199,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657, 1395, 1395, 1395,  657,  657,  657,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,

      710, 1395, 1395, 1395,  710,  710,  710, 1280, 1395, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1395, 1395,
     1395, 1280, 1280, 1280, 1294, 1395, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1395, 1395, 1395, 1294, 1294,
     1294, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1395, 1395, 1395, 1280, 1280, 1280,    3, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,

     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395

    } ;

static yyconst flex_int16_t yy_chk[8100] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        5,    9, 1666,    5,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   11,   11,   13,   11,   11,   11,   11,   11,
       11,   11,   11, 1582,   11,   11,   11,   11,   14,   14,
       14,   14,   20,   20,   20,   20,   20,   20,   20,   20,
       14,  143, 1552,  143,   16,   16,    9,   16,   16,   16,

       16,   16,   16,   16,   16, 1529,   16,   16,   16,   16,
      295,  295,   17,   17,   13,   17,   17,   17,   17,   17,
       17,   17,   17,   19,   19, 1512,   19,   19,   19,   19,
       19,   19,   19,   19,   25,   25,   76, 1488,   19,   76,
       28,   28,   23,   28,   28,   28,   28,   28,   28,   28,
       28, 1457,   28,   28,   28,   28, 1449,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   22,   23,   22,   22,   22,   22,   22,

       22,   22,   22,   63,   65, 1438,   52,   52,   52,   52,
     1432,  101,   63,   65,   22,   64,   64,   64,   64,   64,
      101,   64,  310,  310, 1421,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,  229,   22,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,  205,   23,   23,  229,   23,
       23,   23,   23,   23,   23,   23,   23,   52,   23,   23,
       23,   23,   30,   30,  207,   30,   30,   30,   30,   30,
       30,   30,   30,   30, 1405,  205,  254,  207,  229,  254,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,  205,  290,  207, 1404,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   72,   72,   72,   72,   72,
       72,   72,   72,   72,  102,  102,  102,  102,  102,   36,
      102,  103,  126,  126,  126,  126,   36,  130,  289,   36,
      103,   36,  290, 1568,  126, 1568,  130,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   36,
       30,   30,   30,   30,   31,   31,   36,   31, 1344,   36,

      132,   36,   31,   39, 1330,   31,  202,   31,   31,  132,
       39,   31,  158,   39,   31,   39,  289,   31, 1273,  160,
      185,  158,  187, 1134,   31,   31, 1104,   31,  160,  185,
      202,  187,   31,   39,  204,   31,  238,   31,   31,  203,
       39,   31,   32,   39,   31,   39,   32,   31,  210,  203,
       32,  238,  204,   32,   44,   32,   32,  210,   32,   33,
      202,   44,  213,   33,   44,   32,   44,   33, 1103,  335,
       33,  213,   32,   33,  224,   33,   32,  253,  335,  203,
       32,  238,  204,   32,   44,   32,   32,  226,   32,   33,
     1102,   44,   34,   33,   44,   32,   44,   33,  224,   34,

       33,   34,   34,   33,   34,   33,  253,   35,  226,   37,
       34,   35, 1070,   37,   35,  338,  227,   35,  206,   35,
       37,  235,   34,   37,  338,   37,  225,  206,  224,   34,
      239,   34,   34, 1009,   34,  206,  253,   35,  226,   37,
       34,   35,  227,   37,   35,  235,  225,   35,  239,   35,
       37,   38,   38,   37,   40,   37,   40,  206,   38,  244,
       38,   38,   40,   38,   38,  206,   41,   40,   40,   41,
       41, 1001,  227,  988,   41,  235,  225,   40,  239,   41,
       41,   38,   38, 1454,   40,  244,   40, 1454,   38,   41,
       38,   38,   40,   38,   38,  262,   41,   40,   40,   41,

       41,  243,  980,   42,   41,  262,  236,   40,  979,   41,
       41,   42,  382,   43,   43,  244,   42,   42,   45,   41,
       43,  382,   45,   43,   43,   43,   42,  236,  243,   45,
      351,  351,   45,   42,   45,  262,  131,  131,  131,  131,
      131,   42,  131,   43,   43,  965,   42,   42,   45,  230,
       43,  249,   45,   43,   43,   43,   42,  236,  243,   45,
      230,   46,   45,  232,   45,   46,   47,  240,   46,   46,
       47,  249,   46,   47,  232,   46,   47,   46,   47,   46,
       46,  159,  159,  159,  159,  159,   47,  159,  240,  233,
      230,   46,  365,  365,  949,   46,   47,  940,   46,   46,

       47,  249,   46,   47,  232,   46,   47,   46,   47,   46,
       46,   48,  247,   48,  233,  385,   47,  241,  240,  233,
       48,  251,   48,   48,  385,   48,   48,  247,   48,  300,
      250,   49,  916,  300, 1156,   49,  915,  250,  241,  300,
      251,   48,   49,   48,  233,   49,  914,   49, 1156,  233,
       48,  840,   48,   48, 1156,   48,   48,  247,   48,   50,
      255,   49,   50,   50,  234,   49,   50,  250,  241,   50,
      251,   50,   49,   51,   57,   49,  234,   49,   57,  255,
       51,   57,  234,   51,   57,   51,   57,  820,  234,   50,
      398,  398,   50,   50,  784,  259,   50,  737,  242,   50,

       57,   50,  256,   51,   57,  242,  234,  258,   57,  255,
       51,   57,  234,   51,   57,   51,   57,   58,  234,  242,
      259,   58,  256,  259,   58,  546,  258,   58,  556,   58,
      186,  186,  186,  186,  186,  242,  186,   58,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   58,  690,  242,
      259,   58,  256,  259,   58,  546,  258,   58,  556,   58,
      212,  212,  212,  212,  212,  212,  212,   58,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   79,   81,  285,  285,
      285,  285,   81,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,  412,  412,  635,  435,

      533,   79,   81,  452,  452,  466,  466,   81,  435,  285,
      504,   81,  296,  296,  296,  296,  296,  296,  296,   81,
      497,  497,   81,  488,   81,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   96,   96,   96,   96,

       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,  479,   99,   99,   99,   99,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  111,  111,  111,  111,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  115,  117,  511,
      511,  540,  540,  117,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  115,  438,  261,
      481,  477,  264,  117,  484,  629,  631,  438,  117,  481,
      252,  459,  117,  484,  629,  631,  442,  252,  673,  673,

      117,  433,  264,  117,  261,  117,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  252,  128,  128,
      128,  128,  264,  416,  261,  679,  679,  405,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  138,  138,  138,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  144,  144,  144,  144,  144,  144,  144,
      144,  145,  389,  145,  145,  145,  145,  145,  145,  145,
      145,  147,  147,  147,  147,  147,  147,  147,  147,  574,
      246,  148,  145,  148,  148,  148,  148,  148,  148,  148,
      148,  150,  150,  150,  150,  150,  150,  150,  150,  269,

      276,  284,  148,  380,  246,  246,  269,  276,  284,  574,
      150,  378,  145,  358,  151,  151,  151,  151,  151,  151,
      151,  151,  152,  342,  152,  152,  152,  152,  152,  152,
      152,  152,  148,  151,  246,  246,  269,  276,  284,  153,
      150,  153,  333,  152,  153,  153,  153,  153,  153,  153,
      153,  153,  154,  154,  154,  154,  154,  154,  154,  154,
      697,  697,  270,  151,  260,  155,  583,  154,  154,  154,
      154,  154,  154,  152,  155,  331,  260,  726,  726,  156,
      270,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  744,  744,  583,  154,  154,  154,

      154,  154,  154,  156,  323,  156,  260,  156,  156,  303,
      270,  791,  791,  809,  809,  827,  827,  155,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  292,  156,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  958,  958,  156,  171,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      172,  155,  155,  155,  155,  163,  163,  163,  163,  163,

      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  275,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  972,  972, 1141, 1141,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  177,  177,

      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  274,  183,  183,  183,  183,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,

      194,  194,  194,  194,  194,  194,  194,  194,  194,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  199,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  199,  942,  630,  630,  630,
      630,  630,  200,  630,  245,  942, 1163, 1163,  228,  201,
     1170, 1170,  200,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  221,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221, 1363, 1363,  584, 1373,
     1373,  201,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  302,  302,  302,  302,  302,  302,  302,  584,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  217,  199,  199,  199,  199,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  208,  200,
      200,  200,  200,  201,  201,  945,  201,  201,  201,  201,
      201,  201,  201,  201,  945,  201,  201,  201,  201,  216,

      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  231,  237,  266,  257,  263,
      198,  267,  231,  585,  248,  237,  237,  591,  191,  273,
      263,  267,  248,  281,  263,  231,  265,  231,  257,  248,
      267,  231,  248,  266,  248,  257,  265,  164,  273,  265,
      248,  281,  231,  585,  136,  237,  237,  591,  265,  271,
      263,  267,  248,  116,  263,  231,  271,  231,  257,  248,
      267,  231,  248,  266,  248,  257,  265,  268,  273,  265,
      248,  281,  271,  272,  283,  315,  268,  282,  265,  278,

      279,  272,  280,  277,  549,  268,  271,  549,  282,  268,
      268,  547,  272,  277,  278,  279,  592,  280,  277,  283,
      107,  547,  271,   80,  277,   69,  268, 1406, 1406, 1407,
     1407,  272,   60,  598,  549,  268,   55,  549,  282,  268,
      268,  547,  272,  277,  278,  279,  592,  280,  277,  283,
      315,  547,  288,  288,  277,  288,  288,  288,  288,  288,
      288,  288,  288,  598,  288,  288,  288,  288,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  558,  558,  298,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  337,
      337,  337,  337,  337,  337,  337, 1408, 1408,   54,  308,

      308,  308,  308,  308,  308,  308,   27,  558,  558, 1409,
     1409,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,   12,  332,  332,  332,  332,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  345,  345,

      345,  345,  345,  345,  345,  345,  345,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  352,  352,  352,  352,  352,  352,  352,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  357,
      357,  357,  357,  357,  357,  357,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  370,  384,  384,  384,  384,
      384,  384,  384, 1411, 1411,  363,  363,  363,  363,  363,
      363,  363,  379,  379,  379,  379,  379,  379,  379,  379,

      379,  379,  379,  379,    8,  379,  379,  379,  379,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386, 1412,
     1412, 1413, 1413, 1414, 1414,  370,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  399,  399,
      399,  399,  399,  399,  399,  401,  401,  401,  401,  401,
      401,  401,  401,  401, 1416, 1416,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  404,
      404,  404,  404,  404,  404,  404,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  417,  417,  417,  417,  417,
      417,  417,  417, 1417, 1417,  410,  410,  410,  410,  410,
      410,  410,    7,  552,  417,  418,  418,  418,  418,  418,
      418,  418,  418,  437,  437,  437,  437,  437,  437,  437,

      419,    3,  419,  552,  418,  419,  419,  419,  419,  419,
      419,  419,  419,  552,  417,    0,  420,  420,  420,  420,
      420,  420,  420,  420,  421,  421,  421,  421,  421,  421,
      421,  421,    0,  552,  418,  420, 1418, 1418,    0,  422,
        0,  422,    0,  421,  422,  422,  422,  422,  422,  422,
      422,  422,  423,    0,  423,  559,  559,  423,  423,  423,
      423,  423,  423,  423,  423,  420,  453,  453,  453,  453,
      453,  453,  453,  421,  424,  424,  424,  424,  424,  424,
      424,  424,    0,  430,    0,  559,  559,    0,  586,  425,
      586,  425,  430,  424,  425,  425,  425,  425,  425,  425,

      425,  425,  426,  426,  426,  426,  426,  426,  426,  426,
      427,  427,  427,  427,  427,  427,  427,  427,  586,    0,
      586, 1419, 1419,  424,  428,  428,  428,  428,  428,  428,
      428,  428, 1422, 1422,    0,  430,    0,  572,  572,  428,
      428,  428,  428,  428,  428,  429,  429,  429,  429,  429,
      429,  429,  429,  458,  458,  458,  458,  458,  458,  458,
      429,  429,  429,  429,  429,  429,  431,  572,  572,  428,
      428,  428,  428,  428,  428,  431,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  614, 1423, 1423,    0,
      429,  429,  429,  429,  429,  429,  430,  430,  430,  430,

      430,  430,  430,  430,  430,  430,  430,  430,    0,  430,
      430,  430,  430,    0,  620,    0,  614,  432,  431,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  432,  622,  432,  620,  432,  432,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  622,  589,  589,    0,  432, 1424, 1424,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,    0,  431,  431,  431,  431,  483,  483,  483,  483,

      483,  483,  483,  589,  589,  432,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  464,  464,  464,
      464,  464,  464,  464,  478,  478,  478,  478,  478,  478,

      478,  478,  478,  478,  478,  478,    0,  478,  478,  478,
      478,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  498,  498,

      498,  498,  498,  498,  498,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  503,  503,  503,  503,  503,  503,
      503,  509,  509,  509,  509,  509,  509,  509,  509,  509,
     1425, 1425,  590,  590,  526,  526,  527,  516, 1427, 1427,
      509,  509,  509,  509,  509,  509,  509,  516,  526,  526,
      526,  526,  526,  526,  517,  527,  527,  527,  527,  527,
      527,  527,  590,  590,  517,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  532,  532,  532,  532,  532,  532,
      532,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      548,  554,  551,  551,  554,  595,  595,  561,  548,    0,

      538,  538,  538,  538,  538,  538,  538,  551,  551,  561,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  544,
      548,  554,  551,  551,  554,  595,  595,  561,  548,  544,
      689,  689,  689,  689,  689,  689,  689,  551,  551,  561,
      544,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,    0,  516,  516,  516,  516,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      544,  517,  517,  517,  517,    0,  550,  553,  555,  557,
      562,  555,  557,  567,  550,  545,  580,  553,  644,  580,
        0,  562,  567, 1428, 1428,  545,  667,  667,  667,  667,

      667,  667,  667,  667,  667,  545,  550,  553,  555,  557,
      562,  555,  557,  567,  550,  570,  580,  553,  644,  580,
      570,  562,  567,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  545,  544,  544,  544,  544,
      560,  566,  563,  564,  577,  570,  568,  645,  582,  577,
      570,  607,  566,  582,  607,  560,  563,  564,  568,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,    0,
      560,  566,  563,  564,  577,    0,  568,  645,  582,  577,
        0,  607,  566,  582,  607,  560,  563,  564,  568,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,

      545,  565,  545,  545,  545,  545,  569,  571,  573,  575,
      576,  578,  579,  587,  581,  588,  565,  575,  593,  573,
      571,  594,  569,  576,  597,  579,  594,  578,  581,  587,
      588,  565,  593,  596,  597,  596,  569,  571,  573,  575,
      576,  578,  579,  587,  581,  588,  565,  575,  593,  573,
      571,  594,  569,  576,  597,  579,  594,  578,  581,  587,
      588,  599,  593,  596,  597,  596,  600,  600,  601,  602,
      603,  604,  604,  605, 1315,  603,  601,  599,  608,  602,
      606,  606,  646,  604,  605, 1429, 1429,    0, 1315,    0,
      613,  599,  610,  610, 1315,  608,  600,  600,  601,  602,

      603,  604,  604,  605,  613,  603,  601,  599,  608,  602,
      606,  606,  646,  604,  605,  609,  609,  609,  611,  609,
      613,  627,  610,  610,  616,  608,  612,  612,  619,  612,
      612,  611,  609,  618,  613,  615,  615,  612,  616,  617,
      617,  619,  621,  612,  618,  612,    0,  625,  611,  642,
        0,  625,  621,  643,  616,  647,  612,  612,  619,  612,
      612,  611,  609,  618,  623,  615,  615,  612,  616,  617,
      617,  619,  621,  612,  618,  612,  624,  625,  626,  642,
      623,  625,  621,  643,  643,  647,  650,  651,  652,  624,
      653,  626,  853,  642,  623,  661,  661,  661,  661,  661,

      661,  661,  661,  661,  661, 1155,  624,  854,  626,    0,
      623, 1430, 1430,    0, 1155,    0,  650,  651,  652,  624,
      653,  626,  853, 1155,    0,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  854,  627,  627,
      627,  627,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      648,  649,  657,    0,  659, 1433, 1433,  683,  683,  659,
      686,  686,  686,  686,  686,  686,  686,  686,  686,    0,
      658,  683,  683,  683,  683,  683,  683,    0,  856,  684,
      648,  649,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  684,  684,
      684,  684,  684,  684,  684,    0,  668,  657,  856,  659,
     1314, 1434, 1434,    0,  659, 1435, 1435,    0,  659, 1314,
     1436, 1436, 1439, 1439,    0,  658,  659,    0, 1314,  659,

        0,  659,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  648,  649,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  668, 1440, 1440, 1441, 1441, 1442, 1442,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  668,  668,  668,  668,  668,  668,  668,  668,

      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,    0,  680,  680,  680,  680,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  712,  710, 1444, 1444,
        0,  712, 1445, 1445, 1446, 1446,  695,  695,  695,  695,
      695,  695,  695,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  711,  701,  701,  701,  701,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  857,  702,  702,  702,  702,  710,  730,  730,
        0,  712, 1447, 1447, 1450, 1450,  712, 1451, 1451,    0,

      712,    0,  730,  730,  730,  730,  730,  730,  712, 1452,
     1452,  712,  857,  712,    0,  711,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  736,  736,  736,  736,  736,  736,  736,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  721,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718, 1453, 1453, 1458, 1458,  731,  721,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  858,
      727,  727,  727,  727,  731,  731,  731,  731,  731,  731,
      731,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      760,  760,  760,  760,  760,  760,  760,  760,    0,  858,
      742,  742,  742,  742,  742,  742,  742,  761,  761,  761,
      761,  761,  761,  761,  761, 1459, 1459,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  748,    0,  748,  748,
      748,  748,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,    0,  749,  749,  749,  749,  757,
      859,  757, 1460, 1460,  757,  757,  757,  757,  757,  757,
      757,  757,  758,  758,  758,  758,  758,  758,  758,  758,
      783,  783,  783,  783,  783,  783,  783,  759,    0,  759,
      859,  758,  759,  759,  759,  759,  759,  759,  759,  759,
      762,  860,  762, 1461, 1461,  762,  762,  762,  762,  762,
      762,  762,  762,  763,  763,  763,  763,  763,  763,  763,
      763,  758, 1462, 1462, 1464, 1464,    0,  862,  764,  863,

      764,  860,  763,  764,  764,  764,  764,  764,  764,  764,
      764,  765,  765,  765,  765,  765,  765,  765,  765,  766,
      766,  766,  766,  766,  766,  766,  766,  862,    0,  863,
     1465, 1465,  763,  767,  767,  767,  767,  767,  767,  767,
      767,  768,  768,  768,  768,  768,  768,  768,  768,  769,
      769,  769,  769,  769,  769,  769,  769,  770,  770,  770,
      770,  770,  770,  770,  770,  771,  772,  772,  772,  772,
      772,  772,  772,  772,  771,  777,  777,    0,  778, 1466,
     1466,  772,  772,  772,  772,  772,  772,  773,    0,  777,
      777,  777,  777,  777,  777,    0,  773,  778,  778,  778,

      778,  778,  778,  778,  819,  819,  819,  819,  819,  819,
      819,  772,  772,  772,  772,  772,  772,  771,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  804,  864,  865,  773,
      813,  813,  866,  867,  795,  868,  789,  789,  789,  789,
      789,  789,  789,  795,  813,  813,  813,  813,  813,  813,
      870, 1467, 1467, 1468, 1468,  796,    0,  864,  865, 1469,
     1469,    0,  866,  867,  796,  868, 1470, 1470,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      870,  771,  771,  771,  771,  872,  795, 1471, 1471,  814,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,    0,  773,  773,  773,  773,  796,  814,  814,
      814,  814,  814,  814,  814,  872,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  816,  816,  816,  816,  816,  816,
      816,  816,  816, 1472, 1472, 1473, 1473,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,    0,
      795,  795,  795,  795, 1475, 1475,    0,  873,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
        0,  796,  796,  796,  796,  810,  810,  810,  810,  810,

      810,  810,  810,  810,  810,  810,  810,  873,  810,  810,
      810,  810,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  944,  944,  944,  944,  944,  944,  944, 1476, 1476,
        0,  825,  825,  825,  825,  825,  825,  825,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      874,  831,  831,  831,  831,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  841,  832,  832,
      832,  832,  876,  877,  878,  879,  880,  841,  882,  883,
      874,  884,  885,  886,  842,  887,  888,  889,  891,  892,
      892,  893,  895,  896,  842,  897,  898,  899,  900,  902,

      903,  904,  876,  877,  878,  879,  880,  905,  882,  883,
      907,  884,  885,  886,  908,  887,  888,  889,  891,  892,
      892,  893,  895,  896,  909,  897,  898,  899,  900,  902,
      903,  904,  910,  911,  912,  917,  918,  905,  919,  920,
      907, 1477, 1477,    0,  908,  938,  959,  959,  959,  959,
      959,  959,  959,  921,  909,  964,  964,  964,  964,  964,
      964,  964,  910,  911,  912,  917,  918,  939,  919,  920,
      922,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  921,  841,  841,  841,  841,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,

      922,  842,  842,  842,  842,  923,  924,  925,  926,  923,
      927,  928,  929,  930,  931,  932,  934,  935,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946, 1478, 1478,
        0, 1054, 1479, 1479,    0,  923,  924,  925,  926,  923,
      927,  928,  929,  930,  931,  932,  934,  935,    0,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938, 1054,  938,  938,  938,  938, 1480, 1480, 1481, 1481,
        0,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,    0,  939,  939,  939,  939,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,

      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  961,  961,  961,  961,  961,
      961,  961,  961,  961,  970,  970,  970,  970,  970,  970,
      970,  970,  970, 1482, 1482,    0, 1055, 1483, 1483,    0,

      976, 1484, 1484,  970,  970,  970,  970,  970,  970,  970,
      976, 1485, 1485, 1486, 1486,    0, 1056,  977, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1021, 1055,  977,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990, 1056,    0,  989, 1489,
     1489,  976,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,    0,  991,  991,  991,  991,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,    0,  992,  992,  992,  992, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,    0, 1011,

     1011, 1011, 1011,  989,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  976,    0,  976,  976,  976,
      976,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977, 1010,  977,  977,  977,  977,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,    0, 1010, 1012, 1012, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012,    0, 1012, 1012, 1012,

     1012, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1490, 1490,    0, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1029, 1040,
     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1029, 1491, 1491,
     1492, 1492,    0, 1057, 1059, 1030, 1060, 1061, 1062, 1063,

        0, 1064,    0, 1065, 1030, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1041,    0, 1041, 1041,
     1041, 1041, 1051, 1057, 1059, 1066, 1060, 1061, 1062, 1063,
     1029, 1064, 1051, 1065, 1067, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1030, 1042, 1042,
     1042, 1042, 1052, 1493, 1493, 1066,    0, 1071, 1073, 1074,
     1076,    0, 1052,    0, 1067, 1494, 1494, 1495, 1495, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1071, 1073, 1074,
     1076, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,

     1029, 1029, 1029,    0, 1029, 1029, 1029, 1029, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1077, 1030, 1030, 1030, 1030, 1079, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1082, 1051,
     1051, 1051, 1051, 1084, 1087, 1088, 1090, 1092, 1094, 1096,
     1077, 1097, 1098, 1099, 1100, 1079, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1082, 1052,
     1052, 1052, 1052, 1084, 1087, 1088, 1090, 1092, 1094, 1096,
     1101, 1097, 1098, 1099, 1100, 1105, 1106, 1107, 1108, 1110,
     1111, 1112, 1113, 1114, 1115, 1116, 1120, 1122, 1124, 1130,

     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1172, 1175,
     1101, 1128, 1496, 1496,    0, 1105, 1106, 1107, 1108, 1110,
     1111, 1112, 1113, 1114, 1115, 1116, 1120, 1122, 1127, 1127,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1145, 1172, 1175,
     1497, 1497, 1127, 1127, 1127, 1127, 1127, 1127, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1146, 1178, 1178,
     1178, 1178, 1179, 1179, 1178, 1180, 1182, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1154, 1498, 1498, 1499, 1499, 1158,
     1500, 1500, 1501, 1501, 1154, 1502, 1502, 1503, 1503, 1174,
     1183, 1184, 1179, 1179, 1178, 1180, 1182, 1185, 1181, 1193,

     1174, 1195, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124,    0, 1124, 1124, 1124, 1124, 1174,
     1183, 1184,    0, 1165, 1178, 1181,    0, 1185, 1181, 1193,
     1174, 1195, 1505, 1505, 1158, 1506, 1506, 1507, 1507, 1508,
     1508, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145,    0, 1145, 1145, 1145, 1145, 1509, 1509,
     1199, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1165, 1146, 1146, 1146, 1146, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1199, 1154, 1154, 1154, 1154, 1158, 1158, 1158, 1158, 1158,

     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1171, 1510, 1510, 1513, 1513,    0, 1186,
     1186, 1186, 1186, 1171,    0, 1186, 1514, 1514, 1515, 1515,
     1201,    0, 1171,    0, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1173, 1176, 1177, 1186, 1187, 1188, 1189, 1190,
     1201, 1191, 1171, 1192, 1187, 1194, 1176, 1194, 1204, 1173,
     1177, 1188, 1189, 1196, 1196, 1190, 1191, 1197, 1192, 1197,
        0, 1205, 1173, 1176, 1177, 1186, 1187, 1188, 1189, 1190,
        0, 1191,    0, 1192, 1187, 1194, 1176, 1194, 1204, 1173,

     1177, 1188, 1189, 1196, 1196, 1190, 1191, 1197, 1192, 1197,
     1203, 1205, 1203, 1206, 1207, 1198, 1208, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1198,
     1171, 1171, 1171, 1171, 1200, 1202, 1209, 1211, 1209, 1213,
     1203, 1210, 1203, 1206, 1207, 1198, 1208, 1214, 1216, 1200,
     1212, 1202, 1211, 1210, 1212, 1215, 1215, 1219, 1218, 1198,
     1230, 1214, 1217, 1231, 1200, 1202, 1209, 1211, 1209, 1213,
     1232, 1210, 1218, 1217, 1233, 1234, 1235, 1214, 1216, 1200,
     1212, 1202, 1211, 1210, 1212, 1215, 1215, 1219, 1218, 1236,
     1230, 1214, 1217, 1231, 1238, 1239, 1238, 1241, 1240, 1241,

     1232, 1242, 1218, 1217, 1233, 1234, 1235, 1245, 1247, 1245,
     1251, 1247, 1237, 1240,    0, 1243, 1243, 1243, 1243, 1246,
     1254, 1243, 1516, 1516, 1238, 1239, 1238, 1241, 1240, 1241,
     1248, 1242, 1517, 1517, 1252, 1246, 1252, 1245, 1247, 1245,
     1251, 1247, 1248, 1240, 1236, 1253, 1255, 1256, 1257, 1246,
     1254, 1253, 1243, 1230, 1258, 1259, 1261, 1257, 1260, 1262,
     1248, 1263, 1237, 1232, 1252, 1246, 1252, 1233, 1260, 1235,
     1243, 1262, 1248, 1266, 1267, 1253, 1255, 1256, 1257, 1518,
     1518, 1253, 1243,    0, 1258, 1259, 1261, 1257, 1260, 1262,
        0, 1263, 1519, 1519, 1520, 1520, 1521, 1521, 1260,    0,

     1243, 1262,    0, 1266, 1267, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1249,
     1249, 1249, 1249, 1269, 1274, 1249, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1264, 1265, 1268, 1270, 1271, 1270,
     1271, 1276, 1277, 1269, 1274, 1278, 1249, 1279, 1264, 1265,

     1289, 1290, 1268, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282,    0, 1264, 1265, 1268, 1270, 1271, 1270,
     1271, 1276, 1277, 1522, 1522, 1278, 1249, 1279, 1264, 1265,
     1289, 1290, 1268, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1275,
     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1291,
     1293, 1303, 1304, 1306, 1307, 1275, 1523, 1523, 1524, 1524,
     1303, 1291, 1525, 1525, 1526, 1526, 1527, 1527,    0, 1275,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1291,

     1293, 1303, 1304, 1306, 1307, 1275, 1280, 1280, 1280, 1280,
     1303, 1291, 1280, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1309,
     1310, 1312, 1310, 1280, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1280, 1305, 1292, 1313, 1313, 1316, 1305, 1317, 1309,
     1310, 1312, 1310, 1280, 1292, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1280, 1305, 1292, 1313, 1313, 1316, 1305, 1317, 1530,

     1530, 1531, 1531,    0, 1292, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1318, 1321, 1322,    0, 1332, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1294, 1294, 1294, 1294, 1308,
     1311, 1294, 1318, 1321, 1322, 1331, 1332, 1333, 1336, 1345,
     1346, 1348, 1347, 1308, 1347, 1311, 1349, 1350, 1351, 1331,
     1352, 1353, 1354, 1355, 1358,    0, 1366, 1367, 1364, 1308,
     1311, 1365, 1294, 1365, 1376, 1331, 1379, 1333, 1336, 1345,
     1346, 1348, 1347, 1308, 1347, 1311, 1349, 1350, 1351, 1331,

     1352, 1353, 1354, 1355, 1358, 1364, 1366, 1367, 1364, 1374,
     1378, 1365, 1294, 1365, 1376, 1377, 1379, 1383, 1380, 1377,
     1385, 1387, 1378, 1388, 1374, 1390, 1392, 1394, 1532, 1532,
     1533, 1533, 1534, 1534,    0, 1380, 1535, 1535,    0, 1374,
     1378, 1536, 1536, 1537, 1537, 1377,    0, 1383, 1380, 1377,
     1385, 1387, 1378, 1388, 1374, 1390, 1392, 1394, 1538, 1538,
     1539, 1539,    0, 1352, 1353, 1380, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1334, 1334, 1334, 1334, 1381, 1389,
     1334,    0, 1393, 1540, 1540, 1541, 1541,    0, 1393, 1542,

     1542, 1543, 1543, 1389, 1381, 1544, 1544, 1545, 1545, 1546,
     1546, 1547, 1547, 1548, 1548, 1549, 1549,    0, 1381, 1389,
        0, 1334, 1393, 1550, 1550, 1553, 1553,    0, 1393, 1554,
     1554, 1555, 1555, 1389, 1381, 1556, 1556, 1557, 1557, 1558,
     1558, 1559, 1559, 1560, 1560, 1561, 1561, 1562, 1562, 1563,
     1563, 1334, 1564, 1564, 1565, 1565, 1566, 1566, 1567, 1567,
     1570, 1570, 1571, 1571, 1572, 1572, 1573, 1573, 1574, 1574,
     1575, 1575, 1576, 1576, 1577, 1577, 1578, 1578, 1579, 1579,
     1583, 1583, 1584, 1584, 1585, 1585, 1586, 1586, 1587, 1587,
     1589, 1589, 1590, 1590, 1591, 1591, 1592, 1592, 1594, 1594,

     1595, 1595, 1597, 1597,    0, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1356, 1356, 1356, 1356, 1598, 1598, 1356,
     1600, 1600, 1601, 1601, 1602, 1602, 1603, 1603, 1604, 1604,
     1605, 1605, 1606, 1606, 1607, 1607, 1608, 1608, 1609, 1609,
     1611, 1611, 1613, 1613, 1614, 1614, 1615, 1615, 1616, 1616,
     1356, 1618, 1618, 1619, 1619, 1621, 1621, 1622, 1622, 1623,
     1623, 1624, 1624, 1625, 1625, 1356, 1626, 1626, 1356, 1627,
     1627, 1628, 1628, 1629, 1629, 1630, 1630, 1632, 1632,    0,
     1356, 1634, 1634, 1635, 1635, 1636, 1636, 1637, 1637, 1638,

     1638, 1639, 1639, 1640, 1640, 1356, 1641, 1641, 1356, 1642,
     1642, 1643, 1643, 1645, 1645, 1647, 1647, 1648, 1648, 1650,
     1650, 1651, 1651, 1652, 1652, 1653, 1653, 1654, 1654, 1655,
     1655, 1656, 1656, 1657, 1657, 1658, 1658, 1659, 1659, 1661,
     1661, 1664, 1664,    0, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1357, 1357, 1357, 1357, 1667, 1667, 1357, 1668,
     1668, 1669, 1669, 1670, 1670, 1671, 1671, 1672, 1672, 1673,
     1673, 1674, 1674, 1675, 1675, 1676, 1676, 1677, 1677, 1678,
     1678, 1679, 1679, 1680, 1680, 1681, 1681, 1684, 1684, 1357,

     1357, 1685, 1685, 1686, 1686, 1687, 1687, 1688, 1688, 1689,
     1689, 1693, 1693, 1695, 1695, 1696, 1696, 1357, 1697, 1697,
     1698, 1698, 1699, 1699, 1700, 1700, 1703, 1703,    0, 1357,
     1357, 1705, 1705, 1708, 1708, 1711, 1711, 1712, 1712, 1713,
     1713, 1714, 1714, 1715, 1715, 1716, 1716, 1357, 1717, 1717,
     1718, 1718, 1719, 1719, 1720, 1720, 1722, 1722, 1724, 1724,
     1726, 1726, 1727, 1727, 1729, 1729, 1730, 1730, 1731, 1731,
     1734, 1734, 1735, 1735, 1736, 1736, 1737, 1737, 1738, 1738,
     1739, 1739,    0, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,

     1357, 1396,    0, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1740, 1740,    0, 1396, 1396, 1396, 1397,    0,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1741,
     1741,    0, 1397, 1397, 1397, 1398,    0, 1398,    0, 1398,
     1742, 1742, 1743, 1743, 1398, 1399,    0, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1744, 1744,    0, 1399,
     1399, 1399, 1400,    0, 1400,    0, 1400, 1745, 1745, 1746,
     1746, 1400, 1401, 1747, 1747, 1401, 1401, 1401, 1401, 1401,
     1748, 1748, 1749, 1749, 1401, 1402, 1402, 1402, 1402, 1402,
     1402, 1402,    0, 1402, 1750, 1750,    0, 1402, 1402, 1402,

     1403,    0, 1403,    0, 1403, 1751, 1751, 1752, 1752, 1403,
     1410,    0, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1754, 1754,    0, 1410, 1410, 1410, 1415,    0, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1755, 1755,
        0, 1415, 1415, 1415, 1420,    0, 1420,    0, 1420, 1756,
     1756,    0, 1420, 1420, 1426,    0, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426,    0,    0,    0, 1426, 1426,
     1426, 1431,    0, 1431,    0, 1431,    0,    0,    0, 1431,
     1431, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,    0,
        0,    0, 1437, 1437, 1443, 1443, 1443, 1443, 1443, 1443,

     1443,    0, 1443,    0,    0,    0, 1443, 1443, 1443, 1448,
        0, 1448,    0, 1448,    0,    0,    0, 1448, 1448, 1455,
     1455, 1455, 1455, 1455,    0, 1455,    0,    0,    0, 1455,
     1455, 1456,    0,    0, 1456, 1456, 1456, 1456, 1456,    0,
        0,    0,    0, 1456, 1463,    0, 1463,    0, 1463,    0,
        0,    0,    0, 1463, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474,    0,    0,    0, 1474, 1474,
     1474, 1487,    0, 1487,    0, 1487,    0,    0,    0, 1487,
     1487, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504,    0,    0,    0, 1504, 1504, 1504, 1511,    0,

     1511,    0, 1511,    0,    0,    0, 1511, 1511, 1528, 1528,
     1528, 1528, 1528, 1528, 1528, 1528,    0,    0,    0, 1528,
     1528, 1551,    0, 1551,    0, 1551,    0,    0,    0, 1551,
     1551, 1569, 1569, 1569, 1569, 1569,    0, 1569,    0,    0,
        0, 1569, 1569, 1580, 1580, 1580, 1580, 1580,    0, 1580,
        0,    0,    0, 1580, 1580, 1581, 1581, 1581,    0, 1581,
        0, 1581,    0,    0,    0, 1581, 1581, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,    0,    0,
        0, 1588, 1588, 1588, 1593,    0, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593,    0,    0,    0, 1593, 1593,

     1593, 1596,    0, 1596, 1596, 1596, 1596, 1596, 1596, 1596,
     1596, 1596,    0,    0,    0, 1596, 1596, 1596, 1599,    0,
     1599,    0, 1599,    0,    0,    0, 1599, 1599, 1610,    0,
     1610,    0, 1610,    0,    0,    0, 1610, 1610, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,    0,
        0,    0, 1612, 1612, 1612, 1617,    0, 1617, 1617, 1617,
     1617, 1617, 1617, 1617, 1617, 1617,    0,    0,    0, 1617,
     1617, 1617, 1620,    0, 1620,    0, 1620,    0,    0,    0,
     1620, 1620, 1631,    0, 1631,    0, 1631,    0,    0,    0,
     1631, 1631, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,

        0,    0,    0, 1633, 1633, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644,    0,    0,    0, 1644, 1644, 1646, 1646,
     1646, 1646, 1646, 1646, 1646,    0, 1646,    0,    0,    0,
     1646, 1646, 1646, 1649,    0, 1649,    0, 1649,    0,    0,
        0, 1649, 1649, 1660,    0, 1660,    0, 1660,    0,    0,
        0, 1660, 1660, 1662,    0, 1662,    0, 1662, 1663, 1663,
     1663, 1663, 1663,    0, 1663,    0,    0,    0, 1663, 1663,
     1665, 1665, 1665,    0, 1665,    0, 1665,    0,    0,    0,
     1665, 1665, 1682, 1682, 1682, 1682, 1682,    0, 1682,    0,
        0,    0, 1682, 1682, 1683, 1683, 1683, 1683, 1683, 1683,

     1683, 1683, 1683,    0, 1683, 1690,    0, 1690, 1690, 1690,
     1690, 1690, 1690, 1690, 1690, 1690,    0,    0,    0, 1690,
     1690, 1690, 1691,    0, 1691, 1691, 1691, 1691, 1691, 1691,
     1691, 1691, 1691,    0,    0,    0, 1691, 1691, 1691, 1692,
        0, 1692,    0, 1692,    0,    0,    0, 1692, 1692, 1694,
     1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694,    0, 1694,
     1701,    0, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701,    0,    0,    0, 1701, 1701, 1701, 1702,    0, 1702,
        0, 1702,    0,    0,    0, 1702, 1702, 1704, 1704, 1704,
     1704, 1704, 1704, 1704, 1704,    0,    0,    0, 1704, 1704,

     1706, 1706, 1706, 1706, 1706, 1706, 1706,    0, 1706,    0,
        0,    0, 1706, 1706, 1706, 1707,    0, 1707,    0, 1707,
        0,    0,    0, 1707, 1707, 1709, 1709, 1709, 1709, 1709,
        0, 1709,    0,    0,    0, 1709, 1709, 1710, 1710, 1710,
        0, 1710,    0, 1710,    0,    0,    0, 1710, 1710, 1721,
     1721, 1721,    0, 1721,    0, 1721,    0,    0,    0, 1721,
     1721, 1723, 1723, 1723, 1723, 1723,    0, 1723,    0,    0,
        0, 1723, 1723, 1725, 1725, 1725, 1725, 1725, 1725, 1725,
     1725, 1725, 1725, 1725,    0,    0,    0, 1725, 1725, 1725,
     1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728,

     1728,    0,    0,    0, 1728, 1728, 1728, 1732,    0, 1732,
     1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732,    0,    0,
        0, 1732, 1732, 1732, 1733,    0, 1733, 1733, 1733, 1733,
     1733, 1733, 1733, 1733, 1733,    0,    0,    0, 1733, 1733,
     1733, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
     1753, 1753,    0,    0,    0, 1753, 1753, 1753, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,

     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395

    } ;

static yyconst flex_int16_t yy_rule_linenum[181] =
    {   0,
      276,  277,  278,  279,  280,  281,  282,  283,  284,  285,
      286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
      296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
      306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
      316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
      326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
      336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
      346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
      356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
      366,  367,  368,  369,  370,  371,  372,  373,  374,  375,

      376,  377,  378,  379,  380,  381,  382,  383,  384,  385,
      386,  387,  388,  389,  390,  391,  392,  393,  394,  395,
      396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
      406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
      416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
      426,  427,  428,  429,  430,  431,  432,  433,  434,  435,
      436,  437,  438,  439,  440,  441,  442,  443,  444,  445,
      446,  447,  448,  449,  450,  451,  452,  453,  454,  457
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/SPARQLScanner.lpp"
/* $Id: SPARQLScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/* from yacker grammar http://www.w3.org/2005/01/yacker/uploads/SPARUL_EGP/SPARUL_EGPScanner.ll */
/** Flex scanner for SPARQL + SPARUL */
#line 6 "lib/SPARQLScanner.lpp"

#include "SPARQLParser.hpp"
#include "SPARQLScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SPARQLParser::token token;
typedef w3c_sw::SPARQLParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SPARQLFlexLexer" */
/* consider using class instead
 * %option yyclass="SPARQLScanner"
 * void SPARQLFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 61 "lib/SPARQLScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARUL_EGP terminals */
/* <STRING_LITERAL_LONG2> ::= "'''" (( (( "'" | "''" ))? ( [^'\\] | ECHAR ) ))* "'''" */
/*	        	 #x00B7 |        [#x0300-#x036F]        |             [#x203F-#x2040]
	        	   c2b7             cc80-cdaf                          e280b4-e28180 */
/* END patterns for SPARUL_EGP terminals */
/* START semantic actions for SPARUL_EGP terminals */
#line 2900 "lib/SPARQLScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 275 "lib/SPARQLScanner.lpp"

#line 3099 "lib/SPARQLScanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1396 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1395 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 181 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 181 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 182 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 276 "lib/SPARQLScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 277 "lib/SPARQLScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 278 "lib/SPARQLScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 279 "lib/SPARQLScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 280 "lib/SPARQLScanner.lpp"
{return token::GT_PIPE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 281 "lib/SPARQLScanner.lpp"
{return token::GT_H_2502_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 282 "lib/SPARQLScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 283 "lib/SPARQLScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 284 "lib/SPARQLScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 285 "lib/SPARQLScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 286 "lib/SPARQLScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 287 "lib/SPARQLScanner.lpp"
{return token::GT_MINUS_GT;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 288 "lib/SPARQLScanner.lpp"
{return token::GT_H_2192_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 289 "lib/SPARQLScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 290 "lib/SPARQLScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 291 "lib/SPARQLScanner.lpp"
{return token::IT_SELECT;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 292 "lib/SPARQLScanner.lpp"
{return token::IT_DISTINCT;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 293 "lib/SPARQLScanner.lpp"
{return token::IT_REDUCED;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 294 "lib/SPARQLScanner.lpp"
{return token::IT_AS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 295 "lib/SPARQLScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 296 "lib/SPARQLScanner.lpp"
{return token::IT_CONSTRUCT;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 297 "lib/SPARQLScanner.lpp"
{return token::IT_WHERE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 298 "lib/SPARQLScanner.lpp"
{return token::IT_DESCRIBE;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 299 "lib/SPARQLScanner.lpp"
{return token::IT_ASK;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 300 "lib/SPARQLScanner.lpp"
{return token::IT_FROM;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 301 "lib/SPARQLScanner.lpp"
{return token::IT_NAMED;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 302 "lib/SPARQLScanner.lpp"
{return token::IT_GROUP;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 303 "lib/SPARQLScanner.lpp"
{return token::IT_BY;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 304 "lib/SPARQLScanner.lpp"
{return token::IT_HAVING;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 305 "lib/SPARQLScanner.lpp"
{return token::IT_ORDER;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 306 "lib/SPARQLScanner.lpp"
{return token::IT_ASC;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 307 "lib/SPARQLScanner.lpp"
{return token::IT_DESC;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 308 "lib/SPARQLScanner.lpp"
{return token::IT_LIMIT;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 309 "lib/SPARQLScanner.lpp"
{return token::IT_OFFSET;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 310 "lib/SPARQLScanner.lpp"
{return token::IT_VALUES;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 311 "lib/SPARQLScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 312 "lib/SPARQLScanner.lpp"
{return token::IT_LOAD;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 313 "lib/SPARQLScanner.lpp"
{return token::IT_SILENT;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 314 "lib/SPARQLScanner.lpp"
{return token::IT_INTO;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 315 "lib/SPARQLScanner.lpp"
{return token::IT_CLEAR;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 316 "lib/SPARQLScanner.lpp"
{return token::IT_DROP;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 317 "lib/SPARQLScanner.lpp"
{return token::IT_CREATE;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 318 "lib/SPARQLScanner.lpp"
{return token::IT_ADD;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 319 "lib/SPARQLScanner.lpp"
{return token::IT_TO;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 320 "lib/SPARQLScanner.lpp"
{return token::IT_MOVE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 321 "lib/SPARQLScanner.lpp"
{return token::IT_COPY;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 322 "lib/SPARQLScanner.lpp"
{return token::IT_WITH;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 323 "lib/SPARQLScanner.lpp"
{return token::IT_DELETE;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 324 "lib/SPARQLScanner.lpp"
{return token::IT_INSERT;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 325 "lib/SPARQLScanner.lpp"
{return token::IT_USING;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 326 "lib/SPARQLScanner.lpp"
{return token::IT_DEFAULT;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 327 "lib/SPARQLScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 328 "lib/SPARQLScanner.lpp"
{return token::IT_ALL;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 329 "lib/SPARQLScanner.lpp"
{return token::IT_PRINT;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 330 "lib/SPARQLScanner.lpp"
{return token::IT_OPTIONAL;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 331 "lib/SPARQLScanner.lpp"
{return token::IT_SERVICE;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 332 "lib/SPARQLScanner.lpp"
{return token::IT_SADI;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 333 "lib/SPARQLScanner.lpp"
{return token::IT_BIND;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 334 "lib/SPARQLScanner.lpp"
{return token::IT_UNDEF;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 335 "lib/SPARQLScanner.lpp"
{return token::GT_MINUS_MINUS;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 336 "lib/SPARQLScanner.lpp"
{return token::IT_MINUS;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 337 "lib/SPARQLScanner.lpp"
{return token::IT_UNION;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 338 "lib/SPARQLScanner.lpp"
{return token::IT_FILTER;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 339 "lib/SPARQLScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 340 "lib/SPARQLScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 341 "lib/SPARQLScanner.lpp"
{return token::GT_CARROT;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 342 "lib/SPARQLScanner.lpp"
{return token::GT_OPT;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 343 "lib/SPARQLScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 344 "lib/SPARQLScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 345 "lib/SPARQLScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 346 "lib/SPARQLScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 347 "lib/SPARQLScanner.lpp"
{return token::IT_MEMBERS;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 348 "lib/SPARQLScanner.lpp"
{return token::IT_STARTS;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 349 "lib/SPARQLScanner.lpp"
{return token::IT_ENDS;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 350 "lib/SPARQLScanner.lpp"
{return token::IT_ANY;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 351 "lib/SPARQLScanner.lpp"
{return token::IT_UNORDERED;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 352 "lib/SPARQLScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 353 "lib/SPARQLScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 354 "lib/SPARQLScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 355 "lib/SPARQLScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 356 "lib/SPARQLScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 357 "lib/SPARQLScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 358 "lib/SPARQLScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 359 "lib/SPARQLScanner.lpp"
{return token::IT_IN;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 360 "lib/SPARQLScanner.lpp"
{return token::IT_NOT;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 361 "lib/SPARQLScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 362 "lib/SPARQLScanner.lpp"
{return token::IT_STR;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 363 "lib/SPARQLScanner.lpp"
{return token::IT_LANG;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 364 "lib/SPARQLScanner.lpp"
{return token::IT_LANGMATCHES;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 365 "lib/SPARQLScanner.lpp"
{return token::IT_DATATYPE;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 366 "lib/SPARQLScanner.lpp"
{return token::IT_BOUND;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 367 "lib/SPARQLScanner.lpp"
{return token::IT_IRI;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 368 "lib/SPARQLScanner.lpp"
{return token::IT_URI;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 369 "lib/SPARQLScanner.lpp"
{return token::IT_BNODE;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 370 "lib/SPARQLScanner.lpp"
{return token::IT_RAND;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 371 "lib/SPARQLScanner.lpp"
{return token::IT_ABS;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 372 "lib/SPARQLScanner.lpp"
{return token::IT_CEIL;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 373 "lib/SPARQLScanner.lpp"
{return token::IT_FLOOR;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 374 "lib/SPARQLScanner.lpp"
{return token::IT_ROUND;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 375 "lib/SPARQLScanner.lpp"
{return token::IT_CONCAT;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 376 "lib/SPARQLScanner.lpp"
{return token::IT_STRLEN;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 377 "lib/SPARQLScanner.lpp"
{return token::IT_UCASE;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 378 "lib/SPARQLScanner.lpp"
{return token::IT_LCASE;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 379 "lib/SPARQLScanner.lpp"
{return token::IT_ENCODE_FOR_URI;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 380 "lib/SPARQLScanner.lpp"
{return token::IT_CONTAINS;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 381 "lib/SPARQLScanner.lpp"
{return token::IT_STRSTARTS;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 382 "lib/SPARQLScanner.lpp"
{return token::IT_STRENDS;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 383 "lib/SPARQLScanner.lpp"
{return token::IT_STRBEFORE;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 384 "lib/SPARQLScanner.lpp"
{return token::IT_STRAFTER;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 385 "lib/SPARQLScanner.lpp"
{return token::IT_YEAR;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 386 "lib/SPARQLScanner.lpp"
{return token::IT_MONTH;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 387 "lib/SPARQLScanner.lpp"
{return token::IT_DAY;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 388 "lib/SPARQLScanner.lpp"
{return token::IT_HOURS;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 389 "lib/SPARQLScanner.lpp"
{return token::IT_MINUTES;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 390 "lib/SPARQLScanner.lpp"
{return token::IT_SECONDS;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 391 "lib/SPARQLScanner.lpp"
{return token::IT_TIMEZONE;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 392 "lib/SPARQLScanner.lpp"
{return token::IT_TZ;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 393 "lib/SPARQLScanner.lpp"
{return token::IT_NOW;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 394 "lib/SPARQLScanner.lpp"
{return token::IT_UUID;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 395 "lib/SPARQLScanner.lpp"
{return token::IT_STRUUID;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 396 "lib/SPARQLScanner.lpp"
{return token::IT_MD5;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 397 "lib/SPARQLScanner.lpp"
{return token::IT_SHA1;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 398 "lib/SPARQLScanner.lpp"
{return token::IT_SHA256;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 399 "lib/SPARQLScanner.lpp"
{return token::IT_SHA384;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 400 "lib/SPARQLScanner.lpp"
{return token::IT_SHA512;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 401 "lib/SPARQLScanner.lpp"
{return token::IT_COALESCE;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 402 "lib/SPARQLScanner.lpp"
{return token::IT_IF;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 403 "lib/SPARQLScanner.lpp"
{return token::IT_STRLANG;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 404 "lib/SPARQLScanner.lpp"
{return token::IT_STRDT;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 405 "lib/SPARQLScanner.lpp"
{return token::IT_sameTerm;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 406 "lib/SPARQLScanner.lpp"
{return token::IT_isIRI;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 407 "lib/SPARQLScanner.lpp"
{return token::IT_isURI;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 408 "lib/SPARQLScanner.lpp"
{return token::IT_isBLANK;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 409 "lib/SPARQLScanner.lpp"
{return token::IT_isLITERAL;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 410 "lib/SPARQLScanner.lpp"
{return token::IT_isNUMERIC;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 411 "lib/SPARQLScanner.lpp"
{return token::IT_REGEX;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 412 "lib/SPARQLScanner.lpp"
{return token::IT_SUBSTR;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 413 "lib/SPARQLScanner.lpp"
{return token::IT_REPLACE;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 414 "lib/SPARQLScanner.lpp"
{return token::IT_EXISTS;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 415 "lib/SPARQLScanner.lpp"
{return token::IT_COUNT;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 416 "lib/SPARQLScanner.lpp"
{return token::IT_GROUP_CONCAT;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 417 "lib/SPARQLScanner.lpp"
{return token::IT_SUM;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 418 "lib/SPARQLScanner.lpp"
{return token::IT_MIN;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 419 "lib/SPARQLScanner.lpp"
{return token::IT_MAX;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 420 "lib/SPARQLScanner.lpp"
{return token::IT_AVG;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 421 "lib/SPARQLScanner.lpp"
{return token::IT_SAMPLE;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 422 "lib/SPARQLScanner.lpp"
{return token::IT_SEPARATOR;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 423 "lib/SPARQLScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 424 "lib/SPARQLScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", 1); return token::IT_true;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 425 "lib/SPARQLScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", 0); return token::IT_false;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 426 "lib/SPARQLScanner.lpp"
{yylval->p_URI = unescapeAndResolveBase(yytext+1, yyleng-2, yylloc); return token::IRIREF;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 427 "lib/SPARQLScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext, yylloc); return token::PNAME_NS;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 428 "lib/SPARQLScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext, yylloc); return token::PNAME_LN;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 429 "lib/SPARQLScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 430 "lib/SPARQLScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 431 "lib/SPARQLScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 432 "lib/SPARQLScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 433 "lib/SPARQLScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 434 "lib/SPARQLScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 435 "lib/SPARQLScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 436 "lib/SPARQLScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 437 "lib/SPARQLScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 438 "lib/SPARQLScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 439 "lib/SPARQLScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 440 "lib/SPARQLScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 441 "lib/SPARQLScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 442 "lib/SPARQLScanner.lpp"
{return unescape(yylval, yylloc, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 443 "lib/SPARQLScanner.lpp"
{return unescape(yylval, yylloc, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 444 "lib/SPARQLScanner.lpp"
{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 445 "lib/SPARQLScanner.lpp"
{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 446 "lib/SPARQLScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 447 "lib/SPARQLScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 448 "lib/SPARQLScanner.lpp"
{return token::ABOX_HR;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 449 "lib/SPARQLScanner.lpp"
{return token::UBOX_UHR;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 450 "lib/SPARQLScanner.lpp"
{return token::UBOX_LHR;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 451 "lib/SPARQLScanner.lpp"
{yylval->p_RSName = new RSName(yytext + 1); return token::RSREF;}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 452 "lib/SPARQLScanner.lpp"
{return token::INSERTDATA;}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 453 "lib/SPARQLScanner.lpp"
{return token::DELETEDATA;}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 454 "lib/SPARQLScanner.lpp"
{return token::DELETEWHERE;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 456 "lib/SPARQLScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 457 "lib/SPARQLScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input: '" << yytext << "'";
    driver->error(*yylloc, s.str());
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 463 "lib/SPARQLScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4095 "lib/SPARQLScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( FLEX_STD istream* arg_yyin, FLEX_STD ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SPARQLfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SPARQLfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SPARQLrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SPARQLrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1396 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1396 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1395);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SPARQLalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SPARQLalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SPARQLfree((void *) b->yy_ch_buf  );

	SPARQLfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SPARQLalloc(new_size  );

		else
			(yy_start_stack) = (int *) SPARQLrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SPARQLalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *SPARQLrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SPARQLfree (void * ptr )
{
			free( (char *) ptr );	/* see SPARQLrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 463 "lib/SPARQLScanner.lpp"


/* END semantic actions for SPARQL terminals */

/* START SPARQLScanner */
namespace w3c_sw {

SPARQLScanner::SPARQLScanner (SPARQLDriver* driver, std::istream* in, std::ostream* out) : SPARQLFlexLexer(in, out), driver(driver) {  }
SPARQLScanner::~SPARQLScanner () {  }

SPARQLParser::token_type SPARQLScanner::typedLiteral (SPARQLParser::semantic_type*& yylval, SPARQLParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::runtime_error("program flow exception -- imroper call to SPARQLScanner::typedLiteral"));
    }
}

SPARQLParser::token_type SPARQLScanner::unescape (SPARQLParser::semantic_type*& yylval, SPARQLParser::location_type*& yylloc, size_t skip, SPARQLParser::token_type tok){
    std::string* space = new std::string;
    YaccDriver::unescapeString(yytext+skip, yyleng-skip-skip, space, yylloc);
    yylval->p_string = space;
    return tok;
}

void SPARQLScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END SPARQLScanner */

} // END namespace w3c_sw

/* This implementation of SPARQLFlexLexer::yylex() is required to fill the
 * vtable of the class SPARQLFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SPARQLScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SPARQLFlexLexer::yylex()
{
    std::cerr << "in SPARQLFlexLexer::yylex() !" << std::endl;
    return 0;
}


