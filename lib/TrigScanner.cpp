#ifdef _MSC_VER
#include <stdint.h>
#endif

#line 2 "lib/TrigScanner.cpp"

#line 4 "lib/TrigScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer TrigFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file; 
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *Trigalloc (yy_size_t  );
void *Trigrealloc (void *,yy_size_t  );
void Trigfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 35
#define YY_END_OF_BUFFER 36
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1170] =
    {   0,
        0,    0,   36,   34,    2,    1,    1,   34,    2,   34,
       13,   14,   34,   10,    4,   26,   22,    9,   34,   34,
       34,   34,   34,   34,   11,   12,   34,   34,   18,   34,
       34,    5,    6,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,    2,    1,    0,
       30,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    2,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   29,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       26,   27,    0,    0,    0,   23,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   21,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   25,   25,   25,    0,    0,
       22,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   33,   15,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   30,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   29,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   27,    0,    0,   28,    0,
        0,   23,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       23,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   25,   25,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       24,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    2,    2,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
       23,    0,   23,   23,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   23,   23,   23,   23,   23,   23,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   25,   25,   25,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    7,    0,
        0,   24,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       16,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   23,
       23,   23,   23,   23,   23,   23,   23,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   19,   25,
        3,    0,   24,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   24,   24,   24,   24,   24,   24,    0,
        0,    0,   17,   32,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   31,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   25,    8,   24,   24,   24,
       24,   24,   24,   24,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   20,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   31,   32,   33,
       34,   35,   36,   37,   37,   37,   37,   37,   37,   38,
       37,   39,   40,   37,   41,   37,   37,   42,   37,   37,
       43,   44,   45,   46,   47,    1,   48,   49,   50,   50,

       51,   52,   53,   54,   55,   56,   56,   57,   56,   58,
       56,   59,   56,   60,   61,   62,   63,   56,   56,   64,
       56,   56,   65,    1,   66,   67,   68,   69,   70,   71,
       71,   71,   71,   72,   73,   73,   73,   73,   73,   74,
       74,   73,   75,   76,   76,   76,   76,   76,   76,   76,
       77,   78,   78,   78,   78,   78,   78,   78,   79,   80,
       80,   80,   80,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   82,   83,   83,   83,   83,   84,
       84,   84,   85,   86,   86,   86,   86,   86,   86,   87,
       88,   89,   89,   90,   91,   92,   92,   92,   92,   92,

       92,   92,   92,   93,   94,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   96,   97,   98,   99,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  101,  102,  103,  104,
      105,  106,  107,  108,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89
    } ;

static yyconst YY_CHAR yy_meta[109] =
    {   0,
        1,    1,    2,    2,    1,    3,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    3,    3,
        5,    3,    3,    1,    3,    3,    3,    3,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    3,    3,    3,    1,    7,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    1,    1,    3,    3,    8,    8,
        8,    8,    8,    8,    8,    8,    9,    8,    8,    8,
        8,    8,    8,    8,    9,    8,    8,    8,   10,    3,
        7,    7,    3,    7,    7,    7,    7,    7,    7,    7,

        7,    3,    7,    7,    7,    7,    7,    3
    } ;

static yyconst flex_uint16_t yy_base[1636] =
    {   0,
        0,    0, 3197, 7346,  107, 7346, 3193,  106,  125,  222,
     7346, 7346,   95, 7346, 3174,   96,  321, 7346,  403,   61,
      494,   82,   79,   80,  119, 7346, 3148, 3171,    0, 3144,
     3131, 7346, 7346,    0,   48,   58,   49,   71,    0,  533,
     3121,    0,   96,   95,  159,    0,  179,  127, 7346,  615,
     3182,  390,    0,  104,    0,  198,    0,   50,  202,  655,
      675,  695,  222,  694,    0,  218,    0,  317,    0,   75,
      378,  734,  754,  774,  263,  851, 3176,  426,    0,  323,
        0,  490,    0,  177,  494,  891,  911,  931,  554, 3166,
      611,  610,  612,  323,  616, 1010, 1112,    0,  263,  388,

      355,  570,    0, 1111, 3117,    0,  600,  599,  612,    0,
      795, 1174, 7346,   86,    0,  798,    0,  827,    0,  222,
      831, 1214, 1234, 1254,  818, 3167,  382,  381, 1325, 3162,
     1423, 3098,    0,  358,    0,  434,  359,  840,    0, 1462,
     3113,    0,  860,  994, 1007,    0, 1072,  305,  420,  609,
     1158, 7346, 7346, 1110, 3124, 3117,    0,    0,    0, 3105,
      938,    0, 1095,    0,    0,  950, 3109,    0,    0,    0,
        0, 1150,    0,  106,    0,    0,    0, 7346, 1544, 1210,
     1531,    0,    0,    0,    0,    0, 1321,    0,  259,    0,
     3089,    0, 3088,    0, 3087,    0, 3086,    0, 3085,    0,

     3066,    0, 3065,    0, 3063,    0, 3048,    0, 3047,    0,
     3046,    0, 3045,    0, 3044,    0, 3043,    0, 3040,    0,
     3037,    0,    0,    0,    0,    0, 1419,    0,  358,    0,
     3036,    0, 3035,    0, 3034,    0, 3033,    0, 3032,    0,
     3031,    0, 3010,    0, 3009,    0, 3008,    0, 3002,    0,
     3001,    0, 3000,    0, 2999,    0, 2998,    0, 2997,    0,
     2990, 7346, 1641, 1544, 1568,    0,    0,    0,    0,    0,
     1484,    0,  392,    0, 2989,    0, 2964,    0, 2963,    0,
     2962,    0, 2961,    0, 2960,    0, 2959,    0, 2958,    0,
     2957,    0, 2946,    0, 2945,    0, 2943,    0, 2942,    0,

     2941,    0, 2940,    0, 2938, 1415,  469, 2980, 2972, 1581,
     1638, 1740,    0, 1842, 2870,    0,  392,    0, 1088,  406,
     1164,    0, 1841, 2860,    0, 1603, 1540, 1615,    0, 1635,
        0,    0,    0, 2770, 1265,    0, 1328,    0,    0, 1354,
     2707,    0,    0,    0,    0, 1736,    0,  394,    0,    0,
        0, 1842, 1847,    0,    0,    0,    0,    0, 1861,    0,
      450,    0, 2684,    0, 2659,    0, 2648,    0, 2524,    0,
     2506,    0, 2487,    0, 2481,    0, 2456,    0, 2454,    0,
     2404,    0, 2398,    0, 2247,    0, 2245,    0, 2228,    0,
     2205,    0, 2199,    0,  522, 1212, 1932,    0,    0, 1424,

     1521,    0, 1591,    0,    0, 1635, 2177,    0,    0,    0,
        0, 1928,    0,  547,    0,    0,    0, 1087, 1074, 1103,
     2022,    0, 1350, 1641, 1366, 1820,    0, 2061, 2148,    0,
     2018, 1800, 2022,    0, 2081, 2154, 2073,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 2157, 2259, 2158,    0,
     2091,    0, 2111,    0,  616, 2146, 2299, 2319, 2339, 1682,
     2246, 2259, 2421, 2523,    0,    0,  551,    0,    0,  968,
        0,    0, 1009,    0,    0, 1011,    0,    0, 1069,    0,
        0, 1090,    0,    0, 1139,    0,    0, 1141,    0,    0,
     1166,    0,    0, 1168,    0,    0, 1281,    0,    0, 1283,

        0,    0, 1323,    0,    0, 1325,    0,    0, 1361,    0,
        0, 1381, 2542, 2561,    0,    0, 1408,    0,    0, 1412,
        0,    0, 1497,    0,    0, 1499,    0,    0, 1567,    0,
        0, 1569,    0,    0, 1596,    0,    0, 1676,    0,    0,
     1678,    0,    0, 1680,    0,    0, 1698,    0,    0, 1725,
        0,    0, 1727,    0,    0, 1729,    0,    0, 1738,    0,
        0, 1740, 2658, 2755, 2274,    0, 2155,    0, 2269,    0,
     1852, 2353, 2795, 2815, 2835, 1935, 2421, 2426, 2912, 3009,
        0,    0, 1854,    0,    0, 1868,    0,    0, 1870,    0,
        0, 1872,    0,    0, 1888,    0,    0, 1890,    0,    0,

     1930,    0,    0, 1932,    0,    0, 1957,    0,    0, 1959,
        0,    0, 1961,    0,    0, 1978,    0,    0, 1980,    0,
        0, 2079,    0,    0, 2081,    0,    0, 2104, 2090, 2029,
     3108, 2458,    0,    0,    0,    0, 2243, 2397,    0, 2199,
        0,    0, 2110, 1952,    0,    0,    0,    0, 2462,    0,
     2116,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 2522, 2547, 3190, 3273,    0,    0, 2118,
        0,    0, 2121,    0,    0, 2124,    0,    0, 2126,    0,
        0, 2157,    0,    0, 2195,    0,    0, 2197,    0,    0,
     2212,    0,    0, 2214,    0,    0, 2217,    0,    0, 2225,

        0,    0, 2232,    0,    0, 2234,    0,    0, 2237,    0,
        0, 2356,    0,    0, 2358, 1934, 2442,  346, 3364,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1462,
     2164, 3454,    0, 1858,    0, 1957,    0, 2411, 2229, 2476,
        0, 3493, 1797,    0, 2512, 2519, 2595,    0, 2615,    0,
        0, 1790, 2417,    0, 2634,    0,    0, 2627, 1780,    0,
        0,    0,    0, 2647,    0, 2361,    0,    0,    0, 3564,
     1791, 3665, 2752, 2757,    0,    0,    0,    0,    0, 2654,
        0, 2374,    0, 1741,    0, 1730,    0, 1695,    0, 1672,
        0, 1642,    0, 1640,    0, 1570,    0, 1527,    0, 1515,

        0, 1503,    0, 1490,    0, 1478,    0, 1437,    0, 1425,
        0, 1413,    0, 1362, 2789, 2909, 3767, 3869,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3888, 3907,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4004, 2914,
     2946,    0,    0,    0,    0,    0, 2742,    0, 2376,    0,
     1358,    0, 1346,    0, 1326,    0, 1257,    0, 1169,    0,
     1144,    0, 1124,    0, 1070,    0, 1046,    0,  965,    0,
      942,    0,  939,    0,  552,    0,  548,    0,  508,    0,
      451, 3006, 3011, 4101, 4198,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 4297,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3043, 3189, 4379, 4462,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  496,  396,
     4553,  359, 4643,    0,    0, 2896, 2708,    0, 2879,    0,
        0, 2748,  423,    0,    0,    0,    0, 2996,    0, 2380,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 7346, 3196, 3221, 4744, 4846,    0,    0,
     2451,    0,    0, 2453,    0,    0, 2478,    0,    0, 2505,
        0,    0, 2521,    0,    0, 2523,    0,    0, 2611,    0,

        0, 2613,    0,    0, 2656,    0,    0, 2658,    0,    0,
     2681,    0,    0, 2683,    0,    0, 2687,    0,    0, 2692,
        0,    0, 2710,    0,    0, 2736, 3279, 3292, 7346, 3305,
     3645, 4943, 5040,    0,    0, 2755,    0,    0, 2838,    0,
        0, 2840,    0,    0, 2844,    0,    0, 2846,    0,    0,
     2849,    0,    0, 2881,    0,    0, 2884,    0,    0, 2886,
        0,    0, 2898,    0,    0, 2900,    0,    0, 2902,    0,
        0, 2904,    0,    0, 2912,    0,    0, 2935,    0,    0,
     2937, 3652, 3684, 3689, 3754,  876, 5131, 5221,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3767, 3791, 5322,

     5424,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3804, 5526, 3856, 3869, 5623,
     5720,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3893, 5817, 3906, 5900,  419,
     4001, 4006, 4038, 4098, 4103, 4135, 4195, 4200,    0, 4232,
     4378,    0, 4385, 4410, 4468, 4481, 4494, 4724, 4731, 4763,
     6002, 4768, 6099, 6182, 4833, 4846,    0,    0, 7346, 6290,
     6297, 6304, 6309,  361,  341, 6309, 6311, 6313, 6315, 6317,
     6319, 6321, 6323, 6332, 6332, 6334, 6336, 6338, 6347, 6347,
     6349, 6351, 6353,  303, 6355, 6357, 6359, 6361, 6368, 6368,

     6370, 6372, 6374, 6380,  187, 6379, 6381, 6383, 6385, 6387,
     6392, 6392, 6394, 6396, 6398, 6400, 6402, 6404, 6406, 6408,
     6410, 6419, 6419, 6421, 6423, 6425, 6427, 6429, 6431, 6433,
     6435, 6437, 6439, 6441, 6443, 6445, 6447, 6449, 6451, 6453,
     6455, 6457, 6459, 6461, 6463, 6465, 6467, 6469, 6471, 6473,
     6475, 6477, 6479, 6481, 6483, 6485, 6487, 6489, 6491, 6493,
     6495, 6497, 6499, 6501, 6503, 6505, 6507, 6509, 6511, 6513,
     6515, 6517, 6519, 6521, 6523, 6525, 6527, 6529, 6531, 6533,
     6535, 6537, 6539, 6541, 6543, 6545, 6547, 6549, 6551, 6553,
     6555, 6557, 6566, 6566, 6568, 6570, 6572, 6574, 6576, 6578,

     6580, 6582, 6584, 6586, 6588, 6590, 6592, 6594, 6596, 6598,
     6600, 6602, 6604, 6606, 6608, 6610, 6612, 6614, 6616, 6618,
     6620, 6622, 6624, 6626, 6628, 6630, 6632, 6634,  140, 6636,
     6638, 6640, 6642, 6644, 6646, 6648, 6650, 6652, 6654, 6656,
     6658, 6660, 6662, 6664, 6666, 6668, 6670, 6672, 6674, 6676,
     6678, 6680, 6682, 6684, 6686, 6688, 6690, 6692, 6694, 6696,
     6698, 6700, 6702, 6704, 6706, 6708, 6710, 6712, 6714, 6716,
     6718, 6720, 6722, 6724, 6726, 6728, 6730, 6732, 6734, 6739,
     6742, 6741, 6743, 6745, 6747, 6749, 6751, 6753, 6755, 6757,
     6759,  137, 6761, 6763, 6765, 6767, 6769, 6778, 6778, 6780,

     6782, 6784, 6793, 6793, 6795, 6797, 6799, 6801, 6803, 6805,
     6807, 6809, 6811, 6813, 6815, 6817, 6819, 6821, 6823, 6832,
     6832, 6834, 6836, 6838, 6840, 6842, 6844, 6846, 6848, 6850,
     6852, 6854, 6856, 6858, 6860, 6862, 6871, 6871, 6873, 6875,
     6877, 6886, 6886, 6888, 6890, 6892, 6894, 6896, 6898, 6900,
     6902, 6904, 6906, 6908, 6910, 6912, 6914, 6916, 6918, 6920,
     6922, 6924, 6926, 6928, 6930, 6932, 6934, 6936, 6938, 6945,
     6945, 6947, 6949, 6951, 6953, 6955, 6957, 6959, 6961, 6963,
     6965, 6967, 6969, 6971, 6973, 6975, 6981, 6984, 6983,  123,
     6985, 6987, 6989, 6991, 6993, 6995, 6997, 6999, 7001, 7003,

     7005, 7007, 7009, 7011, 7013, 7022, 7022, 7024, 7026, 7028,
     7030, 7032, 7034, 7036, 7038, 7040, 7042, 7044, 7046, 7048,
     7050, 7052, 7054, 7056, 7058, 7060, 7062, 7064, 7066, 7068,
     7070, 7072, 7074, 7076, 7078, 7080, 7082, 7084, 7086, 7088,
     7090, 7099, 7106, 7113, 7113, 7115, 7117, 7119, 7121, 7123,
     7125, 7127, 7129, 7131, 7133, 7135, 7137, 7139, 7141, 7143,
     7145, 7147, 7149, 7151, 7153, 7155, 7157, 7159, 7161, 7163,
     7165, 7167, 7169, 7171, 7173, 7175, 7177, 7179, 7181, 7190,
     7190, 7197, 7201, 7200, 7202, 7204, 7206, 7208, 7210, 7212,
     7214, 7216, 7218, 7220, 7229, 7229, 7231, 7233, 7235, 7237,

     7239, 7241, 7243, 7245, 7247, 7249, 7251, 7253, 7255, 7257,
     7259, 7268, 7268, 7270, 7272, 7274, 7276, 7278, 7280, 7282,
     7284, 7286, 7288, 7290, 7292, 7294, 7296, 7298, 7304, 7303,
     7312, 7319, 7326, 7333, 7338
    } ;

static yyconst flex_int16_t yy_def[1636] =
    {   0,
     1169,    1, 1169, 1169, 1169, 1169, 1169, 1170, 1171, 1172,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1173, 1174,
     1169,   21,   21,   21, 1169, 1169, 1169, 1169,   21,   21,
       21, 1169, 1169, 1175, 1175, 1169, 1175, 1169, 1176, 1169,
     1177, 1178, 1169, 1169, 1169, 1179, 1169, 1169, 1169, 1170,
     1169, 1169, 1180, 1169, 1181, 1169, 1182, 1183, 1169, 1169,
     1169, 1169, 1169, 1184, 1185, 1169, 1186, 1169, 1187, 1188,
     1169, 1169, 1169, 1169, 1169, 1189, 1169, 1169, 1190, 1169,
     1191, 1169, 1192, 1193, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1194, 1194, 1169,

     1194, 1169, 1195, 1169, 1196, 1197, 1169, 1169, 1169, 1198,
     1169, 1199, 1169, 1169, 1200, 1169, 1201, 1169, 1202, 1203,
     1169, 1169, 1169, 1169, 1169, 1204, 1204, 1204, 1169,  129,
     1169, 1169, 1205, 1205, 1206, 1206, 1205, 1169, 1207, 1169,
     1208, 1209, 1169, 1169, 1169, 1210, 1169,  129,  129,  129,
     1169, 1169, 1169, 1211,  129,  129,  129, 1212, 1213, 1212,
     1212, 1214, 1212, 1212, 1215, 1215, 1216, 1216, 1213, 1212,
     1217, 1169, 1218, 1218, 1219, 1220, 1221, 1169, 1222, 1169,
     1169, 1223, 1224, 1223, 1223, 1225, 1169, 1225, 1225, 1226,
     1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,

     1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
     1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
     1257, 1258, 1259, 1258, 1258, 1260, 1169, 1260, 1260, 1261,
     1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
     1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
     1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
     1292, 1169, 1293, 1169, 1169, 1294, 1295, 1294, 1294, 1296,
     1169, 1296, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
     1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
     1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,

     1324, 1325, 1326, 1327, 1328, 1169, 1169, 1169, 1169, 1169,
     1169, 1169,  312, 1169, 1169, 1329, 1329, 1330, 1330, 1329,
     1169, 1331, 1169, 1332, 1333, 1169, 1169, 1169, 1334, 1169,
      312, 1335, 1336, 1335, 1335, 1337, 1335, 1335, 1338, 1338,
     1339, 1339, 1336, 1335, 1340, 1169, 1341, 1341, 1342, 1343,
     1344, 1169, 1169, 1345, 1346, 1345, 1345, 1347, 1169, 1347,
     1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
     1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
     1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
     1377, 1378, 1379, 1380, 1381, 1381, 1169, 1382, 1383, 1382,

     1382, 1384, 1382, 1382, 1385, 1385, 1386, 1386, 1383, 1382,
     1387, 1169, 1388, 1388, 1389, 1390, 1391,  397,  397,  397,
     1169, 1392, 1392, 1169, 1392, 1169, 1393, 1169, 1394, 1395,
     1169, 1169, 1169, 1396, 1169,  397,  397,  397,  397,  397,
      397,  397,  397, 1397, 1397, 1397, 1398, 1398, 1169, 1399,
     1169, 1400, 1169, 1401, 1402, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1403, 1403, 1404, 1404, 1404, 1404, 1405, 1405,
     1404, 1406, 1406, 1407, 1407, 1407, 1407, 1408, 1408, 1407,
     1409, 1409, 1407, 1410, 1410, 1411, 1411, 1411, 1411, 1412,
     1412, 1411, 1413, 1413, 1411, 1414, 1414, 1415, 1415, 1415,

     1415, 1416, 1416, 1415, 1417, 1417, 1415, 1418, 1418, 1419,
     1419, 1419, 1420, 1420, 1421, 1421, 1421, 1421, 1422, 1422,
     1421, 1423, 1423, 1424, 1424, 1424, 1424, 1425, 1425, 1424,
     1426, 1426, 1424, 1427, 1427, 1428, 1428, 1428, 1428, 1429,
     1429, 1428, 1430, 1430, 1428, 1431, 1431, 1432, 1432, 1432,
     1432, 1433, 1433, 1432, 1434, 1434, 1432, 1435, 1435, 1436,
     1436, 1436, 1437, 1437, 1169, 1438, 1169, 1439, 1169, 1440,
     1441, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1442, 1442,
     1443, 1443, 1443, 1443, 1444, 1444, 1443, 1445, 1445, 1446,
     1446, 1446, 1446, 1447, 1447, 1446, 1448, 1448, 1446, 1449,

     1449, 1450, 1450, 1450, 1450, 1451, 1451, 1450, 1452, 1452,
     1450, 1453, 1453, 1454, 1454, 1454, 1454, 1455, 1455, 1454,
     1456, 1456, 1454, 1457, 1457, 1458, 1458, 1458, 1169, 1169,
     1169, 1169,  631,  631, 1459, 1460, 1459, 1459, 1461, 1459,
     1459, 1462, 1462, 1463, 1463, 1460, 1459, 1464, 1169, 1465,
     1465, 1466, 1467, 1468,  631,  631,  631,  631,  631,  631,
     1469, 1469, 1469, 1169, 1169, 1470, 1470, 1471, 1471, 1471,
     1471, 1472, 1472, 1471, 1473, 1473, 1474, 1474, 1474, 1474,
     1475, 1475, 1474, 1476, 1476, 1474, 1477, 1477, 1478, 1478,
     1478, 1478, 1479, 1479, 1478, 1480, 1480, 1478, 1481, 1481,

     1482, 1482, 1482, 1482, 1483, 1483, 1482, 1484, 1484, 1482,
     1485, 1485, 1486, 1486, 1486, 1487, 1488, 1488, 1169,  719,
      719,  719,  719,  719,  719, 1489, 1489, 1489,  719,  719,
      719, 1169,  732, 1169, 1490, 1490, 1491, 1491, 1490, 1169,
     1492, 1169, 1493, 1494, 1169, 1169, 1169, 1495, 1169, 1496,
     1497, 1496, 1496, 1498, 1496, 1496, 1499, 1499, 1500, 1500,
     1497, 1496, 1501, 1169, 1502, 1502, 1503, 1504, 1505, 1169,
      770, 1506, 1169, 1169, 1507, 1508, 1507, 1507, 1509, 1169,
     1509, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
     1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,

     1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
     1538, 1539, 1540, 1541, 1169, 1169, 1542, 1542,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818, 1543, 1543,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834, 1544, 1169,
     1169, 1545, 1546, 1545, 1545, 1547, 1169, 1547, 1547, 1548,
     1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
     1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568,
     1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578,
     1579, 1169, 1169, 1580, 1580,  895,  895,  895,  895,  895,

      895,  895,  895,  895,  895,  895,  895,  895,  895, 1169,
      910,  910,  910,  910,  910,  910,  910, 1581, 1581, 1581,
     1169, 1169, 1582, 1582,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924, 1583, 1583,
     1169,  941, 1169, 1584, 1585, 1584, 1584, 1586, 1584, 1584,
     1587, 1587, 1588, 1588, 1585, 1584, 1589, 1169, 1590, 1590,
     1591, 1592, 1593,  943,  943,  943,  943,  943,  943, 1594,
     1594, 1594,  941, 1169, 1169, 1169, 1595, 1595, 1596, 1596,
     1596, 1596, 1597, 1597, 1596, 1598, 1598, 1599, 1599, 1599,
     1599, 1600, 1600, 1599, 1601, 1601, 1599, 1602, 1602, 1603,

     1603, 1603, 1603, 1604, 1604, 1603, 1605, 1605, 1603, 1606,
     1606, 1607, 1607, 1607, 1607, 1608, 1608, 1607, 1609, 1609,
     1607, 1610, 1610, 1611, 1611, 1611, 1169, 1169, 1169, 1169,
     1169, 1612, 1612, 1613, 1613, 1613, 1613, 1614, 1614, 1613,
     1615, 1615, 1616, 1616, 1616, 1616, 1617, 1617, 1616, 1618,
     1618, 1616, 1619, 1619, 1620, 1620, 1620, 1620, 1621, 1621,
     1620, 1622, 1622, 1620, 1623, 1623, 1624, 1624, 1624, 1624,
     1625, 1625, 1624, 1626, 1626, 1624, 1627, 1627, 1628, 1628,
     1628, 1169, 1169, 1169, 1169, 1629, 1169, 1169, 1088, 1088,
     1088, 1088, 1088, 1088, 1630, 1630, 1630, 1169, 1169, 1631,

     1631, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1169, 1632, 1169, 1169, 1633,
     1633, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121,
     1121, 1121, 1121, 1121, 1121, 1169, 1634, 1169, 1635, 1629,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1101, 1169,
     1169, 1121, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1632, 1169, 1634, 1635, 1169, 1169, 1101, 1121,    0, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169
    } ;

static yyconst flex_uint16_t yy_nxt[7455] =
    {   0,
        4,    5,    6,    7,    5,    4,    8,    9,    4,    4,
        4,   10,   11,   12,    4,   13,   14,   13,   15,    4,
       16,   17,   18,   19,    4,    4,    4,   20,   21,   22,
       21,   21,   21,   23,   21,   21,   21,   24,   21,   21,
       21,   21,   25,    4,   26,   27,   28,   29,   22,   21,
       21,   30,   23,   21,   21,   21,   21,   21,   24,   21,
       21,   31,   21,   21,   32,   33,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
       34,   35,    4,   36,   37,   38,   39,   40,   41,   42,

       43,    4,   44,   45,   46,   46,   47,    4,   48,  127,
      148,   48,   51,   90,   93,   91,   91,  149,  150,  128,
      151,  151,  151,  151,  157,  157,  352,   94,   48,  148,
      732,   48,  157,  157,  187,  188,  188,  189,  149,  150,
      157,  157,  157,  157,  421,  157,   94,  312,  353,   52,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  227,
      228,  228,  229,  152,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  171,  171,  171,  171,  172,
      173,  173,  174,  182,  182,  182,  182,  182,  182,  182,
      182,  182, 1169, 1169,  129,   53,   53,   53,   53,   53,

       53,   54,   55,   55,   55,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   65,   65,   65,   65,   65,   65,
       66,   67,   67,   67,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   77,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  271,  272,  272,  273,   78,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  190,  190,  190,
      191,  192,  192,  193,  194,  194,  194,  194,  194,  195,
      220,  220,  220,  220,  220,  220,  221,  222,  222,  222,

      222,  222,  222,  222,  222,  222,  359,  360,  360,  361,
       96,   79,   79,   79,   79,   79,   79,   80,   81,   81,
       81,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       95,  260,  260,  260,  260,  260,  260,  261,  308,   96,
      308,   96,   96,  309,  418, 1169, 1169,   96,  157,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,  394,   97,  418,  126,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,   50,  940,  394,  394,

     1087,   50,  266,  266,  266,  266,  266,  266,  266,  266,
      266,   98,   99,  394,  100,  101,  102,  103,  104,  105,
      106,  107, 1087,  108,  109,  110,  110,  111,  113,  395,
      180,   96,   76,   50,  129,  129,  394,   76,   50,   96,
      396,   50,  129,  129, 1169, 1169,  114,   50,  419,   50,
     1086,   50,  181,  230,  230,  230,  231,  232,  232,  233,
      234,  234,  234,  234,  234,  235,  264,  419,  312,   76,
       96,   96,   96,   96,   76,   96,  312,   76, 1169, 1169,
     1169, 1169,  312,   76,  629,   76,  629,   76,  265,  630,
      312,  732,  115,  115,  115,  115,  115,  115,  116,  117,

      117,  117,  117,  118,  119,  120,  121,  122,  123,  124,
      125,  129,  130,  394,  129,  131,  129,  129,  129,  129,
     1169,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129, 1169, 1169, 1081,  394,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  274,
      274,  274,  275,  276,  276,  277,  278,  278,  278,  278,
      278,  279,  717,  132,  133,  134,  135,  136,  137,  138,
      139,  140,  141,  142,  143, 1078,  144,  145,  146,  146,

      147,  160,  161,  162,  163,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  165,  165,  165,  165,  165,
      166,  178,  304,  304,  304,  304,  304,  304,  305,   93,
       92,   91,  306, 1169, 1169, 1075,  310, 1169, 1169, 1072,
      420,   94,   94,  307,  310,  310,  310,  310,  310,  332,
      332,  332,  332,  332,  332,  332,  332,  332,   52,  420,
       94,   94,  307,  310,  310,  310,  310,  310,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  345,
      345,  345,  345,  346,  347,  347,  348,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,

      780,  781,  781,  782,   53,   53,   53,   53,   53,   53,
       54,   55,   55,   55,   55,   56,   57,   58,   59,   60,
       61,   62,   63,  196,  196,  196,  196,  196,  196,  197,
      198,  198,  198,  199,  200,  200,  201,  202,  202,  202,
      202,  202,  203,  204,  204,  204,  204,  204,  204,  205,
      206,  206,  206,  207,  208,  208,  209,  210,  210,  210,
      210,  210,  211,  212,  212,  212,  212,  212,  212,  213,
      214,  214,  214,  215,  216,  216,  217,  218,  218,  218,
      218,  218,  219,   65,   65,   65,   65,   65,   65,   66,
       67,   67,   67,   67,   68,   69,   70,   71,   72,   73,

       74,   75,  236,  236,  236,  236,  236,  236,  237,  238,
      238,  238,  239,  240,  240,  241,  242,  242,  242,  242,
      242,  243,  244,  244,  244,  244,  244,  244,  245,  246,
      246,  246,  247,  248,  248,  249,  250,  250,  250,  250,
      250,  251,  252,  252,  252,  252,  252,  252,  253,  254,
      254,  254,  255,  256,  256,  257,  258,  258,  258,  258,
      258,  259,  262,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  392,  392,  392,  392,
      392,  392,  393,  394,   78,  356,  356,  356,  356,  356,

      356,  356,  356,  356,  356,  356,  362,  362,  362,  363,
      364,  364,  365,  366,  366,  366,  366,  366,  367,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410, 1140,
       79,   79,   79,   79,   79,   79,   80,   81,   81,   81,
       81,   82,   83,   84,   85,   86,   87,   88,   89,  280,
      280,  280,  280,  280,  280,  281,  282,  282,  282,  283,
      284,  284,  285,  286,  286,  286,  286,  286,  287,  288,
      288,  288,  288,  288,  288,  289,  290,  290,  290,  291,
      292,  292,  293,  294,  294,  294,  294,  294,  295,  296,

      296,  296,  296,  296,  296,  297,  298,  298,  298,  299,
      300,  300,  301,  302,  302,  302,  302,  302,  303,  311,
      439,  439,  439,  439,  439,  439, 1069,  312,  313, 1066,
      312,  312,  157,  157,  157,  157,  157,  157,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312, 1063,  314, 1169, 1169,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  411,  411,  411,  411,  412,  413,
      413,  414,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415, 1169, 1169, 1169, 1169,  315,

      316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
      326,  730,  327,  328,  329,  329,  330,  331,  729,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  730, 1060,  331,  731,  331,  729,  331,  331,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  731, 1169, 1169, 1057,  331,  151,
      151,  151,  151,  439,  439,  439,  439,  439,  439,  439,
      312,  312,  312,  312, 1169,  312, 1169, 1169,  331,  334,
      335,  336,  337,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  339,  339,  339,  339,  339,  340,  113,

      422,  423,  152,  424,  425,  426,  427,  428,  429,  430,
      431, 1054,  432,  433,  434,  434,  435,  114,  442,  442,
      442,  442,  442,  442,  442, 1169, 1169, 1169, 1169,  394,
      461, 1051,  443,  443,  443,  443,  443,  443,  461,  461,
      461,  461,  461,  635,  635,  635,  635,  635,  635,  635,
      635,  635, 1169, 1169, 1169, 1169, 1048,  461,  461,  461,
      461,  461,  718,  115,  115,  115,  115,  115,  115,  116,
      117,  117,  117,  117,  118,  119,  120,  121,  122,  123,
      124,  125,  368,  368,  368,  368,  368,  368,  369,  370,
      370,  370,  371,  372,  372,  373,  374,  374,  374,  374,

      374,  375,  376,  376,  376,  376,  376,  376,  377,  378,
      378,  378,  379,  380,  380,  381,  382,  382,  382,  382,
      382,  383,  384,  384,  384,  384,  384,  384,  385,  386,
      386,  386,  387,  388,  388,  389,  390,  390,  390,  390,
      390,  391,  129,  130, 1045,  129,  131,  656,  656,  656,
      656,  656,  656,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129, 1169, 1169, 1169,
     1169,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  464,
      464,  464,  464,  464,  464,  464,  656,  656,  656,  656,

      656,  656,  656,  464,  464,  464,  464,  464,  464, 1169,
     1169, 1169, 1169, 1042,  132,  133,  134,  135,  136,  137,
      138,  139,  140,  141,  142,  143,  421,  144,  145,  146,
      146,  147,   95, 1039,  421,  306,   96,   96,   96,   96,
       96,   96,  421,   96,   96, 1036,  307, 1169, 1169, 1026,
      421,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,  307,   97, 1169, 1169,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,  514,  514,  514,
      514,  514,  514,  514, 1169, 1169,  941,  719, 1169, 1169,

     1023,  514,  514,  514,  514,  514,  514,  720,  720,  720,
      720,  720, 1020,   98,   99,  941,  100,  101,  102,  103,
      104,  105,  106,  107, 1017,  108,  109,  110,  110,  111,
      400,  401,  402,  403,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  405,  405,  405,  405,  405,  406,
      448,  462,  580,  580,  580,  580,  580,  580,  580,  462,
      462,  462,  462,  462,  577, 1014,  580,  580,  580,  580,
      580,  580,  577,  577,  577,  577,  577, 1011,  462,  462,
      462,  462,  462, 1169, 1169, 1169, 1169,  449,  578,  720,
     1008,  577,  577,  577,  577,  577,  578,  578,  578,  578,

      578,  631, 1005,  721,  721,  721,  721,  721,  721,  631,
      631,  631,  631,  631, 1002,  578,  578,  578,  578,  578,
      648,  648,  648,  648,  649,  650,  650,  651,  631,  631,
      631,  631,  631,  450,  450,  450,  450,  450,  450,  451,
      452,  452,  452,  452,  453,  454,  455,  456,  457,  458,
      459,  460,  564, 1169, 1169, 1169, 1169,  999,  632,  721,
      721,  721,  721,  721,  721,  721,  632,  632,  632,  632,
      632,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647, 1169, 1169,  565,  632,  632,  632,  632,  632,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,

      652,  652,  652,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  129,  129,  129,
      129,  129,  129,  421,  421,  421,  421,  996,  421,  993,
      566,  566,  566,  566,  566,  566,  567,  568,  568,  568,
      568,  569,  570,  571,  572,  573,  574,  575,  576,  311,
      813,  813,  813,  813,  813,  813,  814,  312,  313,  990,
      312,  312, 1169, 1169, 1169, 1169, 1169, 1169,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  987,  314, 1169, 1169,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,

      312,  312,  312,  312,  659,  659,  659,  659,  659,  659,
      659, 1169, 1169, 1169, 1169, 1169, 1169,  984,  660,  660,
      660,  660,  660,  660, 1169, 1169, 1169, 1169,  981,  315,
      316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
      326,  129,  327,  328,  329,  329,  330,  633,  421,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  664,  964,  633,  953,  633,  665,  633,  633,
      664,  664,  664,  664,  664,  665,  665,  665,  665,  665,
      763,  763,  763,  763,  764,  765,  765,  766,  633,  664,
      664,  664,  664,  664,  665,  665,  665,  665,  665,  750,

      750,  750,  750,  750,  750,  750,  750,  750,  633,  637,
      638,  639,  640,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  642,  642,  642,  642,  642,  643,  667,
      667,  667,  667,  667,  667,  667,  857,  858,  858,  859,
     1169, 1169,  943,  667,  667,  667,  667,  667,  667,  129,
      130,  394,  129,  131, 1169, 1169, 1169, 1169, 1169, 1169,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129, 1169, 1169, 1169, 1169,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  724,  724,  724,  724,

      724,  724,  724,  890,  890,  890,  890,  890,  890,  891,
      725,  725,  725,  725,  725,  725, 1169, 1169, 1169, 1169,
      312,  132,  133,  134,  135,  136,  137,  138,  139,  140,
      141,  142,  143,  732,  144,  145,  146,  146,  147,  732,
      733,  732,  732, 1169, 1169, 1169, 1169, 1169, 1169,  630,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732, 1169, 1169, 1169, 1169,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  767,  767,  767,

      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      630,  734,  735,  736,  737,  738,  739,  740,  741,  742,
      743,  744,  745,  771,  746,  747,  748,  748,  749,  752,
      753,  754,  755,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  757,  757,  757,  757,  757,  758,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  448,  447, 1169, 1169, 1169, 1169,  447,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
     1169, 1169,  312,  312,  312,  312,  312,  312,  773,  942,

      449,  447, 1169, 1169, 1169, 1169,  447, 1169, 1169,  447,
     1169, 1169, 1169, 1169,  770,  447,  759,  447,  942,  447,
      774,  783,  783,  783,  784,  785,  785,  786,  787,  787,
      787,  787,  787,  788,  852,  852,  852,  852,  852,  852,
      852,  852,  852, 1169, 1169,  129,  450,  450,  450,  450,
      450,  450,  451,  452,  452,  452,  452,  453,  454,  455,
      456,  457,  458,  459,  460,  772,  815,  913,  913,  913,
      913,  913,  913,  913,  815,  815,  815,  815,  815,  816,
      563, 1169, 1169, 1169, 1169,  563,  715,  816,  816,  816,
      816,  816,  712,  815,  815,  815,  815,  815, 1169, 1169,

     1169, 1169,  449, 1169, 1169,  732,  816,  816,  816,  816,
      816, 1169, 1169,  732,  850,  709,  911,  563, 1169, 1169,
     1169, 1169,  563, 1169, 1169,  563,  912,  912,  912,  912,
      912,  563,  706,  563,  703,  563,  851,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  450,  450,
      450,  450,  450,  450,  451,  452,  452,  452,  452,  453,
      454,  455,  456,  457,  458,  459,  460,  789,  789,  789,
      789,  789,  789,  790,  791,  791,  791,  792,  793,  793,
      794,  795,  795,  795,  795,  795,  796,  797,  797,  797,
      797,  797,  797,  798,  799,  799,  799,  800,  801,  801,

      802,  803,  803,  803,  803,  803,  804,  805,  805,  805,
      805,  805,  805,  806,  807,  807,  807,  808,  809,  809,
      810,  811,  811,  811,  811,  811,  812,  178,  860,  860,
      860,  861,  862,  862,  863,  864,  864,  864,  864,  864,
      865,  892, 1169, 1169, 1169, 1169,  893, 1169, 1169,  892,
      892,  892,  892,  892,  893,  893,  893,  893,  893,  394,
     1169, 1169, 1169, 1169,   52,  912, 1169, 1169,  892,  892,
      892,  892,  892,  893,  893,  893,  893,  893,  910,  913,
      913,  913,  913,  913,  913,  700,  910,  910,  910,  910,
      910,  697,  939,  732,  732,  732,  732, 1169,  732,  965,

      965,  965,  965,  965,  965,  910,  910,  910,  910,  910,
       53,   53,   53,   53,   53,   53,   54,   55,   55,   55,
       55,   56,   57,   58,   59,   60,   61,   62,   63,  178,
      916,  916,  916,  916,  916,  916,  916, 1169, 1169, 1169,
     1169,  694,  921,  691,  917,  917,  917,  917,  917,  917,
      921,  921,  921,  921,  921,  944,  944,  944,  944,  944,
      944,  944,  944,  944, 1169, 1169,   52,  922,  688,  921,
      921,  921,  921,  921,  685,  922,  922,  922,  922,  922,
      956,  956,  956,  956,  956,  956,  956,  956,  956,  956,
      956, 1169, 1169,  682,  922,  922,  922,  922,  922,  957,

      957,  957,  957,  958,  959,  959,  960, 1169, 1169, 1169,
     1169,  679,   53,   53,   53,   53,   53,   53,   54,   55,
       55,   55,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   65,   65,   65,   65,   65,   65,   66,   67,   67,
       67,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       65,   65,   65,   65,   65,   65,   66,   67,   67,   67,
       67,   68,   69,   70,   71,   72,   73,   74,   75,  564,
      961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
      961,  961,  961,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963, 1169, 1169, 1169,

     1169,  565,  965,  965,  965,  965,  965,  965,  965,  421,
      421,  421,  421,  421,  421,  968,  968,  968,  968,  968,
      968,  968,  978,  978,  978,  978,  978,  978,  978,  969,
      969,  969,  969,  969,  969,  676,  978,  978,  978,  978,
      978,  978, 1169, 1169, 1169, 1169,  673,  566,  566,  566,
      566,  566,  566,  567,  568,  568,  568,  568,  569,  570,
      571,  572,  573,  574,  575,  576,  849, 1169, 1169, 1169,
     1169,  670,  975, 1169, 1169,   96, 1089,  976, 1169, 1169,
      975,  975,  975,  975,  975,  976,  976,  976,  976,  976,
     1090, 1090, 1090, 1090, 1090, 1090, 1169, 1169,  565,  975,

      975,  975,  975,  975,  976,  976,  976,  976,  976, 1027,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1027, 1027, 1027,
     1027, 1027, 1169, 1169, 1033, 1033, 1033, 1033, 1033, 1033,
      732,  732,  732,  732,  732,  732, 1027, 1027, 1027, 1027,
     1027, 1169, 1169,  655,  566,  566,  566,  566,  566,  566,
      567,  568,  568,  568,  568,  569,  570,  571,  572,  573,
      574,  575,  576,  866,  866,  866,  866,  866,  866,  867,
      868,  868,  868,  869,  870,  870,  871,  872,  872,  872,
      872,  872,  873,  874,  874,  874,  874,  874,  874,  875,
      876,  876,  876,  877,  878,  878,  879,  880,  880,  880,

      880,  880,  881,  882,  882,  882,  882,  882,  882,  883,
      884,  884,  884,  885,  886,  886,  887,  888,  888,  888,
      888,  888,  889,  262, 1169, 1169, 1169, 1169,  644, 1028,
     1169, 1169, 1169, 1169, 1030, 1169, 1169, 1028, 1028, 1028,
     1028, 1028, 1030, 1030, 1030, 1030, 1030, 1090, 1090, 1090,
     1090, 1090, 1090, 1090,  634,   78, 1028, 1028, 1028, 1028,
     1028, 1030, 1030, 1030, 1030, 1030, 1031, 1169, 1169, 1088,
     1169, 1169, 1169, 1169, 1031, 1031, 1031, 1031, 1031, 1089,
     1089, 1089, 1089, 1089, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169,  309, 1031, 1031, 1031, 1031, 1031, 1169, 1169,

      309,   79,   79,   79,   79,   79,   79,   80,   81,   81,
       81,   81,   82,   83,   84,   85,   86,   87,   88,   89,
      262, 1169, 1169, 1169, 1169,  628, 1082,  625,  622,  619,
      616, 1083,  613,  610, 1082, 1082, 1082, 1082, 1082, 1083,
     1083, 1083, 1083, 1083,  607,  604,  601,  598,  595,  592,
      589,  586,   78, 1082, 1082, 1082, 1082, 1082, 1083, 1083,
     1083, 1083, 1083, 1084, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1084, 1084, 1084, 1084, 1084,  583,  562, 1094, 1094,
     1094, 1094, 1094, 1094,  559,  556,  553,  550,  547,  544,
     1084, 1084, 1084, 1084, 1084,  541,  538,  535,   79,   79,

       79,   79,   79,   79,   80,   81,   81,   81,   81,   82,
       83,   84,   85,   86,   87,   88,   89,  311,  532,  529,
      526,  523,  520,  517,  512,  312,  313,  509,  312,  312,
      506,  503,  500,  497,  494,  491,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      488,  314,  485,  482,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  479,  476,  473,  470,  467,  157,  438,  437,
      436,  407,  397, 1169,  394,  341,   92,  263,  179,  167,
      156,  155,  154,  153,   92,   49, 1169,  315,  316,  317,

      318,  319,  320,  321,  322,  323,  324,  325,  326, 1085,
      327,  328,  329,  329,  330,  113, 1098, 1085, 1085, 1085,
     1085, 1085, 1169, 1169, 1098, 1098, 1098, 1098, 1098, 1169,
     1169, 1169, 1169,  114, 1169, 1169, 1085, 1085, 1085, 1085,
     1085, 1099, 1169, 1098, 1098, 1098, 1098, 1098, 1169, 1099,
     1099, 1099, 1099, 1099, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1099, 1099,
     1099, 1099, 1099, 1169, 1169, 1169, 1169, 1169, 1169,  115,
      115,  115,  115,  115,  115,  116,  117,  117,  117,  117,
      118,  119,  120,  121,  122,  123,  124,  125,  113, 1116,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1116, 1116, 1116,
     1116, 1116, 1117, 1169, 1169, 1169,  114, 1169, 1169, 1169,
     1117, 1117, 1117, 1117, 1117, 1118, 1116, 1116, 1116, 1116,
     1116, 1169, 1169, 1118, 1118, 1118, 1118, 1118, 1169, 1117,
     1117, 1117, 1117, 1117, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1118, 1118, 1118, 1118, 1118, 1169, 1169, 1169,
     1169, 1169,  115,  115,  115,  115,  115,  115,  116,  117,
      117,  117,  117,  118,  119,  120,  121,  122,  123,  124,
      125,  129,  130, 1169,  129,  131, 1169, 1169, 1169, 1169,
     1169, 1169,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129, 1169, 1169, 1169, 1169,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169,  132,  133,  134,  135,  136,  137,  138,
      139,  140,  141,  142,  143, 1169,  144,  145,  146,  146,
      147,  732,  733, 1169,  732, 1169, 1169, 1169, 1169, 1169,
     1169, 1169,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732, 1169, 1169, 1169, 1169,

      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169,  734,  735,  736,  737,  738,  739,  740,
      741,  742,  743,  744,  745, 1169,  746,  747,  748,  748,
      749,  946,  947,  948,  949,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  951,  951,  951,  951,  951,
      952,  129,  130, 1169,  129,  131, 1169, 1169, 1169, 1169,
     1169, 1169,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129, 1169, 1169, 1169, 1169,
      129,  129,  129,  129,  973,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169,  132,  133,  134,  135,  136,  137,  138,
      139,  140,  141,  142,  143, 1119,  144,  145,  146,  146,
      147,  974, 1136, 1119, 1119, 1119, 1119, 1119, 1169, 1169,
     1136, 1136, 1136, 1136, 1136, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1119, 1119, 1119, 1119, 1119, 1169, 1169, 1136,

     1136, 1136, 1136, 1136, 1137, 1169, 1169, 1169,  449, 1138,
     1169, 1169, 1137, 1137, 1137, 1137, 1137, 1138, 1138, 1138,
     1138, 1138, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1137, 1137, 1137, 1137, 1137, 1138, 1138, 1138, 1138,
     1138, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169,  450,  450,  450,  450,  450,  450,
      451,  452,  452,  452,  452,  453,  454,  455,  456,  457,
      458,  459,  460,  178, 1139, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1139, 1139, 1139, 1139, 1139, 1141, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1141, 1141, 1141, 1141, 1141,

     1169, 1139, 1139, 1139, 1139, 1139, 1169, 1169, 1169, 1169,
       52, 1142, 1169, 1169, 1141, 1141, 1141, 1141, 1141, 1142,
     1142, 1142, 1142, 1142, 1143, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1143, 1143, 1143, 1143, 1143, 1169, 1142, 1142,
     1142, 1142, 1142, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1143, 1143, 1143, 1143, 1143,   53,   53,   53,   53,
       53,   53,   54,   55,   55,   55,   55,   56,   57,   58,
       59,   60,   61,   62,   63,  178, 1144, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1144, 1144, 1144, 1144, 1144, 1145,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1145, 1145, 1145,

     1145, 1145, 1169, 1144, 1144, 1144, 1144, 1144, 1169, 1169,
     1169, 1169,   52, 1146, 1169, 1169, 1145, 1145, 1145, 1145,
     1145, 1146, 1146, 1146, 1146, 1146, 1147, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1147, 1147, 1147, 1147, 1147, 1169,
     1146, 1146, 1146, 1146, 1146, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1147, 1147, 1147, 1147, 1147,   53,   53,
       53,   53,   53,   53,   54,   55,   55,   55,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   65,   65,   65,
       65,   65,   65,   66,   67,   67,   67,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   65,   65,   65,   65,

       65,   65,   66,   67,   67,   67,   67,   68,   69,   70,
       71,   72,   73,   74,   75, 1029, 1169, 1169, 1169, 1169,
     1169, 1148, 1169, 1169, 1169, 1169, 1149, 1169, 1169, 1148,
     1148, 1148, 1148, 1148, 1149, 1149, 1149, 1149, 1149, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169,  565, 1148, 1148,
     1148, 1148, 1148, 1149, 1149, 1149, 1149, 1149, 1150, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1150, 1150, 1150, 1150,
     1150, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1150, 1150, 1150, 1150, 1150,
     1169, 1169, 1169,  566,  566,  566,  566,  566,  566,  567,

      568,  568,  568,  568,  569,  570,  571,  572,  573,  574,
      575,  576,  262, 1169, 1169, 1169, 1169, 1169, 1151, 1169,
     1169, 1169, 1169, 1152, 1169, 1169, 1151, 1151, 1151, 1151,
     1151, 1152, 1152, 1152, 1152, 1152, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169,   78, 1151, 1151, 1151, 1151, 1151,
     1152, 1152, 1152, 1152, 1152, 1153, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1153, 1153, 1153, 1153, 1153, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1153, 1153, 1153, 1153, 1153, 1169, 1169, 1169,
       79,   79,   79,   79,   79,   79,   80,   81,   81,   81,

       81,   82,   83,   84,   85,   86,   87,   88,   89,  262,
     1169, 1169, 1169, 1169, 1169, 1154, 1169, 1169, 1169, 1169,
     1155, 1169, 1169, 1154, 1154, 1154, 1154, 1154, 1155, 1155,
     1155, 1155, 1155, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169,   78, 1154, 1154, 1154, 1154, 1154, 1155, 1155, 1155,
     1155, 1155, 1156, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1156, 1156, 1156, 1156, 1156, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1156,
     1156, 1156, 1156, 1156, 1169, 1169, 1169,   79,   79,   79,
       79,   79,   79,   80,   81,   81,   81,   81,   82,   83,

       84,   85,   86,   87,   88,   89,  311, 1169, 1169, 1169,
     1169, 1169, 1169, 1169,  312,  313, 1169,  312,  312, 1169,
     1169, 1169, 1169, 1169, 1169,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312, 1169,
      314, 1169, 1169,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169,  315,  316,  317,  318,
      319,  320,  321,  322,  323,  324,  325,  326, 1157,  327,

      328,  329,  329,  330,  113, 1158, 1157, 1157, 1157, 1157,
     1157, 1169, 1169, 1158, 1158, 1158, 1158, 1158, 1169, 1169,
     1169, 1169,  114, 1169, 1169, 1157, 1157, 1157, 1157, 1157,
     1159, 1169, 1158, 1158, 1158, 1158, 1158, 1169, 1159, 1159,
     1159, 1159, 1159, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1159, 1159, 1159,
     1159, 1159, 1169, 1169, 1169, 1169, 1169, 1169,  115,  115,
      115,  115,  115,  115,  116,  117,  117,  117,  117,  118,
      119,  120,  121,  122,  123,  124,  125,  113, 1160, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1160, 1160, 1160, 1160,

     1160, 1161, 1169, 1169, 1169,  114, 1169, 1169, 1169, 1161,
     1161, 1161, 1161, 1161, 1162, 1160, 1160, 1160, 1160, 1160,
     1169, 1169, 1162, 1162, 1162, 1162, 1162, 1169, 1161, 1161,
     1161, 1161, 1161, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1162, 1162, 1162, 1162, 1162, 1169, 1169, 1169, 1169,
     1169,  115,  115,  115,  115,  115,  115,  116,  117,  117,
      117,  117,  118,  119,  120,  121,  122,  123,  124,  125,
      129,  130, 1169,  129,  131, 1169, 1169, 1169, 1169, 1169,
     1169,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129, 1169, 1169, 1169, 1169,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169,  132,  133,  134,  135,  136,  137,  138,  139,
      140,  141,  142,  143, 1169,  144,  145,  146,  146,  147,
      732,  733, 1169,  732, 1169, 1169, 1169, 1169, 1169, 1169,
     1169,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732, 1169, 1169, 1169, 1169,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,

      732,  732,  732,  732,  732,  732,  732, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169,  734,  735,  736,  737,  738,  739,  740,  741,
      742,  743,  744,  745, 1163,  746,  747,  748,  748,  749,
      448, 1164, 1163, 1163, 1163, 1163, 1163, 1169, 1169, 1164,
     1164, 1164, 1164, 1164, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1163, 1163, 1163, 1163, 1163, 1169, 1169, 1164, 1164,
     1164, 1164, 1164, 1165, 1169, 1169, 1169,  449, 1166, 1169,
     1169, 1165, 1165, 1165, 1165, 1165, 1166, 1166, 1166, 1166,

     1166, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1165, 1165, 1165, 1165, 1165, 1166, 1166, 1166, 1166, 1166,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169,  450,  450,  450,  450,  450,  450,  451,
      452,  452,  452,  452,  453,  454,  455,  456,  457,  458,
      459,  460,  448, 1167, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1167, 1167, 1167, 1167, 1167, 1168, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1168, 1168, 1168, 1168, 1168, 1169,
     1167, 1167, 1167, 1167, 1167, 1169, 1169, 1169, 1169,  449,
     1169, 1169, 1169, 1168, 1168, 1168, 1168, 1168, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169,  450,  450,  450,  450,  450,
      450,  451,  452,  452,  452,  452,  453,  454,  455,  456,
      457,  458,  459,  460,  564, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169,  565, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169,  566,  566,  566,  566,  566,  566,  567,  568,
      568,  568,  568,  569,  570,  571,  572,  573,  574,  575,
      576,  564, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169,  565, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,  566,
      566,  566,  566,  566,  566,  567,  568,  568,  568,  568,
      569,  570,  571,  572,  573,  574,  575,  576,  129,  130,
     1169,  129,  131, 1169, 1169, 1169, 1169, 1169, 1169,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129, 1169, 1169, 1169, 1169,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
      132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
      142,  143, 1169,  144,  145,  146,  146,  147,  732,  733,
     1169,  732, 1169, 1169, 1169, 1169, 1169, 1169, 1169,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732, 1169, 1169, 1169, 1169,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
      734,  735,  736,  737,  738,  739,  740,  741,  742,  743,
      744,  745, 1169,  746,  747,  748,  748,  749,  448, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169,  449, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169,  450,  450,  450,  450,  450,  450,  451,  452,  452,
      452,  452,  453,  454,  455,  456,  457,  458,  459,  460,
      448, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169,  449, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169,  450,  450,  450,  450,  450,  450,  451,
      452,  452,  452,  452,  453,  454,  455,  456,  457,  458,
      459,  460,  178, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,   52,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169,   53,   53,   53,   53,   53,
       53,   54,   55,   55,   55,   55,   56,   57,   58,   59,
       60,   61,   62,   63,  564, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169,  565, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169,  566,  566,  566,  566,  566,  566,  567,  568,
      568,  568,  568,  569,  570,  571,  572,  573,  574,  575,
      576,  564, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169,  565, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,  566,
      566,  566,  566,  566,  566,  567,  568,  568,  568,  568,
      569,  570,  571,  572,  573,  574,  575,  576,  262, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
       78, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169,   79,   79,   79,   79,
       79,   79,   80,   81,   81,   81,   81,   82,   83,   84,
       85,   86,   87,   88,   89,  113, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169,  114, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,  115,
      115,  115,  115,  115,  115,  116,  117,  117,  117,  117,

      118,  119,  120,  121,  122,  123,  124,  125,  178, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169,   52, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169,   53,   53,   53,   53,   53,   53,   54,   55,   55,

       55,   55,   56,   57,   58,   59,   60,   61,   62,   63,
      262, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169,   78, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,   79,   79,
       79,   79,   79,   79,   80,   81,   81,   81,   81,   82,

       83,   84,   85,   86,   87,   88,   89,  113, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169,  114, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169,  115,  115,  115,  115,  115,  115,  116,  117,  117,
      117,  117,  118,  119,  120,  121,  122,  123,  124,  125,
       50, 1169,   50,   50,   50,   50,   50,   64, 1169,   64,

       64,   64,   64,   64,   76, 1169,   76,   76,   76,   76,
       76,  112,  112,  112,  112,  112,  159,  159,  168,  168,
      169,  169,  176,  176,   50,   50,  183,  183,  185,  185,
      186,  186,   64, 1169,   64,   64,   64,   64,   64,   64,
       64,  223,  223,  225,  225,  226,  226,   76, 1169,   76,
       76,   76,   76,   76,   76,   76,  267,  267,  269,  269,
      270,  270,  333,  333,  342,  342,  343,  343,  350,  350,
      112,  112,  112,  112,  112,  112,  112,  355,  355,  357,
      357,  358,  358,  126, 1169,  126,  397,  397,  399,  399,
      408,  408,  409,  409,  416,  416,  421,  421,  421,  157,

      157,  438,  438,  439,  439,  440,  440,  441,  441,  442,
      442,  443,  443,  444,  444,  445,  445,  446,  446,  447,
      447,  447,  447,  447,  447,  447,   50,   50,  463,  463,
      464,  464,  465,  465,  466,  466,  468,  468,  469,  469,
      471,  471,  472,  472,  474,  474,  475,  475,  477,  477,
      478,  478,  480,  480,  481,  481,  483,  483,  484,  484,
      486,  486,  487,  487,  489,  489,  490,  490,  492,  492,
      493,  493,  495,  495,  496,  496,  498,  498,  499,  499,
      501,  501,  502,  502,  504,  504,  505,  505,  507,  507,
      508,  508,  510,  510,  511,  511,   64,   64,  513,  513,

      514,  514,  515,  515,  516,  516,  518,  518,  519,  519,
      521,  521,  522,  522,  524,  524,  525,  525,  527,  527,
      528,  528,  530,  530,  531,  531,  533,  533,  534,  534,
      536,  536,  537,  537,  539,  539,  540,  540,  542,  542,
      543,  543,  545,  545,  546,  546,  548,  548,  549,  549,
      551,  551,  552,  552,  554,  554,  555,  555,  557,  557,
      558,  558,  560,  560,  561,  561,  563,  563,  563,  563,
      563,  563,  563,   76,   76,  579,  579,  580,  580,  581,
      581,  582,  582,  584,  584,  585,  585,  587,  587,  588,
      588,  590,  590,  591,  591,  593,  593,  594,  594,  596,

      596,  597,  597,  599,  599,  600,  600,  602,  602,  603,
      603,  605,  605,  606,  606,  608,  608,  609,  609,  611,
      611,  612,  612,  614,  614,  615,  615,  617,  617,  618,
      618,  620,  620,  621,  621,  623,  623,  624,  624,  626,
      626,  627,  627,  634,  634,  636,  636,  645,  645,  646,
      646,  653,  653,   96,   96,  655,  655,  656,  656,  657,
      657,  658,  658,  659,  659,  660,  660,  661,  661,  662,
      662,  663,  663,  112,  112,  666,  666,  667,  667,  668,
      668,  669,  669,  671,  671,  672,  672,  674,  674,  675,
      675,  677,  677,  678,  678,  680,  680,  681,  681,  683,

      683,  684,  684,  686,  686,  687,  687,  689,  689,  690,
      690,  692,  692,  693,  693,  695,  695,  696,  696,  698,
      698,  699,  699,  701,  701,  702,  702,  704,  704,  705,
      705,  707,  707,  708,  708,  710,  710,  711,  711,  713,
      713,  714,  714,  716,  716,  126, 1169,  126,  129,  129,
      719,  719,  721,  721,  722,  722,  723,  723,  724,  724,
      725,  725,  726,  726,  727,  727,  728,  728,  751,  751,
      760,  760,  761,  761,  768,  768,  157,  157,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  776,  776,  778,
      778,  779,  779,   50, 1169,   50,   50,   50,   50,   50,

      817,  817,  818,  818,  819,  819,  820,  820,  821,  821,
      822,  822,  823,  823,  824,  824,  825,  825,  826,  826,
      827,  827,  828,  828,  829,  829,  830,  830,  831,  831,
      832,  832,   64, 1169,   64,   64,   64,   64,   64,  833,
      833,  834,  834,  835,  835,  836,  836,  837,  837,  838,
      838,  839,  839,  840,  840,  841,  841,  842,  842,  843,
      843,  844,  844,  845,  845,  846,  846,  847,  847,  848,
      848,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      853,  853,  855,  855,  856,  856,   76, 1169,   76,   76,
       76,   76,   76,  894,  894,  895,  895,  896,  896,  897,

      897,  898,  898,  899,  899,  900,  900,  901,  901,  902,
      902,  903,  903,  904,  904,  905,  905,  906,  906,  907,
      907,  908,  908,  909,  909,  312,  312,  911,  911,  913,
      913,  914,  914,  915,  915,  916,  916,  917,  917,  918,
      918,  919,  919,  920,  920,   96,   96,  112,  112,  112,
      112,  112,  923,  923,  924,  924,  925,  925,  926,  926,
      927,  927,  928,  928,  929,  929,  930,  930,  931,  931,
      932,  932,  933,  933,  934,  934,  935,  935,  936,  936,
      937,  937,  938,  938,  716,  716,  716,  126, 1169,  126,
      129,  129,  943,  943,  945,  945,  954,  954,  955,  955,

      962,  962,  421,  421,  964,  964,  965,  965,  966,  966,
      967,  967,  968,  968,  969,  969,  970,  970,  971,  971,
      972,  972,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  977,  977,  978,  978,  979,  979,  980,  980,  982,
      982,  983,  983,  985,  985,  986,  986,  988,  988,  989,
      989,  991,  991,  992,  992,  994,  994,  995,  995,  997,
      997,  998,  998, 1000, 1000, 1001, 1001, 1003, 1003, 1004,
     1004, 1006, 1006, 1007, 1007, 1009, 1009, 1010, 1010, 1012,
     1012, 1013, 1013, 1015, 1015, 1016, 1016, 1018, 1018, 1019,
     1019, 1021, 1021, 1022, 1022, 1024, 1024, 1025, 1025,   50,

     1169,   50,   50,   50,   50,   50,   64, 1169,   64,   64,
       64,   64,   64,  563,  563,  563,  563,  563,  563,  563,
      563,  563, 1032, 1032, 1033, 1033, 1034, 1034, 1035, 1035,
     1037, 1037, 1038, 1038, 1040, 1040, 1041, 1041, 1043, 1043,
     1044, 1044, 1046, 1046, 1047, 1047, 1049, 1049, 1050, 1050,
     1052, 1052, 1053, 1053, 1055, 1055, 1056, 1056, 1058, 1058,
     1059, 1059, 1061, 1061, 1062, 1062, 1064, 1064, 1065, 1065,
     1067, 1067, 1068, 1068, 1070, 1070, 1071, 1071, 1073, 1073,
     1074, 1074, 1076, 1076, 1077, 1077, 1079, 1079, 1080, 1080,
       76, 1169,   76,   76,   76,   76,   76,  312,  312,  112,

      112,  112,  112,  112,  126, 1169,  126,  732,  732, 1088,
     1088, 1090, 1090, 1091, 1091, 1092, 1092, 1093, 1093, 1094,
     1094, 1095, 1095, 1096, 1096, 1097, 1097,  421,  421,  447,
      447,  447,  447,  447,  447,  447, 1100, 1100, 1101, 1101,
     1102, 1102, 1103, 1103, 1104, 1104, 1105, 1105, 1106, 1106,
     1107, 1107, 1108, 1108, 1109, 1109, 1110, 1110, 1111, 1111,
     1112, 1112, 1113, 1113, 1114, 1114, 1115, 1115,  563,  563,
      563,  563,  563,  563,  563, 1120, 1120, 1121, 1121, 1122,
     1122, 1123, 1123, 1124, 1124, 1125, 1125, 1126, 1126, 1127,
     1127, 1128, 1128, 1129, 1129, 1130, 1130, 1131, 1131, 1132,

     1132, 1133, 1133, 1134, 1134, 1135, 1135,  126, 1169,  126,
      732,  732,  447,  447,  447,  447,  447,  447,  447,   50,
     1169,   50,   50,   50,   50,   50,  563,  563,  563,  563,
      563,  563,  563,   76, 1169,   76,   76,   76,   76,   76,
      112,  112,  112,  112,  112,    3, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169
    } ;

static yyconst flex_int16_t yy_chk[7455] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    5,   20,
       22,    5,    8,   13,   16,   13,   16,   23,   24,   20,
       25,   25,   25,   25,   35,   37,  114,   16,   48,   22,
     1490,   48,   35,   37,   58,   58,   58,   58,   23,   24,
       36,   36,   36,   36, 1392,   36,   16, 1329,  114,    8,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   70,
       70,   70,   70,   25,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   44,   44,   44,   44,   44,
       44,   44,   44,   54,   54,   54,   54,   54,   54,   54,
       54,   54,  174,  174, 1205,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,   10,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   84,   84,   84,   84,   10,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       63,   63,   63,   63,   63,   63,   63,   66,   66,   66,

       66,   66,   66,   66,   66,   66,  120,  120,  120,  120,
     1194,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       17,   75,   75,   75,   75,   75,   75,   75,   94,   99,
       94,   17,   17,   94,  148,  189,  189,   99, 1175,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,  718,   17,  148, 1174,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   52,  718,  128,  127,

      942,   52,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   17,   17,  940,   17,   17,   17,   17,   17,   17,
       17,   17,  942,   17,   17,   17,   17,   17,   19,  127,
       52,  101,   78,   52,  134,  137, 1140,   78,   52,  101,
      128,   52,  134,  137,  229,  229,   19,   52,  149,   52,
      940,   52,   52,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   78,  149,  317,   78,
      100,  100,  100,  100,   78,  100,  317,   78,  273,  273,
      348,  348,  320,   78,  307,   78,  307,   78,   78,  307,
      320,  953,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   21,   21,  939,   21,   21,  136,  136,  136,  136,
      136,  136,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,  361,  361,  891,  395,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,  395,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,  889,   21,   21,   21,   21,

       21,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   50,   89,   89,   89,   89,   89,   89,   89,   91,
       92,   91,   93,  414,  414,  887,   95,  467,  467,  885,
      150,   92,   91,   93,   95,   95,   95,   95,   95,  102,
      102,  102,  102,  102,  102,  102,  102,  102,   50,  150,
       92,   91,   93,   95,   95,   95,   95,   95,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  108,
      108,  108,  108,  108,  108,  108,  108,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,

      455,  455,  455,  455,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   76,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  125,  125,  125,  125,
      125,  125,  125, 1086,   76,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143, 1086,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   88,

       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   96,
      161,  161,  161,  161,  161,  161,  883,   96,   96,  881,
       96,   96,  166,  166,  166,  166,  166,  166,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,  879,   96,  470,  470,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,  144,  144,  144,  144,  144,  144,
      144,  144,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  473,  473,  476,  476,   96,

       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,  419,   96,   96,   96,   96,   96,   97,  418,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,  419,  877,   97,  420,   97,  418,   97,   97,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  420,  479,  479,  875,   97,  151,
      151,  151,  151,  163,  163,  163,  163,  163,  163,  163,
      319,  319,  319,  319,  319,  319,  482,  482,   97,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  112,

      154,  154,  151,  154,  154,  154,  154,  154,  154,  154,
      154,  873,  154,  154,  154,  154,  154,  112,  172,  172,
      172,  172,  172,  172,  172,  485,  485,  488,  488,  396,
      180,  871,  172,  172,  172,  172,  172,  172,  180,  180,
      180,  180,  180,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  491,  491,  494,  494,  869,  180,  180,  180,
      180,  180,  396,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,

      122,  122,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  129,  129,  867,  129,  129,  335,  335,  335,
      335,  335,  335,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  497,  497,  500,
      500,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  187,
      187,  187,  187,  187,  187,  187,  337,  337,  337,  337,

      337,  337,  337,  187,  187,  187,  187,  187,  187,  503,
      503,  506,  506,  865,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  423,  129,  129,  129,
      129,  129,  131,  863,  423,  306,  340,  340,  340,  340,
      340,  340,  425,  131,  131,  861,  306,  509,  509,  814,
      425,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  306,  131,  512,  512,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  227,  227,  227,
      227,  227,  227,  227,  517,  517,  730,  400,  520,  520,

      812,  227,  227,  227,  227,  227,  227,  400,  400,  400,
      400,  400,  810,  131,  131,  730,  131,  131,  131,  131,
      131,  131,  131,  131,  808,  131,  131,  131,  131,  131,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      179,  181,  271,  271,  271,  271,  271,  271,  271,  181,
      181,  181,  181,  181,  264,  806,  271,  271,  271,  271,
      271,  271,  264,  264,  264,  264,  264,  804,  181,  181,
      181,  181,  181,  523,  523,  526,  526,  179,  265,  401,
      802,  264,  264,  264,  264,  264,  265,  265,  265,  265,

      265,  310,  800,  401,  401,  401,  401,  401,  401,  310,
      310,  310,  310,  310,  798,  265,  265,  265,  265,  265,
      327,  327,  327,  327,  327,  327,  327,  327,  310,  310,
      310,  310,  310,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  263,  529,  529,  532,  532,  796,  311,  403,
      403,  403,  403,  403,  403,  403,  311,  311,  311,  311,
      311,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  535,  535,  263,  311,  311,  311,  311,  311,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,

      328,  328,  328,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  406,  406,  406,
      406,  406,  406,  424,  424,  424,  424,  794,  424,  792,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  312,
      460,  460,  460,  460,  460,  460,  460,  312,  312,  790,
      312,  312,  538,  538,  541,  541,  544,  544,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  788,  312,  547,  547,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,

      312,  312,  312,  312,  346,  346,  346,  346,  346,  346,
      346,  550,  550,  553,  553,  556,  556,  786,  346,  346,
      346,  346,  346,  346,  559,  559,  562,  562,  784,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  771,  312,  312,  312,  312,  312,  314,  759,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  352,  752,  314,  743,  314,  353,  314,  314,
      352,  352,  352,  352,  352,  353,  353,  353,  353,  353,
      432,  432,  432,  432,  432,  432,  432,  432,  314,  352,
      352,  352,  352,  352,  353,  353,  353,  353,  353,  426,

      426,  426,  426,  426,  426,  426,  426,  426,  314,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  359,
      359,  359,  359,  359,  359,  359,  571,  571,  571,  571,
      583,  583,  734,  359,  359,  359,  359,  359,  359,  397,
      397,  716,  397,  397,  586,  586,  589,  589,  592,  592,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  595,  595,  598,  598,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  412,  412,  412,  412,

      412,  412,  412,  576,  576,  576,  576,  576,  576,  576,
      412,  412,  412,  412,  412,  412,  601,  601,  604,  604,
      644,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  736,  397,  397,  397,  397,  397,  421,
      421,  736,  421,  607,  607,  610,  610,  613,  613,  630,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  616,  616,  619,  619,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      629,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  437,  421,  421,  421,  421,  421,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  447,  449,  622,  622,  625,  625,  449,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      628,  628,  643,  643,  643,  643,  643,  643,  449,  731,

      447,  449,  651,  651,  670,  670,  449,  673,  673,  449,
      676,  676,  679,  679,  436,  449,  429,  449,  731,  449,
      449,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  682,  682,  407,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  448,  461,  640,  640,  640,
      640,  640,  640,  640,  461,  461,  461,  461,  461,  462,
      565,  685,  685,  688,  688,  565,  393,  462,  462,  462,
      462,  462,  391,  461,  461,  461,  461,  461,  691,  691,

      694,  694,  448,  697,  697,  739,  462,  462,  462,  462,
      462,  700,  700,  739,  565,  389,  637,  565,  703,  703,
      706,  706,  565,  709,  709,  565,  637,  637,  637,  637,
      637,  565,  387,  565,  385,  565,  565,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,

      458,  458,  458,  458,  458,  458,  458,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  463,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  577,  712,  712,  715,  715,  578,  766,  766,  577,
      577,  577,  577,  577,  578,  578,  578,  578,  578,  717,
      782,  782,  859,  859,  463,  638,  960,  960,  577,  577,
      577,  577,  577,  578,  578,  578,  578,  578,  632,  638,
      638,  638,  638,  638,  638,  383,  632,  632,  632,  632,
      632,  381,  717,  738,  738,  738,  738,  738,  738,  753,

      753,  753,  753,  753,  753,  632,  632,  632,  632,  632,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  464,
      649,  649,  649,  649,  649,  649,  649,  981,  981,  984,
      984,  379,  664,  377,  649,  649,  649,  649,  649,  649,
      664,  664,  664,  664,  664,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  987,  987,  464,  665,  375,  664,
      664,  664,  664,  664,  373,  665,  665,  665,  665,  665,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  990,  990,  371,  665,  665,  665,  665,  665,  746,

      746,  746,  746,  746,  746,  746,  746,  993,  993,  996,
      996,  369,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  563,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  999,  999, 1002,

     1002,  563,  755,  755,  755,  755,  755,  755,  755,  758,
      758,  758,  758,  758,  758,  764,  764,  764,  764,  764,
      764,  764,  780,  780,  780,  780,  780,  780,  780,  764,
      764,  764,  764,  764,  764,  367,  780,  780,  780,  780,
      780,  780, 1005, 1005, 1008, 1008,  365,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  564, 1011, 1011, 1014,
     1014,  363,  773, 1017, 1017,  341,  947,  774, 1020, 1020,
      773,  773,  773,  773,  773,  774,  774,  774,  774,  774,
      947,  947,  947,  947,  947,  947, 1023, 1023,  564,  773,

      773,  773,  773,  773,  774,  774,  774,  774,  774,  815,
      857,  857,  857,  857,  857,  857,  857,  815,  815,  815,
      815,  815, 1026, 1026,  857,  857,  857,  857,  857,  857,
      952,  952,  952,  952,  952,  952,  815,  815,  815,  815,
      815, 1036, 1036,  334,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  579, 1039, 1039, 1042, 1042,  324,  816,
     1045, 1045, 1048, 1048,  850, 1051, 1051,  816,  816,  816,
      816,  816,  850,  850,  850,  850,  850,  949,  949,  949,
      949,  949,  949,  949,  315,  579,  816,  816,  816,  816,
      816,  850,  850,  850,  850,  850,  851, 1054, 1054,  946,
     1057, 1057, 1060, 1060,  851,  851,  851,  851,  851,  946,
      946,  946,  946,  946, 1063, 1063, 1066, 1066, 1069, 1069,
     1072, 1072,  309,  851,  851,  851,  851,  851, 1075, 1075,

      308,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      580, 1078, 1078, 1081, 1081,  305,  892,  303,  301,  299,
      297,  893,  295,  293,  892,  892,  892,  892,  892,  893,
      893,  893,  893,  893,  291,  289,  287,  285,  283,  281,
      279,  277,  580,  892,  892,  892,  892,  892,  893,  893,
      893,  893,  893,  921,  958,  958,  958,  958,  958,  958,
      958,  921,  921,  921,  921,  921,  275,  261,  958,  958,
      958,  958,  958,  958,  259,  257,  255,  253,  251,  249,
      921,  921,  921,  921,  921,  247,  245,  243,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  631,  241,  239,
      237,  235,  233,  231,  221,  631,  631,  219,  631,  631,
      217,  215,  213,  211,  209,  207,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      205,  631,  203,  201,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  199,  197,  195,  193,  191,  167,  160,  156,
      155,  141,  132,  130,  126,  105,   90,   77,   51,   41,
       31,   30,   28,   27,   15,    7,    3,  631,  631,  631,

      631,  631,  631,  631,  631,  631,  631,  631,  631,  922,
      631,  631,  631,  631,  631,  666,  975,  922,  922,  922,
      922,  922,    0,    0,  975,  975,  975,  975,  975,    0,
        0,    0,    0,  666,    0,    0,  922,  922,  922,  922,
      922,  976,    0,  975,  975,  975,  975,  975,    0,  976,
      976,  976,  976,  976,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  976,  976,
      976,  976,  976,    0,    0,    0,    0,    0,    0,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  667, 1027,

        0,    0,    0,    0,    0,    0,    0, 1027, 1027, 1027,
     1027, 1027, 1028,    0,    0,    0,  667,    0,    0,    0,
     1028, 1028, 1028, 1028, 1028, 1030, 1027, 1027, 1027, 1027,
     1027,    0,    0, 1030, 1030, 1030, 1030, 1030,    0, 1028,
     1028, 1028, 1028, 1028,    0,    0,    0,    0,    0,    0,
        0,    0, 1030, 1030, 1030, 1030, 1030,    0,    0,    0,
        0,    0,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  719,  719,    0,  719,  719,    0,    0,    0,    0,
        0,    0,  719,  719,  719,  719,  719,  719,  719,  719,

      719,  719,  719,  719,  719,  719,    0,    0,    0,    0,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,    0,  719,  719,  719,  719,
      719,  732,  732,    0,  732,    0,    0,    0,    0,    0,
        0,    0,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,    0,    0,    0,    0,

      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,    0,  732,  732,  732,  732,
      732,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  770,  770,    0,  770,  770,    0,    0,    0,    0,
        0,    0,  770,  770,  770,  770,  770,  770,  770,  770,

      770,  770,  770,  770,  770,  770,    0,    0,    0,    0,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770, 1031,  770,  770,  770,  770,
      770,  772, 1082, 1031, 1031, 1031, 1031, 1031,    0,    0,
     1082, 1082, 1082, 1082, 1082,    0,    0,    0,    0,    0,
        0,    0, 1031, 1031, 1031, 1031, 1031,    0,    0, 1082,

     1082, 1082, 1082, 1082, 1083,    0,    0,    0,  772, 1084,
        0,    0, 1083, 1083, 1083, 1083, 1083, 1084, 1084, 1084,
     1084, 1084,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1083, 1083, 1083, 1083, 1083, 1084, 1084, 1084, 1084,
     1084,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  817, 1085,    0,    0,    0,    0,    0,
        0,    0, 1085, 1085, 1085, 1085, 1085, 1098,    0,    0,
        0,    0,    0,    0,    0, 1098, 1098, 1098, 1098, 1098,

        0, 1085, 1085, 1085, 1085, 1085,    0,    0,    0,    0,
      817, 1099,    0,    0, 1098, 1098, 1098, 1098, 1098, 1099,
     1099, 1099, 1099, 1099, 1116,    0,    0,    0,    0,    0,
        0,    0, 1116, 1116, 1116, 1116, 1116,    0, 1099, 1099,
     1099, 1099, 1099,    0,    0,    0,    0,    0,    0,    0,
        0, 1116, 1116, 1116, 1116, 1116,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  818, 1118,    0,    0,    0,
        0,    0,    0,    0, 1118, 1118, 1118, 1118, 1118, 1119,
        0,    0,    0,    0,    0,    0,    0, 1119, 1119, 1119,

     1119, 1119,    0, 1118, 1118, 1118, 1118, 1118,    0,    0,
        0,    0,  818, 1136,    0,    0, 1119, 1119, 1119, 1119,
     1119, 1136, 1136, 1136, 1136, 1136, 1138,    0,    0,    0,
        0,    0,    0,    0, 1138, 1138, 1138, 1138, 1138,    0,
     1136, 1136, 1136, 1136, 1136,    0,    0,    0,    0,    0,
        0,    0,    0, 1138, 1138, 1138, 1138, 1138,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  834,  834,  834,  834,

      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  849,    0,    0,    0,    0,
        0, 1141,    0,    0,    0,    0, 1142,    0,    0, 1141,
     1141, 1141, 1141, 1141, 1142, 1142, 1142, 1142, 1142,    0,
        0,    0,    0,    0,    0,    0,    0,  849, 1141, 1141,
     1141, 1141, 1141, 1142, 1142, 1142, 1142, 1142, 1143,    0,
        0,    0,    0,    0,    0,    0, 1143, 1143, 1143, 1143,
     1143,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1143, 1143, 1143, 1143, 1143,
        0,    0,    0,  849,  849,  849,  849,  849,  849,  849,

      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  894,    0,    0,    0,    0,    0, 1144,    0,
        0,    0,    0, 1145,    0,    0, 1144, 1144, 1144, 1144,
     1144, 1145, 1145, 1145, 1145, 1145,    0,    0,    0,    0,
        0,    0,    0,    0,  894, 1144, 1144, 1144, 1144, 1144,
     1145, 1145, 1145, 1145, 1145, 1146,    0,    0,    0,    0,
        0,    0,    0, 1146, 1146, 1146, 1146, 1146,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1146, 1146, 1146, 1146, 1146,    0,    0,    0,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,

      894,  894,  894,  894,  894,  894,  894,  894,  894,  895,
        0,    0,    0,    0,    0, 1147,    0,    0,    0,    0,
     1148,    0,    0, 1147, 1147, 1147, 1147, 1147, 1148, 1148,
     1148, 1148, 1148,    0,    0,    0,    0,    0,    0,    0,
        0,  895, 1147, 1147, 1147, 1147, 1147, 1148, 1148, 1148,
     1148, 1148, 1150,    0,    0,    0,    0,    0,    0,    0,
     1150, 1150, 1150, 1150, 1150,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1150,
     1150, 1150, 1150, 1150,    0,    0,    0,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,

      895,  895,  895,  895,  895,  895,  910,    0,    0,    0,
        0,    0,    0,    0,  910,  910,    0,  910,  910,    0,
        0,    0,    0,    0,    0,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,    0,
      910,    0,    0,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910, 1151,  910,

      910,  910,  910,  910,  923, 1153, 1151, 1151, 1151, 1151,
     1151,    0,    0, 1153, 1153, 1153, 1153, 1153,    0,    0,
        0,    0,  923,    0,    0, 1151, 1151, 1151, 1151, 1151,
     1154,    0, 1153, 1153, 1153, 1153, 1153,    0, 1154, 1154,
     1154, 1154, 1154,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1154, 1154, 1154,
     1154, 1154,    0,    0,    0,    0,    0,    0,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  924, 1155,    0,
        0,    0,    0,    0,    0,    0, 1155, 1155, 1155, 1155,

     1155, 1156,    0,    0,    0,  924,    0,    0,    0, 1156,
     1156, 1156, 1156, 1156, 1157, 1155, 1155, 1155, 1155, 1155,
        0,    0, 1157, 1157, 1157, 1157, 1157,    0, 1156, 1156,
     1156, 1156, 1156,    0,    0,    0,    0,    0,    0,    0,
        0, 1157, 1157, 1157, 1157, 1157,    0,    0,    0,    0,
        0,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      941,  941,    0,  941,  941,    0,    0,    0,    0,    0,
        0,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,    0,    0,    0,    0,  941,

      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,    0,  941,  941,  941,  941,  941,
      943,  943,    0,  943,    0,    0,    0,    0,    0,    0,
        0,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,    0,    0,    0,    0,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,

      943,  943,  943,  943,  943,  943,  943,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943, 1158,  943,  943,  943,  943,  943,
      977, 1159, 1158, 1158, 1158, 1158, 1158,    0,    0, 1159,
     1159, 1159, 1159, 1159,    0,    0,    0,    0,    0,    0,
        0, 1158, 1158, 1158, 1158, 1158,    0,    0, 1159, 1159,
     1159, 1159, 1159, 1160,    0,    0,    0,  977, 1162,    0,
        0, 1160, 1160, 1160, 1160, 1160, 1162, 1162, 1162, 1162,

     1162,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1160, 1160, 1160, 1160, 1160, 1162, 1162, 1162, 1162, 1162,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  978, 1165,    0,    0,    0,    0,    0,    0,
        0, 1165, 1165, 1165, 1165, 1165, 1166,    0,    0,    0,
        0,    0,    0,    0, 1166, 1166, 1166, 1166, 1166,    0,
     1165, 1165, 1165, 1165, 1165,    0,    0,    0,    0,  978,
        0,    0,    0, 1166, 1166, 1166, 1166, 1166,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978, 1032,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1032,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1033,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1033,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1087, 1087,
        0, 1087, 1087,    0,    0,    0,    0,    0,    0, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1087, 1087,    0,    0,    0,    0, 1087, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1087, 1087, 1087, 1087,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1087,    0, 1087, 1087, 1087, 1087, 1087, 1088, 1088,
        0, 1088,    0,    0,    0,    0,    0,    0,    0, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088,    0,    0,    0,    0, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088,    0, 1088, 1088, 1088, 1088, 1088, 1100,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1100,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1101,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1101,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1117,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1117,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1117, 1117, 1117, 1117, 1117,
     1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
     1117, 1117, 1117, 1117, 1120,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1120,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1121,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1121,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 1121,
     1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121,
     1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1137,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1137,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1139,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1139,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,

     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1161,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1161,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,

     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1163,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1163,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,

     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1164,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1164,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1170,    0, 1170, 1170, 1170, 1170, 1170, 1171,    0, 1171,

     1171, 1171, 1171, 1171, 1172,    0, 1172, 1172, 1172, 1172,
     1172, 1173, 1173, 1173, 1173, 1173, 1176, 1176, 1177, 1177,
     1178, 1178, 1179, 1179, 1180, 1180, 1181, 1181, 1182, 1182,
     1183, 1183, 1184,    0, 1184, 1184, 1184, 1184, 1184, 1185,
     1185, 1186, 1186, 1187, 1187, 1188, 1188, 1189,    0, 1189,
     1189, 1189, 1189, 1189, 1190, 1190, 1191, 1191, 1192, 1192,
     1193, 1193, 1195, 1195, 1196, 1196, 1197, 1197, 1198, 1198,
     1199, 1199, 1199, 1199, 1199, 1200, 1200, 1201, 1201, 1202,
     1202, 1203, 1203, 1204,    0, 1204, 1206, 1206, 1207, 1207,
     1208, 1208, 1209, 1209, 1210, 1210, 1211, 1211, 1211, 1212,

     1212, 1213, 1213, 1214, 1214, 1215, 1215, 1216, 1216, 1217,
     1217, 1218, 1218, 1219, 1219, 1220, 1220, 1221, 1221, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1223, 1223, 1224, 1224,
     1225, 1225, 1226, 1226, 1227, 1227, 1228, 1228, 1229, 1229,
     1230, 1230, 1231, 1231, 1232, 1232, 1233, 1233, 1234, 1234,
     1235, 1235, 1236, 1236, 1237, 1237, 1238, 1238, 1239, 1239,
     1240, 1240, 1241, 1241, 1242, 1242, 1243, 1243, 1244, 1244,
     1245, 1245, 1246, 1246, 1247, 1247, 1248, 1248, 1249, 1249,
     1250, 1250, 1251, 1251, 1252, 1252, 1253, 1253, 1254, 1254,
     1255, 1255, 1256, 1256, 1257, 1257, 1258, 1258, 1259, 1259,

     1260, 1260, 1261, 1261, 1262, 1262, 1263, 1263, 1264, 1264,
     1265, 1265, 1266, 1266, 1267, 1267, 1268, 1268, 1269, 1269,
     1270, 1270, 1271, 1271, 1272, 1272, 1273, 1273, 1274, 1274,
     1275, 1275, 1276, 1276, 1277, 1277, 1278, 1278, 1279, 1279,
     1280, 1280, 1281, 1281, 1282, 1282, 1283, 1283, 1284, 1284,
     1285, 1285, 1286, 1286, 1287, 1287, 1288, 1288, 1289, 1289,
     1290, 1290, 1291, 1291, 1292, 1292, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1294, 1294, 1295, 1295, 1296, 1296, 1297,
     1297, 1298, 1298, 1299, 1299, 1300, 1300, 1301, 1301, 1302,
     1302, 1303, 1303, 1304, 1304, 1305, 1305, 1306, 1306, 1307,

     1307, 1308, 1308, 1309, 1309, 1310, 1310, 1311, 1311, 1312,
     1312, 1313, 1313, 1314, 1314, 1315, 1315, 1316, 1316, 1317,
     1317, 1318, 1318, 1319, 1319, 1320, 1320, 1321, 1321, 1322,
     1322, 1323, 1323, 1324, 1324, 1325, 1325, 1326, 1326, 1327,
     1327, 1328, 1328, 1330, 1330, 1331, 1331, 1332, 1332, 1333,
     1333, 1334, 1334, 1335, 1335, 1336, 1336, 1337, 1337, 1338,
     1338, 1339, 1339, 1340, 1340, 1341, 1341, 1342, 1342, 1343,
     1343, 1344, 1344, 1345, 1345, 1346, 1346, 1347, 1347, 1348,
     1348, 1349, 1349, 1350, 1350, 1351, 1351, 1352, 1352, 1353,
     1353, 1354, 1354, 1355, 1355, 1356, 1356, 1357, 1357, 1358,

     1358, 1359, 1359, 1360, 1360, 1361, 1361, 1362, 1362, 1363,
     1363, 1364, 1364, 1365, 1365, 1366, 1366, 1367, 1367, 1368,
     1368, 1369, 1369, 1370, 1370, 1371, 1371, 1372, 1372, 1373,
     1373, 1374, 1374, 1375, 1375, 1376, 1376, 1377, 1377, 1378,
     1378, 1379, 1379, 1380, 1380, 1381,    0, 1381, 1382, 1382,
     1383, 1383, 1384, 1384, 1385, 1385, 1386, 1386, 1387, 1387,
     1388, 1388, 1389, 1389, 1390, 1390, 1391, 1391, 1393, 1393,
     1394, 1394, 1395, 1395, 1396, 1396, 1397, 1397, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1399, 1399, 1400, 1400, 1401,
     1401, 1402, 1402, 1403,    0, 1403, 1403, 1403, 1403, 1403,

     1404, 1404, 1405, 1405, 1406, 1406, 1407, 1407, 1408, 1408,
     1409, 1409, 1410, 1410, 1411, 1411, 1412, 1412, 1413, 1413,
     1414, 1414, 1415, 1415, 1416, 1416, 1417, 1417, 1418, 1418,
     1419, 1419, 1420,    0, 1420, 1420, 1420, 1420, 1420, 1421,
     1421, 1422, 1422, 1423, 1423, 1424, 1424, 1425, 1425, 1426,
     1426, 1427, 1427, 1428, 1428, 1429, 1429, 1430, 1430, 1431,
     1431, 1432, 1432, 1433, 1433, 1434, 1434, 1435, 1435, 1436,
     1436, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1438, 1438,
     1439, 1439, 1440, 1440, 1441, 1441, 1442,    0, 1442, 1442,
     1442, 1442, 1442, 1443, 1443, 1444, 1444, 1445, 1445, 1446,

     1446, 1447, 1447, 1448, 1448, 1449, 1449, 1450, 1450, 1451,
     1451, 1452, 1452, 1453, 1453, 1454, 1454, 1455, 1455, 1456,
     1456, 1457, 1457, 1458, 1458, 1459, 1459, 1460, 1460, 1461,
     1461, 1462, 1462, 1463, 1463, 1464, 1464, 1465, 1465, 1466,
     1466, 1467, 1467, 1468, 1468, 1469, 1469, 1470, 1470, 1470,
     1470, 1470, 1471, 1471, 1472, 1472, 1473, 1473, 1474, 1474,
     1475, 1475, 1476, 1476, 1477, 1477, 1478, 1478, 1479, 1479,
     1480, 1480, 1481, 1481, 1482, 1482, 1483, 1483, 1484, 1484,
     1485, 1485, 1486, 1486, 1487, 1487, 1487, 1488,    0, 1488,
     1489, 1489, 1491, 1491, 1492, 1492, 1493, 1493, 1494, 1494,

     1495, 1495, 1496, 1496, 1497, 1497, 1498, 1498, 1499, 1499,
     1500, 1500, 1501, 1501, 1502, 1502, 1503, 1503, 1504, 1504,
     1505, 1505, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1507,
     1507, 1508, 1508, 1509, 1509, 1510, 1510, 1511, 1511, 1512,
     1512, 1513, 1513, 1514, 1514, 1515, 1515, 1516, 1516, 1517,
     1517, 1518, 1518, 1519, 1519, 1520, 1520, 1521, 1521, 1522,
     1522, 1523, 1523, 1524, 1524, 1525, 1525, 1526, 1526, 1527,
     1527, 1528, 1528, 1529, 1529, 1530, 1530, 1531, 1531, 1532,
     1532, 1533, 1533, 1534, 1534, 1535, 1535, 1536, 1536, 1537,
     1537, 1538, 1538, 1539, 1539, 1540, 1540, 1541, 1541, 1542,

        0, 1542, 1542, 1542, 1542, 1542, 1543,    0, 1543, 1543,
     1543, 1543, 1543, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1545, 1545, 1546, 1546, 1547, 1547, 1548, 1548, 1549, 1549,
     1550, 1550, 1551, 1551, 1552, 1552, 1553, 1553, 1554, 1554,
     1555, 1555, 1556, 1556, 1557, 1557, 1558, 1558, 1559, 1559,
     1560, 1560, 1561, 1561, 1562, 1562, 1563, 1563, 1564, 1564,
     1565, 1565, 1566, 1566, 1567, 1567, 1568, 1568, 1569, 1569,
     1570, 1570, 1571, 1571, 1572, 1572, 1573, 1573, 1574, 1574,
     1575, 1575, 1576, 1576, 1577, 1577, 1578, 1578, 1579, 1579,
     1580,    0, 1580, 1580, 1580, 1580, 1580, 1581, 1581, 1582,

     1582, 1582, 1582, 1582, 1583,    0, 1583, 1584, 1584, 1585,
     1585, 1586, 1586, 1587, 1587, 1588, 1588, 1589, 1589, 1590,
     1590, 1591, 1591, 1592, 1592, 1593, 1593, 1594, 1594, 1595,
     1595, 1595, 1595, 1595, 1595, 1595, 1596, 1596, 1597, 1597,
     1598, 1598, 1599, 1599, 1600, 1600, 1601, 1601, 1602, 1602,
     1603, 1603, 1604, 1604, 1605, 1605, 1606, 1606, 1607, 1607,
     1608, 1608, 1609, 1609, 1610, 1610, 1611, 1611, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1613, 1613, 1614, 1614, 1615,
     1615, 1616, 1616, 1617, 1617, 1618, 1618, 1619, 1619, 1620,
     1620, 1621, 1621, 1622, 1622, 1623, 1623, 1624, 1624, 1625,

     1625, 1626, 1626, 1627, 1627, 1628, 1628, 1629,    0, 1629,
     1630, 1630, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1632,
        0, 1632, 1632, 1632, 1632, 1632, 1633, 1633, 1633, 1633,
     1633, 1633, 1633, 1634,    0, 1634, 1634, 1634, 1634, 1634,
     1635, 1635, 1635, 1635, 1635, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169
    } ;

static yyconst flex_int16_t yy_rule_linenum[35] =
    {   0,
      123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
      133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
      143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
      153,  154,  155,  158
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/TrigScanner.lpp"
/* $Id: TrigScanner.lpp,v 1.3 2008-10-03 07:06:04 eric Exp $ -*- mode: c++ -*- */
/** \file TrigScanner.ll Define the Flex lexical scanner */
#line 5 "lib/TrigScanner.lpp"

#include "TrigParser.hpp"
#include "TrigScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::TrigParser::token token;
typedef w3c_sw::TrigParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "TrigFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 56 "lib/TrigScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARQL terminals */
/*	        	 #x00B7 |        [#x0300-#x036F]        |             [#x203F-#x2040]
	        	   c2b7             cc80-cdaf                          e280b4-e28180 */
/* END patterns for SPARQL terminals */
/* START semantic actions for SPARQL terminals */
#line 2682 "lib/TrigScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 122 "lib/TrigScanner.lpp"

#line 2881 "lib/TrigScanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1170 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1169 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 35 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 35 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 36 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 123 "lib/TrigScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 124 "lib/TrigScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 125 "lib/TrigScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 126 "lib/TrigScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 127 "lib/TrigScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 128 "lib/TrigScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 129 "lib/TrigScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 130 "lib/TrigScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 131 "lib/TrigScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 132 "lib/TrigScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 133 "lib/TrigScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 134 "lib/TrigScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 135 "lib/TrigScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 136 "lib/TrigScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 137 "lib/TrigScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 138 "lib/TrigScanner.lpp"
{yylval->p_TTerm = driver->getBooleanRDFLiteral("true", true); return token::IT_true;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 139 "lib/TrigScanner.lpp"
{yylval->p_TTerm = driver->getBooleanRDFLiteral("false", false); return token::IT_false;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 140 "lib/TrigScanner.lpp"
{return token::RDF_TYPE;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 141 "lib/TrigScanner.lpp"
{return token::AT_BASE;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 142 "lib/TrigScanner.lpp"
{return token::AT_PREFIX;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 143 "lib/TrigScanner.lpp"
{yylval->p_URI = unescapeAndResolveBase(yytext+1, yyleng-2, yylloc); return token::IRIREF;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 144 "lib/TrigScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext, yylloc); return token::PNAME_NS;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 145 "lib/TrigScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext, yylloc); return token::PNAME_LN;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 146 "lib/TrigScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 147 "lib/TrigScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 148 "lib/TrigScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 149 "lib/TrigScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 150 "lib/TrigScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 151 "lib/TrigScanner.lpp"
{return unescapeString(yylval, yylloc, yytext+1, yyleng-2, token::STRING_LITERAL1);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 152 "lib/TrigScanner.lpp"
{return unescapeString(yylval, yylloc, yytext+1, yyleng-2, token::STRING_LITERAL2);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 153 "lib/TrigScanner.lpp"
{return unescapeString(yylval, yylloc, yytext+3, yyleng-6, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 154 "lib/TrigScanner.lpp"
{return unescapeString(yylval, yylloc, yytext+3, yyleng-6, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 155 "lib/TrigScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 157 "lib/TrigScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 158 "lib/TrigScanner.lpp"
{
    std::stringstream ss;
    ss << "unexpected input '" << yytext << "'";
    driver->error(*yylloc, ss.str());
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 164 "lib/TrigScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3143 "lib/TrigScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( FLEX_STD istream* arg_yyin, FLEX_STD ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Trigfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Trigfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Trigrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Trigrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1170 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1170 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1169);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Trigalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Trigalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Trigfree((void *) b->yy_ch_buf  );

	Trigfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)Trigalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Trigrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Trigalloc(new_size  );

		else
			(yy_start_stack) = (int *) Trigrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Trigalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *Trigrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void Trigfree (void * ptr )
{
			free( (char *) ptr );	/* see Trigrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 164 "lib/TrigScanner.lpp"


/* END semantic actions for SPARQL terminals */

/* START TrigScanner */
namespace w3c_sw {

TrigScanner::TrigScanner (TrigDriver* driver, std::istream* in, std::ostream* out) : TrigFlexLexer(in, out), driver(driver) {  }
TrigScanner::~TrigScanner () {  }

} // END namespace w3c_sw

/* This implementation of TrigFlexLexer::yylex() is required to fill the
 * vtable of the class TrigFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the TrigScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int TrigFlexLexer::yylex()
{
    std::cerr << "in TrigFlexLexer::yylex() !" << std::endl;
    return 0;
}


